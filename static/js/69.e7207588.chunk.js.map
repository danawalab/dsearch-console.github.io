{"version":3,"sources":["pages/auth/SignIn.js"],"names":["Button","styled","MuiButton","spacing","Wrapper","Paper","props","theme","breakpoints","up","connect","store","dsearchReducers","dispatch","useState","server","setServer","serverError","setServerError","email","setEmail","password","setPassword","inValid","setInValid","loginSave","setLoginSave","handleSignIn","localStorage","removeItem","SET_DSEARCH_AUTH_USER","length","signInProcess","startsWith","sessionStorage","setItem","SET_DSEARCH_SERVER","setDsearchSignIn","then","response","console","log","JSON","stringify","hash1","hash2","btoa","hash3","hash4","location","replace","catch","err","useEffect","dsearchServer","getItem","hash","parse","setDsearchAuthUser","atob","Fragment","title","align","alt","src","style","marginTop","fontSize","component","variant","gutterBottom","margin","required","fullWidth","htmlFor","id","name","autoComplete","autoFocus","value","onChange","event","target","onBlur","checkServer","setDsearchServer","error","onKeyUp","keyCode","type","control","color","checked","label","container","item","xs","mb","onClick","position","top","height","textAlign"],"mappings":"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","file":"static/js/69.e7207588.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Helmet from 'react-helmet';\r\n\r\nimport {\r\n    Box,\r\n    Button as MuiButton,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid,\r\n    Input,\r\n    InputLabel,\r\n    Paper,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {setDsearchAuthUser, setDsearchServer, setDsearchSignIn} from \"../../redux/actions/dsearchActions\";\r\nimport {SET_DSEARCH_AUTH_USER, SET_DSEARCH_SERVER} from \"../../redux/constants\";\r\n\r\nconst Button = styled(MuiButton)(spacing);\r\n\r\nconst Wrapper = styled(Paper)`\r\n  padding: ${props => props.theme.spacing(6)}px;\r\n\r\n  ${props => props.theme.breakpoints.up(\"md\")} {\r\n    padding: ${props => props.theme.spacing(10)}px;\r\n  }\r\n`;\r\n\r\nlet authenticatedRoute = \"/cluster\"\r\n\r\nfunction SignIn({dispatch}) {\r\n    const [server, setServer] = useState(\"\")\r\n    const [serverError, setServerError] = useState(false)\r\n    const [email, setEmail] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [inValid, setInValid] = useState(false)\r\n    const [loginSave, setLoginSave] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const dsearchServer = localStorage.getItem(SET_DSEARCH_SERVER)\r\n        const hash = JSON.parse(localStorage.getItem(SET_DSEARCH_AUTH_USER) || \"{}\")\r\n        // 서버의 세션 유무 체크.\r\n        dispatch(setDsearchAuthUser())\r\n            .then(response => {\r\n                console.log(\"authenticated\")\r\n                sessionStorage.setItem(SET_DSEARCH_SERVER, localStorage.getItem(SET_DSEARCH_SERVER));\r\n                location.replace(authenticatedRoute)\r\n            })\r\n\r\n        // 자동로그인 (로컬 스토리지 정보 로그인 시도)\r\n        if (hash['hash1']) {\r\n            console.log(\"auto login\")\r\n            setLoginSave(hash['hash1'])\r\n            signInProcess(atob(atob(atob(hash['hash2']))), atob(atob(atob(hash['hash3']))), atob(atob(atob(hash['hash4']))))\r\n        }\r\n\r\n        // 마지막 서버 접속 정보\r\n        if (dsearchServer) {\r\n            setServer(dsearchServer)\r\n        }\r\n    }, [])\r\n\r\n    function checkServer() {\r\n        if (server.length === 0) {\r\n            setServerError(true)\r\n            return\r\n        }\r\n        let checkServer = server\r\n        if (!server.startsWith(\"http\")) {\r\n            checkServer = \"http://\" + server\r\n        }\r\n        dispatch(setDsearchServer(checkServer))\r\n            .then(response => {\r\n                response ? setServerError(false) : setServerError(true)\r\n            })\r\n            .catch(error => setServerError(true))\r\n    }\r\n\r\n    function handleSignIn() {\r\n        // 자동로그인 (로컬 스토리지 정보 삭제)\r\n        localStorage.removeItem(SET_DSEARCH_AUTH_USER)\r\n        if (email.length === 0 || password.length === 0) {\r\n            setInValid(true)\r\n            return\r\n        }\r\n        setInValid(false)\r\n        signInProcess(server, email, password)\r\n    }\r\n\r\n    function signInProcess(server, email, password) {\r\n        if (!server.startsWith(\"https://\") && !server.startsWith(\"http://\")) {\r\n            server = \"http://\" + server\r\n        }\r\n        sessionStorage.setItem(SET_DSEARCH_SERVER, server);\r\n        dispatch(setDsearchSignIn({server, email, password}))\r\n            .then(response => {\r\n                console.log(\"sign in success\")\r\n                setInValid(false)\r\n                if (loginSave) {\r\n                    // 자동로그인 (로컬 스토리지 추가)\r\n                    localStorage.setItem(SET_DSEARCH_AUTH_USER, JSON.stringify({\r\n                        hash1: loginSave,\r\n                        hash2: btoa(btoa(btoa(server))),\r\n                        hash3: btoa(btoa(btoa(email))),\r\n                        hash4: btoa(btoa(btoa(password)))\r\n                    }))\r\n                }\r\n                location.replace(authenticatedRoute)\r\n            })\r\n            .catch(err => {\r\n                setInValid(true);\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Wrapper>\r\n                <Helmet title=\"로그인\"/>\r\n                <Box align={\"center\"}>\r\n                    <img alt=\"dsearch\" src=\"/static/img/dsearch/danawa_m_login.png\" />\r\n                </Box>\r\n                <Box style={{marginTop: \"12px\"}}>\r\n                    <Typography style={{fontSize: \"1.45rem\"}} component=\"h1\" variant=\"h4\" align=\"center\" gutterBottom>\r\n                        로그인\r\n                    </Typography>\r\n                </Box>\r\n                {/*<Typography component=\"h2\" variant=\"body1\" align=\"center\">*/}\r\n                {/*    Sign in to your account to continue*/}\r\n                {/*</Typography>*/}\r\n                <form>\r\n                    <FormControl margin=\"normal\" required fullWidth>\r\n                        <InputLabel htmlFor=\"server\">서버</InputLabel>\r\n                        <Input id=\"server\"\r\n                               name=\"server\"\r\n                               autoComplete=\"server\"\r\n                               autoFocus\r\n                               value={server}\r\n                               onChange={event => setServer(event.target.value)}\r\n                               onBlur={checkServer}\r\n                               error={serverError}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl margin=\"normal\" required fullWidth>\r\n                        <InputLabel htmlFor=\"server\">이메일</InputLabel>\r\n                        <Input id=\"email\"\r\n                               name=\"email\"\r\n                               autoComplete=\"email\"\r\n                               value={email}\r\n                               onChange={event => setEmail(event.target.value)}\r\n                               error={inValid}\r\n                               onKeyUp={event => event.keyCode === 13 ? handleSignIn() : null}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControl margin=\"normal\" required fullWidth>\r\n                        <InputLabel htmlFor=\"password\">비밀번호</InputLabel>\r\n                        <Input\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            value={password}\r\n                            onChange={event => setPassword(event.target.value)}\r\n                            error={inValid}\r\n                            onKeyUp={event => event.keyCode === 13 ? handleSignIn() : null}\r\n                        />\r\n                    </FormControl>\r\n                    <FormControlLabel\r\n                        control={<Checkbox color=\"primary\"\r\n                                           checked={loginSave}\r\n                                           onChange={() => setLoginSave(!loginSave)}\r\n                        />}\r\n                        label=\"로그인 저장\"\r\n                    />\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box>\r\n                                <Button\r\n                                    fullWidth\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    mb={2}\r\n                                    onClick={handleSignIn}\r\n                                >\r\n                                    로그인\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                        {/*<Grid item xs={6}>*/}\r\n                        {/*    <Button*/}\r\n                        {/*        fullWidth*/}\r\n                        {/*        variant=\"contained\"*/}\r\n                        {/*        color=\"primary\"*/}\r\n                        {/*        mb={2}*/}\r\n                        {/*        onClick={handleSignIn}*/}\r\n                        {/*    >*/}\r\n                        {/*        로그인*/}\r\n                        {/*    </Button>*/}\r\n                        {/*</Grid>*/}\r\n                        {/*<Grid item xs={6}>*/}\r\n                        {/*    <Button*/}\r\n                        {/*        fullWidth*/}\r\n                        {/*        color=\"primary\"*/}\r\n                        {/*    >*/}\r\n                        {/*        취소*/}\r\n                        {/*    </Button>*/}\r\n                        {/*</Grid>*/}\r\n                    </Grid>\r\n                </form>\r\n\r\n                <Box style={{position: \"relative\", top: \"60px\", height: \"0px\", textAlign: \"center\", fontSize: \"0.8em\"}}>\r\n                    © 2020. danawa Co., Ltd. All Rights Reserved.\r\n                </Box>\r\n            </Wrapper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({...store.dsearchReducers}))(SignIn);\r\n"],"sourceRoot":""}
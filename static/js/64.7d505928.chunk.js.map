{"version":3,"sources":["pages/indices/index/index.js","redux/actions/indicesActions.js"],"names":["useStyles","makeStyles","theme","Divider","styled","MuiDivider","spacing","connect","store","indicesReducers","dispatch","indices","classes","history","useHistory","useState","checked","setChecked","useEffect","setIndicesAction","sortedIndices","filter","index","startsWith","map","no","sort","a","b","Fragment","title","variant","gutterBottom","display","my","align","control","onChange","event","color","name","inputProps","label","component","Paper","className","table","aria-label","statusColor","statusText","grey","yellow","red","green","key","scope","style","cursor","onClick","uuid","push","backgroundColor","width","fontSize","client","Client","setIndexAction","type","SET_INDEX","payload","call","uri","params","format","then","response","SET_INDICES","data","catch","error","console","setIndexInfoListAction","SET_INDEX_INFO_LIST","setIndexAliasesAction","SET_INDEX_ALIASES","setIndexSettingsAction","SET_INDEX_SETTINGS","setIndexMappingsAction","SET_INDEX_MAPPINGS","setIndexStateAction","SET_INDEX_STATE","editDynamicQueryAction","query","method","setIndexDocumentSourceListAction","from","size","id","columns","keyword","undefined","SET_INDEX_DOCUMENT_SOURCE_RESPONSE","editIndexDocumentSourceAction","body","addIndexDocumentSourceAction","deleteIndexDocumentSourceAction","analyzerDocumentSourceAction","analyzerDocument","setIndexManagedAction","action","deleteIndexAction"],"mappings":"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","file":"static/js/64.7d505928.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Helmet from 'react-helmet';\r\nimport {useHistory} from \"react-router-dom\"\r\nimport {\r\n    Box,\r\n    Divider as MuiDivider, FormControlLabel,\r\n    Link,\r\n    Paper, Switch,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Avatar,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {setIndicesAction} from \"../../../redux/actions/indicesActions\";\r\nimport {connect} from \"react-redux\";\r\nimport {green, grey, orange, red, yellow} from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({}));\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nfunction Index({dispatch, indices}) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [checked, setChecked] = useState(false)\r\n\r\n    useEffect(() => {\r\n        dispatch(setIndicesAction())\r\n    }, [])\r\n\r\n\r\n    function moveDetail(uuid) {\r\n        history.push(`./indices/${uuid}`)\r\n    }\r\n\r\n    function handleChecked(event) {\r\n        setChecked(!checked)\r\n    }\r\n    let list = indices.filter(index => checked ? true : index['index'].startsWith(\".\") === false ).map((index, no) => { return index; })\r\n    let sortedIndices = list.sort(function (a,b){\r\n        if(a['index'] > b['index']){\r\n            return 1;\r\n        }else{\r\n            return -1;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"인덱스\"/>\r\n\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                인덱스\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            {/*<Box align={'right'}>*/}\r\n            {/*    <Link href={\"../indices/template\"} color={\"primary\"} >*/}\r\n            {/*        인덱스 생성*/}\r\n            {/*    </Link>*/}\r\n            {/*</Box>*/}\r\n\r\n            <br/>\r\n            <Box align={\"right\"}>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={checked}\r\n                            onChange={handleChecked}\r\n                            color=\"primary\"\r\n                            name=\"IndexModeSelector\"\r\n                            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                        />\r\n                    }\r\n                    label=\"특수 인덱스 보기\"\r\n                />\r\n            </Box>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">#</TableCell>\r\n                            <TableCell align=\"center\">이름</TableCell>\r\n                            <TableCell align=\"center\">샤드</TableCell>\r\n                            <TableCell align=\"center\">문서 수</TableCell>\r\n                            <TableCell align=\"center\">용량</TableCell>\r\n                            <TableCell align=\"center\">상태</TableCell>\r\n                            {/*health*/}\r\n                        {/*  status  */}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {sortedIndices.map((index, no) => {\r\n                            let statusColor = \"\";\r\n                            let statusText = \"\";\r\n                            if (index['status'] === 'close') {\r\n                                statusColor = grey[700];\r\n                                statusText = \"닫힘\";\r\n                            } else if (index['health'] === \"yellow\") {\r\n                                statusColor = yellow[700];\r\n                                statusText = \"주의\";\r\n                            } else if (index['health'] === \"red\") {\r\n                                statusColor = red[700];\r\n                                statusText = \"오류\";\r\n                            } else {\r\n                                statusColor = green[500];\r\n                                statusText = \"정상\";\r\n                            }\r\n\r\n                            return (\r\n                                <TableRow key={index['uuid']}>\r\n                                    <TableCell component=\"th\" scope=\"row\" align=\"center\">{no + 1}</TableCell>\r\n                                    <TableCell align=\"center\" >\r\n                                        <Link style={{cursor: \"pointer\"}} onClick={() => moveDetail(index['uuid'])}>\r\n                                            {index['index']}\r\n                                        </Link>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Box>\r\n                                            P[{index['pri']||'-'}] R[{index['rep']||'-'}]\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Box>\r\n                                            {index['docs.count']||'-'}\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Box>\r\n                                            {index['store.size']||'-'}\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        <Box align=\"center\">\r\n                                            <Avatar style={{backgroundColor: statusColor, width: \"40px\", fontSize: \"0.8em\"}}>\r\n                                                {statusText}\r\n                                            </Avatar>\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        })}\r\n                        {/* {\r\n                            indices.filter(index => checked ? true : index['index'].startsWith(\".\") === false ).map((index, no) => {\r\n                                return (\r\n                                    <TableRow key={index['uuid']}>\r\n                                        <TableCell component=\"th\" scope=\"row\" align=\"center\">{no + 1}</TableCell>\r\n                                        <TableCell align=\"center\" >\r\n                                            <Link style={{cursor: \"pointer\"}} onClick={() => moveDetail(index['uuid'])}>\r\n                                                {index['index']}\r\n                                            </Link>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">{index['status']}</TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            })\r\n                        } */}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    ...store.indicesReducers,\r\n}))(Index);\r\n","import Client from '~/Client'\r\nimport {\r\n    SET_INDEX,\r\n    SET_INDEX_ALIASES, SET_INDEX_DOCUMENT_SOURCE_RESPONSE,\r\n    SET_INDEX_DOCUMENTS,\r\n    SET_INDEX_INFO_LIST,\r\n    SET_INDEX_MAPPINGS,\r\n    SET_INDEX_SETTINGS,\r\n    SET_INDEX_STATE,\r\n    SET_INDICES\r\n} from \"../constants\";\r\n\r\n\r\nconst client = new Client()\r\n\r\n\r\nexport const setIndexAction = (index) => dispatch => dispatch({type: SET_INDEX, payload: index})\r\n\r\nexport const setIndicesAction = () => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/_cat/indices`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDICES, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const setIndexInfoListAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/_cat/indices/${index}`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_INFO_LIST, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const setIndexAliasesAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_alias`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_ALIASES, payload: (response.data[index] || {})['aliases']}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const setIndexSettingsAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_settings?include_defaults`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_SETTINGS, payload: response.data[index]||{}}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const setIndexMappingsAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_mappings`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_MAPPINGS, payload: ((response.data[index] || {})['mappings']||{}) }))\r\n        .catch(error => console.error(error))\r\n    // dispatch({type: SET_INDEX_MAPPINGS, payload: ((response.data[index] || {})['mappings']||{})['properties'] })\r\n\r\nexport const setIndexStateAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_stats`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_STATE, payload: response.data }))\r\n        .catch(error => console.error(error))\r\n\r\nexport const editDynamicQueryAction = (index, query) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_settings`,\r\n    method: \"PUT\",\r\n    data: query\r\n})\r\n\r\n\r\nexport const setIndexDocumentsAction = ({index, pageNum, rowSize, id, analysis}) => dispatch => client.call({\r\n    uri: `/indices/${index}/_docs`,\r\n    params: {\r\n        index,\r\n        pageNum,\r\n        rowSize,\r\n        id,\r\n        analysis\r\n    }\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_DOCUMENTS,\r\n    payload: response.data,\r\n})).catch(err => console.error(err))\r\n\r\n\r\nexport const setIndexDocumentSourceListAction = ({index, from, size, id, columns=[], keyword = null}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_search`,\r\n    method: 'post',\r\n    data: id !== undefined && id !== null && id !== \"\" ?\r\n        { \"query\": { \"match\": { \"_id\": id } }, from, size, \"sort\": [{ \"_id\": { \"order\": \"desc\" } }] }\r\n        :\r\n        keyword !== undefined && keyword !== null && keyword !== \"\"?\r\n            { \"query\": {\r\n                // \"bool\": {\r\n                //     \"minimum_should_match\": 1,\r\n                //     \"should\": (columns.map(c =>  ({ \"match\": { [c]: keyword } }))  ) }\r\n                    \"multi_match\" : {\r\n                        \"query\":    keyword,\r\n                        \"fields\": columns,\r\n                        \"operator\": \"or\"\r\n                    }},\r\n                from,\r\n                size,\r\n                \"sort\": [{ \"_score\": { \"order\": \"desc\" } }, { \"_id\": { \"order\": \"desc\" } }] }\r\n            :\r\n            { from, size, \"sort\": [ { \"_score\": { \"order\": \"desc\" } }, { \"_id\": { \"order\": \"desc\" } }] }\r\n}).then(response => {\r\n    dispatch({ type: SET_INDEX_DOCUMENT_SOURCE_RESPONSE, payload: response.data })\r\n    return response.data;\r\n})\r\n\r\nexport const editIndexDocumentSourceAction = ({index, id, body}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc/${id}`,\r\n    method: 'put',\r\n    data: body\r\n}).then(response => response.data)\r\n\r\nexport const addIndexDocumentSourceAction = ({index, body}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc`,\r\n    method: 'post',\r\n    data: body\r\n}).then(response => response.data)\r\n\r\nexport const deleteIndexDocumentSourceAction = ({index, id}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc/${id}`,\r\n    method: 'DELETE',\r\n}).then(response => response.data)\r\n\r\nexport const analyzerDocumentSourceAction = (index, analyzerDocument) => dispatch => client.call({\r\n    uri: `/indices/${index}/analyzer`,\r\n    method: \"post\",\r\n    data: analyzerDocument\r\n}).then(response => response.data)\r\n\r\n\r\nexport const setIndexManagedAction = (action, index) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/${action}`,\r\n    method: \"post\"\r\n}).then(response => response.data)\r\n\r\nexport const deleteIndexAction = index => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}`,\r\n    method: \"delete\"\r\n}).then(response => response.data)"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/@material-ui/core/esm/Switch/Switch.js","redux/actions/roleManagementActions.js","pages/role/index.js"],"names":["Switch","React","props","ref","classes","className","_props$color","color","_props$edge","edge","_props$size","size","other","_objectWithoutProperties","icon","thumb","clsx","root","edgeStart","edgeEnd","concat","capitalize","SwitchBase","_extends","type","checkedIcon","switchBase","input","checked","disabled","track","withStyles","theme","display","width","height","overflow","padding","boxSizing","position","flexShrink","zIndex","verticalAlign","marginLeft","marginRight","top","left","palette","grey","transition","transitions","create","duration","shortest","transform","opacity","colorPrimary","primary","main","backgroundColor","fade","action","hoverOpacity","common","black","white","colorSecondary","secondary","sizeSmall","boxShadow","shadows","borderRadius","name","client","Client","setRoleListAction","dispatch","call","uri","then","response","SET_ROLE_LIST","payload","data","catch","err","console","error","addRoleAction","role","method","SET_ROLE","editRoleAction","id","removeRoleAction","Card","styled","MuiCard","spacing","Divider","MuiDivider","useStyles","makeStyles","table","minWidth","roleTable","marginTop","warning","red","StyledTableCell","body","fontSize","TableCell","StyledTableRow","background","default","TableRow","TextFieldSpacing","MuiTextField","TextField","StyledMenu","paper","border","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","MenuItem","connect","store","roleManagementReducers","dsearchReducers","roleList","userRolesList","authUser","useTheme","fullScreen","useMediaQuery","breakpoints","down","useState","selectedId","setSelectedId","openDropDown","setOpenDropDown","openAddModal","setOpenAddModal","openEditModal","setOpenEditModal","setName","nameError","setNameError","analysis","setAnalysis","index","setIndex","search","setSearch","manage","setManage","toggleDropDownButton","event","currentTarget","toggleAddModal","toggleEditModal","find","useEffect","isManager","Fragment","title","variant","gutterBottom","my","container","alignItems","justify","item","xs","align","style","aria-controls","aria-haspopup","onClick","anchorEl","keepMounted","open","Boolean","onClose","undefined","userRoles","finally","aria-label","map","row","key","component","scope","onChange","target","fullWidth","noValidate","autoComplete","value","inputProps","m","log","ml","mr","mb","mt","alert"],"mappings":"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","file":"static/js/59.7deb2788.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n// @inheritedComponent IconButton\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport withStyles from '../styles/withStyles';\nimport { fade } from '../styles/colorManipulator';\nimport capitalize from '../utils/capitalize';\nimport SwitchBase from '../internal/SwitchBase';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'inline-flex',\n      width: 34 + 12 * 2,\n      height: 14 + 12 * 2,\n      overflow: 'hidden',\n      padding: 12,\n      boxSizing: 'border-box',\n      position: 'relative',\n      flexShrink: 0,\n      zIndex: 0,\n      // Reset the stacking context.\n      verticalAlign: 'middle' // For correct alignment with the text.\n\n    },\n\n    /* Styles applied to the root element if `edge=\"start\"`. */\n    edgeStart: {\n      marginLeft: -8\n    },\n\n    /* Styles applied to the root element if `edge=\"end\"`. */\n    edgeEnd: {\n      marginRight: -8\n    },\n\n    /* Styles applied to the internal `SwitchBase` component's `root` class. */\n    switchBase: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 1,\n      // Render above the focus ripple.\n      color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],\n      transition: theme.transitions.create(['left', 'transform'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      '&$checked': {\n        transform: 'translateX(20px)'\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        opacity: 0.5\n      },\n      '&$disabled + $track': {\n        opacity: theme.palette.type === 'light' ? 0.12 : 0.1\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.primary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the internal SwitchBase component's root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]\n      },\n      '&$checked + $track': {\n        backgroundColor: theme.palette.secondary.main\n      },\n      '&$disabled + $track': {\n        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white\n      }\n    },\n\n    /* Styles applied to the root element if `size=\"small\"`. */\n    sizeSmall: {\n      width: 40,\n      height: 24,\n      padding: 7,\n      '& $thumb': {\n        width: 16,\n        height: 16\n      },\n      '& $switchBase': {\n        padding: 4,\n        '&$checked': {\n          transform: 'translateX(16px)'\n        }\n      }\n    },\n\n    /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */\n    checked: {},\n\n    /* Pseudo-class applied to the internal SwitchBase component's disabled class. */\n    disabled: {},\n\n    /* Styles applied to the internal SwitchBase component's input element. */\n    input: {\n      left: '-100%',\n      width: '300%'\n    },\n\n    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */\n    thumb: {\n      boxShadow: theme.shadows[1],\n      backgroundColor: 'currentColor',\n      width: 20,\n      height: 20,\n      borderRadius: '50%'\n    },\n\n    /* Styles applied to the track element. */\n    track: {\n      height: '100%',\n      width: '100%',\n      borderRadius: 14 / 2,\n      zIndex: -1,\n      transition: theme.transitions.create(['opacity', 'background-color'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,\n      opacity: theme.palette.type === 'light' ? 0.38 : 0.3\n    }\n  };\n};\nvar Switch = React.forwardRef(function Switch(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$edge = props.edge,\n      edge = _props$edge === void 0 ? false : _props$edge,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"edge\", \"size\"]);\n\n  var icon = React.createElement(\"span\", {\n    className: classes.thumb\n  });\n  return React.createElement(\"span\", {\n    className: clsx(classes.root, className, {\n      'start': classes.edgeStart,\n      'end': classes.edgeEnd\n    }[edge], size === \"small\" && classes[\"size\".concat(capitalize(size))])\n  }, React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    icon: icon,\n    checkedIcon: icon,\n    classes: {\n      root: clsx(classes.switchBase, classes[\"color\".concat(capitalize(color))]),\n      input: classes.input,\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    ref: ref\n  }, other)), React.createElement(\"span\", {\n    className: classes.track\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Switch.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * @ignore\n   */\n  defaultChecked: PropTypes.bool,\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   */\n  edge: PropTypes.oneOf(['start', 'end', false]),\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the switch.\n   * `small` is equivalent to the dense switch styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSwitch'\n})(Switch);","import {SET_API_MANAGEMENT, SET_ROLE, SET_ROLE_LIST} from \"../constants\";\r\nimport Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const setRoleListAction = () => dispatch => client.call({\r\n    uri: `/roles`\r\n}).then(response => dispatch({type: SET_ROLE_LIST, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const addRoleAction = role => dispatch => client.call({\r\n    uri: `/roles`,\r\n    method: \"POST\",\r\n    data: role\r\n}).then(response => dispatch({type: SET_ROLE, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const editRoleAction = (id, role) => dispatch => client.call({\r\n    uri: `/roles/${id}`,\r\n    method: \"PUT\",\r\n    data: role\r\n}).then(response => dispatch({type: SET_ROLE, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const removeRoleAction = (id) => dispatch => client.call({\r\n    uri: `/roles/${id}`,\r\n    method: \"DELETE\"\r\n})","import React, {useEffect} from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {makeStyles, useTheme, withStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider as MuiDivider,\r\n    Grid,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n    Switch,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField as MuiTextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {ArrowDropDown} from \"@material-ui/icons\";\r\nimport red from '@material-ui/core/colors/red';\r\nimport {\r\n    addRoleAction,\r\n    editRoleAction,\r\n    removeRoleAction,\r\n    setRoleListAction\r\n} from \"../../redux/actions/roleManagementActions\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport dsearchReducers from \"../../redux/reducers/dsearchReducers\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 600,\r\n    },\r\n    roleTable: {\r\n        marginTop: \"30px\",\r\n        minWidth: 300\r\n    },\r\n    warning: {\r\n        color: red[500],\r\n        marginTop: \"30px\"\r\n    }\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.background.default,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\n\r\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\r\n\r\nconst TextField = styled(TextFieldSpacing)`\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n        border: '1px solid #d3d4d5',\r\n    },\r\n})((props) => (\r\n    <Menu\r\n        elevation={0}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n        '&:focus': {\r\n            backgroundColor: theme.palette.primary.main,\r\n            '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n                color: theme.palette.common.white,\r\n            },\r\n        },\r\n    },\r\n}))(MenuItem);\r\n\r\nfunction Role({dispatch, roleList, userRolesList, authUser}) {\r\n    const classes = useStyles();\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [selectedId, setSelectedId] = React.useState(\"\")\r\n\r\n    const [openDropDown, setOpenDropDown] = React.useState(null);\r\n    const [openAddModal, setOpenAddModal] = React.useState(false);\r\n    const [openEditModal, setOpenEditModal] = React.useState(false);\r\n\r\n    const [name, setName] = React.useState(\"\");\r\n    const [nameError, setNameError] = React.useState(false);\r\n    const [analysis, setAnalysis] = React.useState(false);\r\n    const [index, setIndex] = React.useState(false);\r\n    const [search, setSearch] = React.useState(false);\r\n    const [manage, setManage] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(setRoleListAction())\r\n    }, [])\r\n\r\n\r\n    function handleSelectCheckbox(id) {\r\n        if (selectedId === id) {\r\n            setSelectedId(\"\")\r\n        } else {\r\n            setSelectedId(id)\r\n        }\r\n    }\r\n\r\n    function toggleDropDownButton(event) {\r\n        if (openDropDown === null) {\r\n            setOpenDropDown(event.currentTarget);\r\n        } else {\r\n            setOpenDropDown(null);\r\n        }\r\n    }\r\n\r\n    function toggleAddModal(){\r\n        setName(\"\")\r\n        setAnalysis(false)\r\n        setIndex(false)\r\n        setSearch(false)\r\n        setManage(false)\r\n        setOpenAddModal(!openAddModal);\r\n    }\r\n\r\n    function handleRoleAddProcess() {\r\n        if (name === \"\") {\r\n            setNameError(true)\r\n            return false\r\n        }\r\n        dispatch(addRoleAction({\r\n            name, analysis, index, search, manage\r\n        })).then(response => {\r\n            console.log(response)\r\n        }).catch(error => {\r\n            console.error(error)\r\n        }).finally(() => {\r\n            dispatch(setRoleListAction())\r\n            toggleAddModal()\r\n            toggleDropDownButton()\r\n        })\r\n    }\r\n\r\n\r\n\r\n    function toggleEditModal() {\r\n        if (openEditModal === false) {\r\n            const role = roleList.find(role => role['id'] === selectedId)\r\n            setName(role['name'])\r\n            setAnalysis(role['analysis'])\r\n            setIndex(role['index'])\r\n            setSearch(role['search'])\r\n            setManage(role['manage'])\r\n        } else {\r\n            dispatch(setRoleListAction())\r\n        }\r\n        setOpenEditModal(!openEditModal)\r\n    }\r\n\r\n    function handleRoleEditProcess() {\r\n        if (name === \"\") {\r\n            setNameError(true)\r\n            return false\r\n        }\r\n        dispatch(editRoleAction(selectedId, {\r\n            name, analysis, index, search, manage\r\n        })).then(response => {\r\n            console.log(response)\r\n            toggleEditModal()\r\n        }).catch(error => {\r\n            console.error(error)\r\n            alert(\"실패\")\r\n        }).finally(() => {\r\n            toggleDropDownButton()\r\n        })\r\n    }\r\n\r\n    function handleRoleRemoveProcess() {\r\n        dispatch(removeRoleAction(selectedId))\r\n            .then(response => setSelectedId(\"\"))\r\n            .finally(() => {\r\n                toggleDropDownButton()\r\n                dispatch(setRoleListAction())\r\n            })\r\n    }\r\n\r\n    const isManager = authUser['role']['manage']\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"역할\"/>\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                역할\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <Grid container spacing={6} alignItems=\"center\" justify=\"center\">\r\n                <Grid item xs={12}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <div align={\"right\"} style={{display: isManager ? 'block' : 'none'}}>\r\n                                <Button\r\n                                    aria-controls=\"customized-menu\"\r\n                                    aria-haspopup=\"true\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={toggleDropDownButton}\r\n                                >\r\n                                    작업\r\n                                    <ArrowDropDown/>\r\n                                </Button>\r\n\r\n                                <StyledMenu\r\n                                    id=\"customized-menu\"\r\n                                    anchorEl={openDropDown}\r\n                                    keepMounted\r\n                                    open={Boolean(openDropDown)}\r\n                                    onClose={toggleDropDownButton}\r\n                                >\r\n                                    <StyledMenuItem onClick={toggleAddModal}>\r\n                                        <ListItemIcon>\r\n                                            <InboxIcon fontSize=\"small\"/>\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"추가\"/>\r\n                                    </StyledMenuItem>\r\n                                    <StyledMenuItem disabled={selectedId === \"\"} onClick={toggleEditModal}>\r\n                                        <ListItemIcon>\r\n                                            <SendIcon fontSize=\"small\"/>\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"수정\"/>\r\n                                    </StyledMenuItem>\r\n                                    <StyledMenuItem disabled={selectedId === \"\" || userRolesList.find(userRoles => userRoles['roleId'] === selectedId) !== undefined } onClick={handleRoleRemoveProcess}>\r\n                                        <ListItemIcon>\r\n                                            <DraftsIcon fontSize=\"small\"/>\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"삭제\"/>\r\n                                    </StyledMenuItem>\r\n                                </StyledMenu>\r\n                            </div>\r\n\r\n                            <TableContainer>\r\n                                <Table className={classes.table} aria-label=\"customized table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            {\r\n                                                isManager ?\r\n                                                    <StyledTableCell align=\"center\" style={{width: \"10%\"}}>#</StyledTableCell>\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                            <StyledTableCell align=\"center\" style={{width: \"40%\"}}>역할</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>분석 권한</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>인덱스 권한</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>검색 권한</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>관리 권한</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\" style={{width: \"10%\"}}>사용 여부</StyledTableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {roleList.map(row => (\r\n                                            <StyledTableRow key={row['id']}>\r\n                                                {\r\n                                                    isManager ?\r\n                                                        <StyledTableCell component=\"th\"\r\n                                                                         scope=\"row\"\r\n                                                                         align=\"center\"\r\n                                                        >\r\n                                                            <Checkbox color=\"primary\"\r\n                                                                      checked={selectedId === row['id']}\r\n                                                                      onChange={event => handleSelectCheckbox(row['id'], event.target.checked)}\r\n                                                            />\r\n                                                        </StyledTableCell>\r\n                                                        :\r\n                                                        null\r\n                                                }\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    {row['name'] || ''}\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <Checkbox checked={row['analysis']}/>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <Checkbox checked={row['index']}/>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <Checkbox checked={row['search']}/>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <Checkbox checked={row['manage']}/>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    {\r\n                                                        userRolesList.find(userRoles => userRoles['roleId'] === row['id']) ?\r\n                                                            <Box component={\"span\"}>사용</Box>\r\n                                                            :\r\n                                                            <Box component={\"span\"}>미사용</Box>\r\n                                                    }\r\n                                                </StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Dialog open={openAddModal}\r\n                    onClose={toggleAddModal}\r\n                    fullScreen={fullScreen}\r\n                    fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">역할 추가</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <form noValidate autoComplete=\"off\">\r\n\r\n                        <Grid container spacing={6}>\r\n                            <Grid item xs={3}> 이름 </Grid>\r\n                            <Grid item xs={8}>\r\n                                <TextField value={name} onChange={event => setName(event.target.value)} error={nameError}/>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container className={classes.roleTable}>\r\n                            <Grid item xs={3}>\r\n                                권한\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n\r\n                                <Table size=\"small\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">쓰기권한</TableCell>\r\n                                            <TableCell align=\"center\">영역</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={analysis}\r\n                                                    onChange={event => setAnalysis(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                분석\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={index}\r\n                                                    onChange={event => setIndex(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                인덱스\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={search}\r\n                                                    onChange={event => setSearch(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                검색\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={manage}\r\n                                                    onChange={event => setManage(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                관리\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container>\r\n                            <Grid item xs={12} m={5}>\r\n                                <Box className={classes.warning}>\r\n                                    * 모든영역에 대한 읽기권한은 기본적으로 존재합니다.\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleRoleAddProcess} color=\"primary\"> 추가 </Button>\r\n                    <Button onClick={toggleAddModal} color=\"primary\"> 취소 </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n            <Dialog open={openEditModal}\r\n                    onClose={toggleEditModal}\r\n                    fullScreen={fullScreen}\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">역할 수정 </DialogTitle>\r\n                <DialogContent>\r\n                    <form noValidate autoComplete=\"off\">\r\n                        <Grid container spacing={6}>\r\n                            <Grid item xs={3}> 이름 </Grid>\r\n                            <Grid item xs={8}>\r\n                                <TextField value={name} onChange={event => setName(event.target.value)} error={nameError}/>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container className={classes.roleTable}>\r\n                            <Grid item xs={3}>\r\n                                권한\r\n                            </Grid>\r\n                            <Grid item xs={8}>\r\n\r\n                                <Table size=\"small\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">쓰기권한</TableCell>\r\n                                            <TableCell align=\"center\">영역</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={analysis}\r\n                                                    onChange={event => setAnalysis(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                분석\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={index}\r\n                                                    onChange={event => setIndex(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                인덱스\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={search}\r\n                                                    onChange={event => setSearch(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                검색\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\">\r\n                                                <Switch\r\n                                                    color=\"primary\"\r\n                                                    name=\"checkedB\"\r\n                                                    inputProps={{'aria-label': 'primary checkbox'}}\r\n                                                    checked={manage}\r\n                                                    onChange={event => setManage(event.target.checked)}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\">\r\n                                                관리\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12} ml={5} mr={5} mb={5} mt={3}>\r\n                                <Box className={classes.warning}>\r\n                                    * 모든영역에 대한 읽기권한은 기본적으로 존재합니다.\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleRoleEditProcess} color=\"primary\"> 수정 </Button>\r\n                    <Button onClick={toggleEditModal} color=\"primary\"> 취소 </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({...store.roleManagementReducers, ...store.dsearchReducers}))(Role);"],"sourceRoot":""}
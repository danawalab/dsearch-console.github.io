{"version":3,"sources":["pages/indices/collection/ControlBox.js","pages/indices/collection/Source.js"],"names":["Box","styled","MuiBox","spacing","positions","Button","MuiButton","Grid","MuiGrid","options","makeStyles","theme","formControl","minWidth","root","flexGrow","width","edit","typography","padding","timer","connect","store","authUser","dsearchReducers","collectionReducers","dispatch","collection","job","React","useState","actionOpen","setActionOpen","actionAnchorRef","useRef","connected","setConnected","processUI","setProcessUI","errorSnackbar","setErrorSnackbar","errorMessage","setErrorMessage","isRunningJob","useEffect","setCollection","clearTimeout","err","setTimeout","fetchJob","setCollectionJob","then","catch","error","handleClose","event","current","contains","target","handleAction","action","editCollectionAction","response","console","log","container","my","ml","item","xs","mt","style","alignSelf","CircularProgress","m","color","fontWeight","height","Fragment","Switch","onChange","editCollectionScheduleAction","checked","disabled","role","index","display","ButtonGroup","variant","ref","maxWidth","size","onClick","prevOpen","Popper","open","anchorEl","undefined","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","map","option","MenuItem","key","handleMenuItemClick","Alert","iconMapping","success","fontSize","severity","info","border","LinearProgress","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","Typography","MuiTypography","Card","MuiCard","useStyles","NO_SELECTED","jdbcReducers","JdbcList","classes","editModal","setEditModal","mode","setMode","setAnchorEl","setOpen","setPlacement","sourceName","setSourceName","launcherYaml","setLauncherYaml","host","setHost","port","setPort","jdbcId","setJdbcId","cron","setCron","invalid","setInvalid","aceEditor","toggleEditModal","currentTarget","editor","setValue","clearSelection","newPlacement","jdbcHitList","sourceAsMap","name","CardContent","align","mx","Table","TableBody","TableRow","TableCell","component","Link","cursor","filter","jdbcObj","source","invalidCheck","trim","test","length","isValidCron","Object","keys","editCollectionSourceAction","launcher","yaml","getValue","alert","p","TextField","value","fullWidth","tabSize","placeholder","setOptions","useWorker","Select","type","onMouseOver","prev","Boolean","Fade","timeout","className","Dialog","DialogTitle","DialogContent","DialogActions"],"mappings":"+iBA6BMA,EAAMC,YAAOC,IAAPD,CAAeE,IAASC,KAC9BC,EAASJ,YAAOK,IAAPL,CAAkBE,IAASC,KACpCG,EAAON,YAAOO,IAAPP,CAAgBE,IAASC,KAkBhCK,IAhBYC,aAAW,SAACC,GAAD,MAAY,CACrCC,YAAa,CACTC,SAAU,KAEdC,KAAM,CACFC,SAAU,EACVC,MAAO,QAEXC,KAAM,CACFD,MAAO,QAEXE,WAAY,CACRC,QAASR,EAAMR,QAAQ,QAIf,CAAC,2BAAQ,2BAAQ,2BAAQ,6BAGrCiB,GAAQ,KAkTGC,oBAAQ,SAAAC,GAAK,oBAAOC,SAAUD,EAAME,gBAAgBD,UAAaD,EAAMG,sBAAvEJ,EA9Sf,YAA4D,IAAvCK,EAAsC,EAAtCA,SAAUH,EAA4B,EAA5BA,SAAUI,EAAkB,EAAlBA,WAAYC,EAAM,EAANA,IAAM,EACnBC,IAAMC,UAAS,GADI,mBAChDC,EADgD,KACpCC,EADoC,KAEjDC,EAAkBJ,IAAMK,OAAO,MAFkB,EAGrBJ,oBAAS,GAHY,mBAGhDK,EAHgD,KAGrCC,EAHqC,OAIrBN,oBAAS,GAJY,mBAIhDO,EAJgD,KAIrCC,EAJqC,OAKbR,oBAAS,GALI,mBAKhDS,EALgD,KAKjCC,EALiC,OAMfV,mBAAS,IANM,mBAMhDW,EANgD,KAMlCC,EANkC,KASjDC,IAAef,EAAG,OAMxBgB,qBAAU,WACNlB,EAASmB,YAAclB,EAAU,KAyBjC,GAAa,MAATP,GACA,IACI0B,aAAa1B,IACbA,GAAQ,KACV,MAAM2B,IAIZ,OADA3B,GAAQ4B,YAAW,kBA9BF,SAAXC,IACFvB,EAASwB,YAAiBvB,EAAU,KAC/BwB,MAAK,SAAAvB,GAEF,GADAQ,GAAa,GACA,MAAThB,GACA,IACI0B,aAAa1B,IACbA,GAAQ,KACV,MAAM2B,IAEZ3B,GAAQ4B,WAAWC,EA7BpB,QA+BFG,OAAM,SAAAC,GAEH,GADAjB,GAAa,GACA,MAAThB,GACA,IACI0B,aAAa1B,IACbA,GAAQ,KACV,MAAM2B,IAEZ3B,GAAQ4B,WAAWC,EAvCpB,QAiDcA,KAAY,KAC9B,WACH,IACIH,aAAa1B,IACf,MAAMiC,QAKb,IAEH,IAeMC,EAAc,SAACC,GACbtB,EAAgBuB,SAAWvB,EAAgBuB,QAAQC,SAASF,EAAMG,SAGtE1B,GAAc,IAsBlB,SAAS2B,EAAaC,GAClBtB,GAAa,GAEbZ,EAASmC,YAAqBlC,EAAU,GAAQiC,IAC3CT,MAAK,SAAAW,GACFpC,EAASmB,YAAclB,EAAU,KACjCqB,YAAW,WACPV,GAAa,KACd,QAENc,OAAM,SAAAC,GACHU,QAAQC,IAAIX,GACZX,EAAgB,GAAKW,GACrBb,GAAiB,GACjBd,EAASmB,YAAclB,EAAU,KACjCqB,YAAW,WACPV,GAAa,KACd,QAQf,OAAkB,IAAdH,EAEI,kBAAC,EAAD,CAAM8B,WAAS,EAACC,GAAI,EAAGC,GAAI,GACvB,kBAAC,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,MAAO,CAACC,UAAW,WACxC,kBAAC,EAAD,+BAGA,kBAAC,EAAD,KACI,kBAACC,EAAA,EAAD,CAAkBC,EAAG,EAAGC,MAAM,iBAO9CtC,EAEI,kBAAC,EAAD,CAAM4B,WAAS,EAACC,GAAI,EAAGC,GAAI,GACvB,kBAAC,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAMJ,WAAS,EAACC,GAAI,GAChB,kBAAC,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClB,kBAAC,EAAD,CAAKC,MAAO,CAACK,WAAY,SAAzB,uBAEJ,kBAAC,EAAD,CAAMR,MAAI,EAACC,GAAI,KAInB,kBAAC,EAAD,CAAMJ,WAAS,EAACC,GAAI,GAChB,kBAAC,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,MAAO,CAACM,OAAQ,SACrC,4CAEJ,kBAAC,EAAD,CAAMT,MAAI,EAACC,GAAI,MAKvB,kBAAC,EAAD,CAAMD,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,MAAO,CAACC,UAAW,WACxC,kBAAC,EAAD,KACI,kBAACC,EAAA,EAAD,CAAkBC,EAAG,EAAGC,MAAM,iBAQ9C,kBAAC,IAAMG,SAAP,KACI,kBAAC,EAAD,CAAMb,WAAS,EAACC,GAAI,EAAGC,GAAI,GACvB,kBAAC,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClB,kBAAC,EAAD,CAAKC,MAAO,CAACK,WAAY,SAAzB,uBAEJ,kBAAC,EAAD,CAAMR,MAAI,EAACC,GAAI,GACX,kBAACU,EAAA,EAAD,CAAQC,SAhGxB,SAA4BzB,GACxBjB,GAAa,GACbZ,EAASuD,YAA6BtD,EAAU,GAAQ4B,EAAMG,OAAOwB,UAChE/B,MAAK,SAAAW,GACFpC,EAASmB,YAAclB,EAAU,KACjCqB,YAAW,WACPV,GAAa,KACd,QAENc,OAAM,SAAAC,GACHU,QAAQC,IAAIX,GACZX,EAAgB,GAAKW,GACrBb,GAAiB,GACjBd,EAASmB,YAAclB,EAAU,KACjCqB,YAAW,WACPV,GAAa,KACd,SAiFS4C,QAASvD,EAAU,UACnBwD,UAAW5D,EAAS6D,KAAKC,UAKzC,kBAAC,EAAD,CAAMpB,WAAS,EAACC,GAAI,EAAGC,GAAI,GACvB,kBAAC,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,MAAO,CAACM,OAAQ,SACrC,4CAEJ,kBAAC,EAAD,CAAMT,MAAI,EAACC,GAAI,GAEX,kBAAC,EAAD,CAAKE,MAAO,CAACe,SAA0B,IAAjB3C,IAAsD,IAA5BhB,EAAU,UAA0B,QAAU,SAC1F,kBAAC4D,EAAA,EAAD,CAAaC,QAAQ,YAAYb,MAAM,UAAUc,IAAKxD,GAClD,kBAAC,EAAD,CAAQkD,UAAU,EACVZ,MAAO,CAACvD,MAAO,OAAQH,SAAU,QAAS6E,SAAU,QAASf,MAAO,UAD5E,6BAKCpD,EAAS6D,KAAKC,MACX,kBAAC,EAAD,CACIV,MAAM,UACNgB,KAAK,QACLC,QAlIX,WACjB5D,GAAc,SAAC6D,GAAD,OAAeA,MAkIDV,UAAW5D,EAAS6D,KAAKC,OAEzB,kBAAC,IAAD,OAGJ,sCAGR,kBAACS,EAAA,EAAD,CAAQC,KAAMhE,EAAYiE,SAAU/D,EAAgBuB,QAAS4B,UAAMa,EAC3DC,YAAU,EAACC,eAAa,IAC3B,gBAAEC,EAAF,EAAEA,gBAAiBC,EAAnB,EAAmBA,UAAnB,OACG,kBAACC,EAAA,EAAD,iBACQF,EADR,CAEI7B,MAAO,CACHgC,gBAA+B,WAAdF,EAAyB,aAAe,mBAG7D,kBAACG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAmBC,YAAapD,GAC5B,kBAACqD,EAAA,EAAD,CAAUC,GAAG,qBACRnG,GAAQoG,KAAI,SAACC,EAAQzB,GAAT,OACT,kBAAC0B,EAAA,EAAD,CACIC,IAAKF,EACLlB,QAAS,SAACrC,GAAD,OAtKjC,SAACA,EAAOuD,EAAQzB,GACpC,6BAAWyB,EACXnD,EAAa,OACN,6BAAWmD,EAClBnD,EAAa,YACN,6BAAWmD,EAClBnD,EAAa,aACN,6BAAWmD,GAClBnD,EAAa,UAEjB3B,GAAc,GA4JsDiF,CAAoB1D,EAAOuD,KAE9CA,cAUrC,kBAAC,EAAD,CAAKvC,MAAO,CACRe,SAA0B,IAAjB3C,IAAsD,IAA5BhB,EAAU,UAAyB,QAAU,OAChFX,MAAO,OAAQH,SAAU,QAAS6E,SAAU,QAASf,MAAO,UAE5D,kBAACuC,EAAA,EAAD,CAAOC,YAAa,CAAEC,QAAS,kBAAC,IAAD,CAAcC,SAAS,aAC/CC,SAAS,UACT/C,MAAO,CAACe,QAAS3C,EAAe,OAAS,SAFhD,0CAMJ,kBAAC,EAAD,CAAK4B,MAAO,CACRe,SAA2B,IAAjB3C,IAAqD,IAA5BhB,EAAU,YAA8C,IAAjBgB,IAAqD,IAA5BhB,EAAU,UAA0B,QAAU,OACjJX,MAAO,OAAQH,SAAU,QAAS6E,SAAU,QAASf,MAAO,UAE5D,kBAAC,EAAD,CAAKJ,MAAO,CAACe,QAAgC,eAAvB1D,EAAG,aAA2D,kBAAvBA,EAAG,YAAsC,QAAU,SAC5G,kBAACsF,EAAA,EAAD,CAAOC,YAAa,CAAEI,KAAM,kBAAC,IAAD,CAAuBF,SAAS,UAAU9C,MAAO,CAACC,UAAW,aAClF8C,SAAS,OACT1D,OAAQ,kBAAC,EAAD,CAAQe,MAAM,UAAUJ,MAAO,CAACiD,OAAQ,oBAAqB7B,KAAK,QAAQC,QAAS,kBAAMjC,EAAa,mBAAtG,mBAEX,kBAAC8D,EAAA,EAAD,MACA,kBAAC,EAAD,CAAKnD,GAAI,GAAT,2EAMR,kBAAC,EAAD,CAAKC,MAAO,CAACe,QAAgC,cAAvB1D,EAAG,YAAkC,QAAU,SACjE,kBAACsF,EAAA,EAAD,CAAOC,YAAa,CAAEI,KAAM,kBAAC,IAAD,CAAuBF,SAAS,UAAU9C,MAAO,CAACC,UAAW,aAClF8C,SAAS,OACT1D,OAAQ,kBAAC,EAAD,CAAQe,MAAM,UAAUJ,MAAO,CAACiD,OAAQ,oBAAqB7B,KAAK,QAAQC,QAAS,kBAAMjC,EAAa,sBAAtG,mBAEX,kBAAC8D,EAAA,EAAD,MACA,kBAAC,EAAD,CAAKnD,GAAI,GAAT,2EAMR,kBAAC,EAAD,CAAKC,MAAO,CAACe,QAAgC,WAAvB1D,EAAG,YAA+B,QAAU,SAC9D,kBAACsF,EAAA,EAAD,CAAOC,YAAa,CAAEI,KAAM,kBAAC,IAAD,CAAuBF,SAAS,aACrDC,SAAS,QAEZ,kBAACG,EAAA,EAAD,MAHJ,6EAahB,kBAACC,EAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,MAAOC,WAAY,SAC7CC,iBAAkB,IAClB/B,KAAMxD,EACNwF,QA5KZ,WACIvF,GAAiB,IA4KT8E,SAAS,QACTU,QAAS,kEAAkBvF,EAC3BuE,IAAK,sB,qBC5TfiB,I,cAAahI,YAAOiI,IAAPjI,CAAsBE,IAASC,MAC5CJ,GAAMC,YAAOC,IAAPD,CAAeE,IAASC,KAC9B+H,GAAOlI,YAAOmI,IAAPnI,CAAgBE,IAASC,KAChCC,GAASJ,YAAOK,IAAPL,CAAkBE,IAASC,KACpCG,GAAON,YAAOO,IAAPP,CAAgBE,IAASC,KAEhCiI,GAAY3H,aAAW,SAACC,GAAD,MAAY,CACrCC,YAAa,CACTC,SAAU,KAEdC,KAAM,CACFC,SAAU,EACVC,MAAO,QAEXC,KAAM,CACFD,MAAO,QAEXE,WAAY,CACRC,QAASR,EAAMR,QAAQ,QAIzBmI,GAAc,cAsZLjH,uBAAQ,SAAAC,GAAK,gCACxBC,SAAUD,EAAME,gBAAgBD,UAC7BD,EAAMG,oBACNH,EAAMiH,gBAHElH,EArWf,YAA6D,IAA5CK,EAA2C,EAA3CA,SAAUH,EAAiC,EAAjCA,SAAUI,EAAuB,EAAvBA,WAAY6G,EAAW,EAAXA,SACvCC,EAAUJ,KADwC,EAEtBvG,mBAAS,MAFa,mBAEjD4G,EAFiD,KAEtCC,EAFsC,OAGhC7G,mBAAS,QAHuB,mBAGjD8G,EAHiD,KAG3CC,EAH2C,OAIxBhH,IAAMC,SAAS,MAJS,mBAIjDkE,EAJiD,KAIvC8C,EAJuC,OAKhCjH,IAAMC,SAAS,MALiB,mBAKjDiE,EALiD,KAK3CgD,EAL2C,OAMtBlH,IAAMC,WANgB,mBAMjDuE,EANiD,KAMtC2C,EANsC,OAQpBlH,mBAAS,IARW,mBAQjDmH,EARiD,KAQrCC,EARqC,OAShBpH,mBAAS,IATO,mBASjDqH,GATiD,KASnCC,GATmC,QAUhCtH,mBAAS,IAVuB,qBAUjDuH,GAViD,MAU3CC,GAV2C,SAWhCxH,mBAAS,IAXuB,qBAWjDyH,GAXiD,MAW3CC,GAX2C,SAY5B1H,mBAASwG,IAZmB,qBAYjDmB,GAZiD,MAYzCC,GAZyC,SAahC5H,mBAAS,IAbuB,qBAajD6H,GAbiD,MAa3CC,GAb2C,SAe1B9H,mBAAS,IAfiB,qBAejD+H,GAfiD,MAexCC,GAfwC,MAiBlDC,GAAY7H,iBAAO,MAwCzB,SAAS8H,GAAgBzG,GACrBoF,EAA2B,OAAdD,EAAqBnF,EAAM0G,cAAgB,MAvC5DrH,qBAAU,WACNkH,GAAW,SACsB7D,IAA7BtE,EAAU,YAA6D,OAA7BA,EAAU,YAAwD,KAA7BA,EAAU,YAEzFkH,EAAQ,cACRkB,GAAUvG,QAAQ0G,OAAOC,SAvEnB,4hCAyENjB,EAAcvH,EAAU,YACxB2H,IAAS3H,EAAU,UAAc,IAAzB,MAAsC,IAC9C6H,IAAS7H,EAAU,UAAc,IAAzB,MAAsC,IAE9C+H,GAAmC,KAAzB/H,EAAU,OAAoB2G,GAAc3G,EAAU,QAChEiI,GAAQjI,EAAU,MAClByH,IAAiBzH,EAAU,UAAc,IAAzB,MAAsC,IACtDoI,GAAUvG,QAAQ0G,OAAOC,UAAUxI,EAAU,UAAc,IAAzB,MAAsC,IACxEoI,GAAUvG,QAAQ0G,OAAOE,oBAE9B,IAEHxH,qBAAU,WACN,IACiB,SAATgG,IACAM,EAAcvH,EAAU,YACxB2H,IAAS3H,EAAU,UAAc,IAAzB,MAAsC,IAC9C6H,IAAS7H,EAAU,UAAc,IAAzB,MAAsC,IAE9C+H,GAAmC,KAAzB/H,EAAU,OAAoB2G,GAAc3G,EAAU,QAChEiI,GAAQjI,EAAU,MAClByH,IAAiBzH,EAAU,UAAc,IAAzB,MAAsC,IACtDoI,GAAUvG,QAAQ0G,OAAOC,UAAUxI,EAAU,UAAc,IAAzB,MAAsC,IACxEoI,GAAUvG,QAAQ0G,OAAOE,kBAE/B,MAAO/G,GACLU,QAAQC,IAAI,wBAEjB,CAAC4E,IAsDJ,IA/CqByB,GA+CjBC,GAAW,CACX,CAAE1D,GAAI0B,GAAaiC,YAAa,CAACC,KAAM,8BAD5B,oBAENhC,EAAQ,MAAU,IAAnB,MAAgC,KAExC,OACI,kBAAC,IAAM1D,SAAP,KAEI,6BAEA,kBAAC,GAAD,KACI,kBAAC2F,EAAA,EAAD,KACI,kBAAC,GAAD,CAAKlG,MAAO,CAACe,QAAkB,SAATsD,EAAkB,QAAU,SAC9C,kBAAC,GAAD,CAAM3E,WAAS,GACX,kBAAC,GAAD,CAAMG,MAAI,EAACC,GAAI,IAEX,kBAAC,GAAD,OAGJ,kBAAC,GAAD,CAAMD,MAAI,EAACC,GAAI,EAAGqG,MAAO,SACpBnJ,EAAS6D,KAAKC,MAAQ,kBAAC,GAAD,CAAQsF,GAAI,EAAGnF,QAAS,WAAYI,QAAS,kBAAMiD,EAAQ,UAA3D,gBAEX,uCAIpB,kBAAC,GAAD,CAAM5E,WAAS,GACX,kBAAC,GAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAAC,GAAD,KACI,kBAACuG,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,4BACA,kBAACD,EAAA,EAAD,KACI,kBAACE,EAAA,EAAD,CAAM1G,MAAO,CAAC2G,OAAQ,WAChBtF,QAASoE,IADf,UAKR,kBAACc,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,kCACA,kBAACD,EAAA,EAAD,MAAapJ,EAAU,UAAgB,IAA3B,OAEhB,kBAACmJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,4BACA,kBAACD,EAAA,EAAD,KAAuD,KAA1CpJ,EAAU,UAAgB,IAA3B,KAA+C,IAAMA,EAAU,UAAgB,IAA3B,OAEpE,kBAACmJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,QACA,kBAACD,EAAA,EAAD,KAEQT,GAAYa,QAAO,SAAAC,GAAO,OAA8B,KAAzBzJ,EAAU,OAAoB2G,GAAc3G,EAAU,UAAgByJ,EAAO,MACvGvE,KAAI,SAAAuE,GACD,IAAMC,EAASD,EAAO,YACtB,OACI,kBAAC,IAAMtG,SAAP,CAAgBkC,IAAKqE,EAAM,MACtBA,EAAM,WAOnC,kBAACP,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,4BACA,kBAACD,EAAA,EAAD,SAAapJ,EAAU,KAAvB,YAY5B,kBAAC,GAAD,CAAK4C,MAAO,CAACe,QAAkB,SAATsD,GAA4B,eAATA,EAAwB,QAAU,SACvE,kBAAC,GAAD,CAAM3E,WAAS,GACX,kBAAC,GAAD,CAAMG,MAAI,EAACC,GAAI,IAGf,kBAAC,GAAD,CAAMD,MAAI,EAACC,GAAI,EAAGqG,MAAO,SACrB,kBAAC,GAAD,CAAQC,GAAI,EACJnF,QAAS,WACTI,QA7HpC,WACIkE,GAAW,IACX,IAAIwB,EAAe,GAgBnB,GAf0B,KAAtBrC,EAAWsC,SACXD,EAAY,YAAiB,GAEb,KAAhBjC,GAAKkC,QAAkB,gGAAgGC,KAAKnC,MAC5HiC,EAAY,MAAW,GAEd,KAAT/B,KACA+B,EAAY,MAAW,GAET,GAAf3B,GAAK8B,OACJ7B,GAhIS,aAiIF8B,sBAAY/B,MACnB2B,EAAY,MAAW,GAGvBK,OAAOC,KAAKN,GAAcG,OAAS,EAEnC,OADA3B,GAAWwB,IACJ,EAGX5J,EAASmK,YAA2BlK,EAAU,GAAQ,CAClDsH,aACAU,KAAuB,IAAhBA,GAAK8B,OA5IH,YA4IiC9B,GAC1CF,OAASA,KAAWnB,GAAc,GAAKmB,GACvCqC,SAAU,CACNC,KAAMhC,GAAUvG,QAAQ0G,OAAO8B,YAAc,GAC7C3C,QACAE,YAEJpG,MAAK,SAAAW,GACLpC,EAASmB,YAAclB,EAAU,KACjCkH,EAAQ,WACTzF,OAAM,SAAAC,GACLU,QAAQC,IAAIX,GACZ4I,MAAM5I,OAyFsBkB,MAAO,CAACe,QAAS/D,EAAS6D,KAAKC,MAAQ,SAAW,SAH1D,gBAOA,kBAAC,GAAD,CAAQd,MAAO,CAACe,QAAS/D,EAAS6D,KAAKC,OAAiB,SAATuD,EAAkB,SAAoB,QAAS+B,GAAI,EAC1FnF,QAAS,WACTI,QAAS,kBAAMiD,EAAQ,UAF/B,kBAQR,kBAAC,GAAD,CAAM5E,WAAS,GACX,kBAAC,GAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAAC,GAAD,CAAK6H,EAAG,GACJ,kBAACtB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,gBACA,kBAACD,EAAA,EAAD,KACI,kBAACoB,EAAA,EAAD,CAAWC,MAAOnD,EACPjE,SAAU,SAAAzB,GAAK,OAAI2F,EAAc3F,EAAMG,OAAO0I,QAC9CC,WAAS,EACThJ,MAAOwG,GAAO,aAAgB,MAIjD,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,iCACA,kBAACD,EAAA,EAAD,KAKI,kBAAC,KAAD,CACItF,IAAKsE,GACLnB,KAAK,OACLjI,MAAM,SACN0G,SAAS,OACTxC,OAAQ,QACR7D,MAAM,OACNsL,QAAS,EACTC,YAAY,eACZC,WAAY,CAAEC,WAAW,GACzBzH,SAAU,WACN,IAAI+G,EAAOhC,GAAUvG,QAAQ0G,OAAO8B,WAChC7C,KAAiB4C,GACjB3C,GAAgB2C,QAMpC,kBAACjB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,QACA,kBAACD,EAAA,EAAD,KACI,kBAAC2B,EAAA,EAAD,CAAQN,MAAO3C,GACPzE,SAAU,SAAAzB,GAAK,OAAImG,GAAUnG,EAAMG,OAAO0I,QAC1C7H,MAAO,CAAC1D,SAAU,QAClBwC,MAAOwG,GAAO,SAAY,GAG1BS,GAAYzD,KAAI,SAACuE,EAAS/F,GACtB,OACI,kBAAC0B,EAAA,EAAD,CAAUC,IAAK3B,EACL+G,MAAOhB,EAAO,KAElBA,EAAO,aAAiB,IAAzB,MAAsC,UAQnE,kBAACN,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,kCACA,kBAACD,EAAA,EAAD,KACI,kBAACoB,EAAA,EAAD,CAAWC,MAAO/C,GACPrE,SAAU,SAAAzB,GAAK,OAAI+F,GAAQ/F,EAAMG,OAAO0I,QACxCC,WAAS,EACTE,YAAa,YACblJ,MAAOwG,GAAO,OAAU,MAI3C,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,4BACA,kBAACD,EAAA,EAAD,KACI,kBAACoB,EAAA,EAAD,CAAWC,MAAO7C,GACPvE,SAAU,SAAAzB,GAAK,OAAIiG,GAAQjG,EAAMG,OAAO0I,QACxCC,WAAS,EACTE,YAAa,OACbI,KAAM,SACNtJ,MAAOwG,GAAO,OAAU,MAI3C,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWvF,QAAS,OAAQwF,UAAW,MAAvC,4BACA,kBAACD,EAAA,EAAD,KACI,kBAAC,GAAD,CAAM9G,WAAS,GACX,kBAAC,GAAD,CAAMG,MAAI,EAACC,GAAI,IACX,kBAAC8H,EAAA,EAAD,CAAWC,MAAOzC,GACP3E,SAAU,SAAAzB,GAAK,OAAIqG,GAAQrG,EAAMG,OAAO0I,QACxCC,WAAS,EACTE,YAAa,gEACblJ,MAAOwG,GAAO,OAAU,KAGvC,kBAAC,GAAD,CAAMzF,MAAI,EAACC,GAAI,GACX,kBAAC4G,EAAA,EAAD,CAAM2B,aAnPzCvC,GAmPkE,MAnPjD,SAAC9G,GACnCuF,EAAYvF,EAAM0G,eAClBlB,GAAQ,SAAC8D,GAAD,OAAUxG,IAAcgE,KAAiBwC,KACjD7D,EAAaqB,OAgPuC,gBACA,kBAACvE,EAAA,EAAD,CAAQC,KAAM+G,QAAQ/G,GAAOC,SAAUA,EAC/BK,UAAWA,EAAWH,YAAU,IACnC,gBAAEE,EAAF,EAAEA,gBAAF,OACG,kBAAC2G,EAAA,EAAD,iBAAU3G,EAAV,CAA2B4G,QAAS,MAChC,kBAACxG,EAAA,EAAD,KACI,kBAAC,GAAD,CAAYyG,UAAWxE,EAAQvH,YAA/B,eACM,6BADN,wDAE2B,6BAF3B,wDAG2B,6BAH3B,4EAIgC,6BAJhC,wHAMQ,6BANR,8EA0BhE,kBAACgM,EAAA,EAAD,CAAQnH,KAAM+G,QAAQpE,GACd2D,WAAS,EACTtE,QAASiC,IAEb,kBAACmD,EAAA,EAAD,qBAGA,kBAACC,EAAA,EAAD,KACI,8BACMzL,EAAU,UAAgB,IAA3B,OAGT,kBAAC0L,EAAA,EAAD,KACI,kBAAC,GAAD,CAAQzH,QAASoE,IAAjB","file":"static/js/74.bfa70fa3.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    CircularProgress,\r\n    Grid as MuiGrid,\r\n    Grow, LinearProgress,\r\n    MenuItem,\r\n    MenuList,\r\n    Paper,\r\n    Popper, Snackbar,\r\n    Switch,\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {positions, spacing} from \"@material-ui/system\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport {\r\n    editCollectionAction,\r\n    editCollectionScheduleAction,\r\n    setCollection,\r\n    setCollectionJob\r\n} from \"../../../redux/actions/collectionActions\";\r\nimport {connect} from \"react-redux\";\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions);\r\nconst Grid = styled(MuiGrid)(spacing, positions);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    },\r\n    typography: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst options = ['연속실행', '색인실행', '전파실행', '교체실행'];\r\n\r\n// let testScheduleFlag = true\r\nlet timer = null\r\n\r\n\r\nlet pollingDelay = 2000\r\nfunction ControlBox({dispatch, authUser, collection, job}) {\r\n    const [actionOpen, setActionOpen] = React.useState(false);\r\n    const actionAnchorRef = React.useRef(null);\r\n    const [connected, setConnected] = useState(false)\r\n    const [processUI, setProcessUI] = useState(false)\r\n    const [errorSnackbar, setErrorSnackbar] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n\r\n    // job이 있을 경우 데이터가 생김..\r\n    const isRunningJob = job['status'] ? true : false\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setCollection(collection['id']))\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(setCollection(collection['id']))\r\n        \r\n        const fetchJob = () => {\r\n            dispatch(setCollectionJob(collection['id']))\r\n                .then(job => {\r\n                    setConnected(true); \r\n                    if (timer != null) {\r\n                        try {\r\n                            clearTimeout(timer)\r\n                            timer = null\r\n                        } catch(err) {}\r\n                    }\r\n                    timer = setTimeout(fetchJob, pollingDelay)\r\n                })\r\n                .catch(error => {\r\n                    setConnected(false); \r\n                    if (timer != null) {\r\n                        try {\r\n                            clearTimeout(timer)\r\n                            timer = null\r\n                        } catch(err) {}\r\n                    }\r\n                    timer = setTimeout(fetchJob, pollingDelay)\r\n                })\r\n        }\r\n        if (timer != null) {\r\n            try {\r\n                clearTimeout(timer)\r\n                timer = null\r\n            } catch(err) {}\r\n        }\r\n\r\n        timer = setTimeout(() => fetchJob(), 500);\r\n        return () => {\r\n            try {\r\n                clearTimeout(timer)\r\n            } catch(error) {\r\n                // ignore..\r\n            }\r\n        }\r\n\r\n    }, [])\r\n\r\n    const handleMenuItemClick = (event, option, index) => {\r\n        if ('연속실행' === option) {\r\n            handleAction('all')\r\n        } else if ('색인실행' === option) {\r\n            handleAction('indexing')\r\n        } else if ('전파실행' === option) {\r\n            handleAction('propagate')\r\n        } else if ('교체실행' === option) {\r\n            handleAction('expose')\r\n        }\r\n        setActionOpen(false);\r\n    };\r\n    const handleToggle = () => {\r\n        setActionOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event) => {\r\n        if (actionAnchorRef.current && actionAnchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        setActionOpen(false);\r\n    };\r\n\r\n    function handleEditSchedule(event) {\r\n        setProcessUI(true)\r\n        dispatch(editCollectionScheduleAction(collection['id'], event.target.checked))\r\n            .then(response => {\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 2000)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                setErrorMessage(\"\" + error)\r\n                setErrorSnackbar(true)\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 2000)\r\n            })\r\n    }\r\n    function handleAction(action) {\r\n        setProcessUI(true)\r\n        // actions: all, indexing, propagate, expose, stop_propagation, stop_indexing\r\n        dispatch(editCollectionAction(collection['id'], action))\r\n            .then(response => {\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 4000)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                setErrorMessage(\"\" + error)\r\n                setErrorSnackbar(true)\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 4000)\r\n            })\r\n    }\r\n\r\n    function handleErrorSnackbarClose() {\r\n        setErrorSnackbar(false)\r\n    }\r\n\r\n    if (connected === false) {\r\n        return (\r\n            <Grid container my={0} ml={4}>\r\n                <Grid item xs={9} mt={2} style={{alignSelf: \"center\"}}>\r\n                    <Box>\r\n                        연결 중...\r\n                    </Box>\r\n                    <Box>\r\n                        <CircularProgress m={2} color=\"secondary\" />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    if (processUI) {\r\n        return (\r\n            <Grid container my={0} ml={4}>\r\n                <Grid item xs={3} >\r\n                    <Grid container my={3}>\r\n                        <Grid item xs={3} mt={2}>\r\n                            <Box style={{fontWeight: \"bold\"}}>스케쥴</Box>\r\n                        </Grid>\r\n                        <Grid item xs={9}>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container my={3}>\r\n                        <Grid item xs={3} mt={5} style={{height: '37px'}}>\r\n                            <b>상태</b>\r\n                        </Grid>\r\n                        <Grid item xs={9}>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid item xs={9} mt={2} style={{alignSelf: \"center\"}}>\r\n                    <Box>\r\n                        <CircularProgress m={2} color=\"secondary\" />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container my={3} ml={4}>\r\n                <Grid item xs={3} mt={2}>\r\n                    <Box style={{fontWeight: \"bold\"}}>스케쥴</Box>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                    <Switch onChange={handleEditSchedule}\r\n                            checked={collection['scheduled']}\r\n                            disabled={!authUser.role.index}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container my={3} ml={4}>\r\n                <Grid item xs={3} mt={2} style={{height: '40px'}}>\r\n                    <b>상태</b>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                    {/* 컨트롤 가능한 상태 */}\r\n                    <Box style={{display: isRunningJob === false && collection['scheduled'] === false ? \"block\" : \"none\"}}>\r\n                        <ButtonGroup variant=\"contained\" color=\"primary\" ref={actionAnchorRef}>\r\n                            <Button disabled={true}\r\n                                    style={{width: '100%', minWidth: \"150px\", maxWidth: \"300px\", color: \"black\"}}\r\n                            >\r\n                                수동 실행\r\n                            </Button>\r\n                            {authUser.role.index ?\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                    onClick={handleToggle}\r\n                                    disabled={!authUser.role.index}\r\n                                >\r\n                                    <ArrowDropDownIcon/>\r\n                                </Button>\r\n                                :\r\n                                <></>\r\n                            }\r\n                        </ButtonGroup>\r\n                        <Popper open={actionOpen} anchorEl={actionAnchorRef.current} role={undefined}\r\n                                transition disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{\r\n                                        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                                    }}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList id=\"split-button-menu\">\r\n                                                {options.map((option, index) => (\r\n                                                    <MenuItem\r\n                                                        key={option}\r\n                                                        onClick={(event) => handleMenuItemClick(event, option, index)}\r\n                                                    >\r\n                                                        {option}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </Box>\r\n                    <Box style={{\r\n                        display: isRunningJob === false && collection['scheduled'] === true ? \"block\" : \"none\",\r\n                        width: '100%', minWidth: \"150px\", maxWidth: \"400px\", color: \"black\" }}\r\n                    >\r\n                        <Alert iconMapping={{ success: <ScheduleIcon fontSize=\"inherit\" /> }}\r\n                               severity=\"success\"\r\n                               style={{display: isRunningJob ? 'none' : 'flex'}}\r\n                        >스케쥴 대기중</Alert>\r\n                    </Box>\r\n\r\n                    <Box style={{\r\n                        display: (isRunningJob === true && collection['scheduled'] === false) || (isRunningJob === true && collection['scheduled'] === true) ? \"block\" : \"none\",\r\n                        width: '100%', minWidth: \"150px\", maxWidth: \"400px\", color: \"black\" }}\r\n                    >\r\n                        <Box style={{display: job['currentStep'] === 'FULL_INDEX' || job['currentStep'] === 'DYNAMIC_INDEX' ? 'block' : 'none' }}>\r\n                            <Alert iconMapping={{ info: <PlayCircleOutlineIcon fontSize=\"inherit\" style={{alignSelf: \"center\"}}/> }}\r\n                                   severity=\"info\"\r\n                                   action={<Button color=\"inherit\" style={{border: \"1px solid silver\"}} size=\"small\" onClick={() => handleAction('stop_indexing')}> 정지 </Button> }\r\n                            >\r\n                                <LinearProgress/>\r\n                                <Box mt={2}>\r\n                                    색인을 진행하고 있습니다.\r\n                                </Box>\r\n                            </Alert>\r\n                        </Box>\r\n\r\n                        <Box style={{display: job['currentStep'] === 'PROPAGATE' ? 'block' : 'none' }}>\r\n                            <Alert iconMapping={{ info: <PlayCircleOutlineIcon fontSize=\"inherit\" style={{alignSelf: \"center\"}}/> }}\r\n                                   severity=\"info\"\r\n                                   action={<Button color=\"inherit\" style={{border: \"1px solid silver\"}} size=\"small\" onClick={() => handleAction('stop_propagation')}> 취소 </Button> }\r\n                            >\r\n                                <LinearProgress />\r\n                                <Box mt={2}>\r\n                                    전파를 진행하고 있습니다.\r\n                                </Box>\r\n                            </Alert>\r\n                        </Box>\r\n\r\n                        <Box style={{display: job['currentStep'] === 'EXPOSE' ? 'block' : 'none' }}>\r\n                            <Alert iconMapping={{ info: <PlayCircleOutlineIcon fontSize=\"inherit\" /> }}\r\n                                   severity=\"info\"\r\n                            >\r\n                                <LinearProgress />\r\n                                교체를 진행하고 있습니다.\r\n                            </Alert>\r\n                        </Box>\r\n\r\n                    </Box>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right'}}\r\n                autoHideDuration={6000}\r\n                open={errorSnackbar}\r\n                onClose={handleErrorSnackbarClose}\r\n                severity=\"error\"\r\n                message={\"요청이 실패되었습니다. \" + errorMessage}\r\n                key={\"errorSnackbar\"}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ authUser: store.dsearchReducers.authUser, ...store.collectionReducers }))(ControlBox);\r\n","import React, {useEffect, useState, useRef} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Fade,\r\n    Grid as MuiGrid,\r\n    Link,\r\n    MenuItem,\r\n    Paper,\r\n    Popper,\r\n    Select,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    TextareaAutosize,\r\n    TextField,\r\n    Typography as MuiTypography,\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {positions, spacing} from \"@material-ui/system\";\r\nimport {connect} from \"react-redux\";\r\nimport {editCollectionSourceAction, setCollection} from \"../../../redux/actions/collectionActions\";\r\nimport {isValidCron} from 'cron-validator'\r\nimport ControlBox from \"./ControlBox\";\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-yaml\";\r\nimport \"ace-builds/src-noconflict/theme-kuroir\";\r\n\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Card = styled(MuiCard)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions);\r\nconst Grid = styled(MuiGrid)(spacing, positions);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    },\r\n    typography: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst NO_SELECTED = 'NO_SELECTED';\r\nconst DEFAULT_CRON = '0 0 * * *'\r\nconst DEFAULT_YAML = `\r\n============================= ndjson / csv template\r\nscheme: http\r\nhost: localhost\r\nport: 9200\r\ntype: ndjson /csv\r\npath: /data/source/search-prod.ndjson   or   /data/source/search-prod.csv\r\nencoding: utf-8\r\nbulkSize: 10000\r\nreset: false\r\nthreadSize: 1\r\n\r\n============================= rsync template\r\nscheme: http\r\nhost: localhost\r\nport: 9200\r\ntype: procedure\r\nbulkSize: 1000\r\ndriverClassName: \"Altibase.jdbc.driver.AltibaseDriver\"\r\nfilterClass: \"com.danawa.fastcatx.indexer.filter.DanawaProductFilter\"\r\nurl: \"jdbc:Altibase://localhost:20200/DANAWA_ALTI\"\r\nuser: \"root\"\r\npassword: \"qwerty123456\"\r\nprocedureName: \"procedureName1\"\r\ndumpFormat: \"konan\"\r\ngroupSeq: 1\r\nbwlimit: \"10240\"\r\npath: \"/data/product/VM\"\r\nrsyncIp: \"remote server IP\"\r\nrsyncPath: \"search_data_alti\"\r\nencoding: CP949\r\nprocedureSkip: true\r\nrsyncSkip: true\r\nthreadSize: 1\r\n\r\n============================= DB template\r\nscheme: http\r\nhost: localhost\r\nport: 9200\r\nbulkSize: 10000\r\nfetchSize: 10000\r\ntype: jdbc\r\npipeLine: \"pipeline\"\r\nthreadSize: 1\r\ndataSQL : \"SELECT * FROM myTable\"\r\n`;\r\n\r\nfunction Source({dispatch, authUser, collection, JdbcList}) {\r\n    const classes = useStyles();\r\n    const [editModal, setEditModal] = useState(null)\r\n    const [mode, setMode] = useState(\"VIEW\")\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [open, setOpen] = React.useState(null);\r\n    const [placement, setPlacement] = React.useState();\r\n\r\n    const [sourceName, setSourceName] = useState(\"\")\r\n    const [launcherYaml, setLauncherYaml] = useState(\"\")\r\n    const [host, setHost] = useState(\"\")\r\n    const [port, setPort] = useState(\"\")\r\n    const [jdbcId, setJdbcId] = useState(NO_SELECTED)\r\n    const [cron, setCron] = useState(\"\")\r\n\r\n    const [invalid, setInvalid] = useState({})\r\n\r\n    const aceEditor = useRef(null)\r\n\r\n    useEffect(() => {\r\n        setInvalid({})\r\n        if (collection['sourceName'] === undefined || collection['sourceName'] === null || collection['sourceName'] === \"\") {\r\n            /* FORCE_EDIT(생성하고 아무런 데이터가 없을 때) 모드일때만 */\r\n            setMode(\"FORCE_EDIT\");\r\n            aceEditor.current.editor.setValue(DEFAULT_YAML)\r\n        } else {\r\n            setSourceName(collection['sourceName']);\r\n            setHost((collection['launcher']||{})['host']||\"\");\r\n            setPort((collection['launcher']||{})['port']||\"\");\r\n            // setJdbcId(collection['jdbcId']);\r\n            setJdbcId(collection['jdbcId'] === '' ? NO_SELECTED : collection['jdbcId'])\r\n            setCron(collection['cron']);\r\n            setLauncherYaml((collection['launcher']||{})['yaml']||\"\");\r\n            aceEditor.current.editor.setValue((collection['launcher']||{})['yaml']||\"\")\r\n            aceEditor.current.editor.clearSelection()\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (mode === \"EDIT\") {\r\n                setSourceName(collection['sourceName']);\r\n                setHost((collection['launcher']||{})['host']||\"\");\r\n                setPort((collection['launcher']||{})['port']||\"\");\r\n                // setJdbcId(collection['jdbcId']);\r\n                setJdbcId(collection['jdbcId'] === '' ? NO_SELECTED : collection['jdbcId'])\r\n                setCron(collection['cron']);\r\n                setLauncherYaml((collection['launcher']||{})['yaml']||\"\");\r\n                aceEditor.current.editor.setValue((collection['launcher']||{})['yaml']||\"\")\r\n                aceEditor.current.editor.clearSelection()\r\n            }\r\n        } catch (error) {\r\n            console.log('change ace editor')\r\n        }\r\n    }, [mode])\r\n\r\n\r\n    function toggleEditModal(event) {\r\n        setEditModal(editModal === null ? event.currentTarget : null)\r\n    }\r\n\r\n    const handleClick = (newPlacement) => (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n        setOpen((prev) => placement !== newPlacement || !prev);\r\n        setPlacement(newPlacement);\r\n    }\r\n\r\n    function handleSaveProcess() {\r\n        setInvalid({})\r\n        let invalidCheck = {}\r\n        if (sourceName.trim() === \"\") {\r\n            invalidCheck['sourceName'] = true\r\n        }\r\n        if (host.trim() === \"\" || !/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/gi.test(host)) {\r\n            invalidCheck['host'] = true\r\n        }\r\n        if (port === \"\") {\r\n            invalidCheck['port'] = true\r\n        }\r\n        if(cron.length == 0){\r\n            setCron(DEFAULT_CRON)\r\n        }else if (!isValidCron(cron)) {\r\n            invalidCheck['cron'] = true\r\n        }\r\n\r\n        if (Object.keys(invalidCheck).length > 0) {\r\n            setInvalid(invalidCheck)\r\n            return false\r\n        }\r\n        \r\n        dispatch(editCollectionSourceAction(collection['id'], {\r\n            sourceName,\r\n            cron: (cron.length === 0 ? DEFAULT_CRON : cron),\r\n            jdbcId: (jdbcId === NO_SELECTED ? '' : jdbcId),\r\n            launcher: {\r\n                yaml: aceEditor.current.editor.getValue() || '',\r\n                host,\r\n                port,\r\n            }\r\n        })).then(response => {\r\n            dispatch(setCollection(collection['id']))\r\n            setMode(\"VIEW\")\r\n        }).catch(error => {\r\n            console.log(error)\r\n            alert(error)\r\n        })\r\n    }\r\n\r\n    let jdbcHitList = [\r\n        { id: NO_SELECTED, sourceAsMap: {name: '선택안함'} },\r\n        ...((JdbcList['hits']||{})['hits']||[])\r\n    ]\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <br/>\r\n\r\n            <Card>\r\n                <CardContent>\r\n                    <Box style={{display: mode === \"VIEW\" ? \"block\" : \"none\"}}>\r\n                        <Grid container>\r\n                            <Grid item xs={10}>\r\n\r\n                                <ControlBox />\r\n\r\n                            </Grid>\r\n                            <Grid item xs={2} align={\"right\"}>\r\n                                {authUser.role.index ? <Button mx={1} variant={\"outlined\"} onClick={() => setMode(\"EDIT\")}>\r\n                                    수정\r\n                                </Button> : <></>}\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Box>\r\n                                    <Table>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>파라미터</TableCell>\r\n                                                <TableCell>\r\n                                                    <Link style={{cursor: \"pointer\"}}\r\n                                                          onClick={toggleEditModal}\r\n                                                    >YAML</Link>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>실행호스트</TableCell>\r\n                                                <TableCell>{(collection['launcher'] || {})['host']}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>실행포트</TableCell>\r\n                                                <TableCell>{(collection['launcher'] || {})['port'] === 0 ? \"\" : (collection['launcher'] || {})['port']}</TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>JDBC</TableCell>\r\n                                                <TableCell>\r\n                                                    {\r\n                                                        jdbcHitList.filter(jdbcObj => (collection['jdbcId'] === '' ? NO_SELECTED : collection['jdbcId']) === jdbcObj['id'])\r\n                                                            .map(jdbcObj => {\r\n                                                                const source = jdbcObj['sourceAsMap']\r\n                                                                return (\r\n                                                                    <React.Fragment key={source['name']}>\r\n                                                                        {source['name']}\r\n                                                                    </React.Fragment>\r\n                                                                )\r\n                                                            })\r\n                                                    }\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>크론주기</TableCell>\r\n                                                <TableCell> {collection['cron']} </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n\r\n\r\n                    {/*======================================= EDIT MODE  ===========================================*/}\r\n\r\n                    <Box style={{display: mode === \"EDIT\" || mode === \"FORCE_EDIT\" ? \"block\" : \"none\"}}>\r\n                        <Grid container>\r\n                            <Grid item xs={8}>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={4} align={\"right\"}>\r\n                                <Button mx={1}\r\n                                        variant={\"outlined\"}\r\n                                        onClick={handleSaveProcess}\r\n                                        style={{display: authUser.role.index ? 'inline' : 'none'}}\r\n                                >\r\n                                    저장\r\n                                </Button>\r\n                                <Button style={{display: authUser.role.index ? mode === 'EDIT' ? \"inline\" : \"none\" : \"none\"}} mx={1}\r\n                                        variant={\"outlined\"}\r\n                                        onClick={() => setMode(\"VIEW\")}\r\n                                >\r\n                                    취소\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Box p={5}>\r\n                                    <Table>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>이름</TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField value={sourceName}\r\n                                                               onChange={event => setSourceName(event.target.value)}\r\n                                                               fullWidth\r\n                                                               error={invalid['sourceName']||false}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>파라미터 YAML</TableCell>\r\n                                                <TableCell>\r\n                                                    {/*<TextareaAutosize value={launcherYaml}*/}\r\n                                                    {/*                  onChange={event => setLauncherYaml(event.target.value)}*/}\r\n                                                    {/*                  style={{width: \"100%\", minHeight: \"200px\"}}*/}\r\n                                                    {/*/>*/}\r\n                                                    <AceEditor\r\n                                                        ref={aceEditor}\r\n                                                        mode=\"yaml\"\r\n                                                        theme=\"kuroir\"\r\n                                                        fontSize=\"15px\"\r\n                                                        height={\"400px\"}\r\n                                                        width=\"100%\"\r\n                                                        tabSize={2}\r\n                                                        placeholder=\"type: 'jdbc'\"\r\n                                                        setOptions={{ useWorker: false }}\r\n                                                        onChange={() => {\r\n                                                            let yaml = aceEditor.current.editor.getValue()\r\n                                                            if (launcherYaml !== yaml) {\r\n                                                                setLauncherYaml(yaml)\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>JDBC</TableCell>\r\n                                                <TableCell>\r\n                                                    <Select value={jdbcId}\r\n                                                            onChange={event => setJdbcId(event.target.value)}\r\n                                                            style={{minWidth: \"100%\"}}\r\n                                                            error={invalid['jdbcId']||false}\r\n                                                    >\r\n                                                        {\r\n                                                            jdbcHitList.map((jdbcObj, index) => {\r\n                                                                return (\r\n                                                                    <MenuItem key={index}\r\n                                                                              value={jdbcObj['id']}\r\n                                                                    >\r\n                                                                        {(jdbcObj['sourceAsMap']||{})['name']||\"\"}\r\n                                                                    </MenuItem>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </Select>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>실행호스트</TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField value={host}\r\n                                                               onChange={event => setHost(event.target.value)}\r\n                                                               fullWidth\r\n                                                               placeholder={\"127.0.0.1\"}\r\n                                                               error={invalid['host']||false}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>실행포트</TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField value={port}\r\n                                                               onChange={event => setPort(event.target.value)}\r\n                                                               fullWidth\r\n                                                               placeholder={\"5005\"}\r\n                                                               type={\"number\"}\r\n                                                               error={invalid['port']||false}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>크론주기</TableCell>\r\n                                                <TableCell>\r\n                                                    <Grid container>\r\n                                                        <Grid item xs={11}>\r\n                                                            <TextField value={cron}\r\n                                                                       onChange={event => setCron(event.target.value)}\r\n                                                                       fullWidth\r\n                                                                       placeholder={\"분 시 일 월 요일 (default: 0 0 * * *)\"}\r\n                                                                       error={invalid['cron']||false}\r\n                                                            />\r\n                                                        </Grid>\r\n                                                        <Grid item xs={1}>\r\n                                                            <Link onMouseOver={handleClick('top')}>예제</Link>\r\n                                                            <Popper open={Boolean(open)} anchorEl={anchorEl}\r\n                                                                    placement={placement} transition>\r\n                                                                {({TransitionProps}) => (\r\n                                                                    <Fade {...TransitionProps} timeout={350}>\r\n                                                                        <Paper>\r\n                                                                            <Typography className={classes.typography}>\r\n                                                                                예제<br/>\r\n                                                                                */1 * * * * : 1분마다 한 번씩<br/>\r\n                                                                                */5 * * * * : 5분마다 한 번씩<br/>\r\n                                                                                0 5 1 * * : 매달 1일 새벽 5시에 실행.<br/>\r\n                                                                                0 5,11 * * 0,3 : 매주 일요일과 수요일 새벽 5시와 밤\r\n                                                                                11시.<br/>\r\n                                                                                0 5,11 * * * : 새벽 5시와 밤 11시\r\n                                                                            </Typography>\r\n                                                                        </Paper>\r\n                                                                    </Fade>\r\n                                                                )}\r\n                                                            </Popper>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog open={Boolean(editModal)}\r\n                    fullWidth\r\n                    onClose={toggleEditModal}\r\n            >\r\n                <DialogTitle>\r\n                    설정\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <pre>\r\n                        {(collection['launcher'] || {})['yaml']}\r\n                    </pre>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={toggleEditModal}>닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    ...store.collectionReducers,\r\n    ...store.jdbcReducers\r\n}))(Source);\r\n"],"sourceRoot":""}
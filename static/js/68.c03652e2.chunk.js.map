{"version":3,"sources":["redux/actions/userManagementActions.js","pages/userManagement/index.js","redux/actions/roleManagementActions.js"],"names":["client","Client","setUserListAction","dispatch","call","uri","then","response","type","SET_USER_LIST","payload","data","catch","err","console","error","Card","styled","MuiCard","spacing","Divider","MuiDivider","useStyles","makeStyles","table","minWidth","roleTable","marginTop","warning","color","red","StyledTableCell","withStyles","theme","body","fontSize","TableCell","StyledTableRow","root","backgroundColor","palette","background","default","TableRow","TextFieldSpacing","MuiFormControl","MuiTextField","TextField","Select","MuiSelect","StyledMenu","paper","border","props","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","primary","main","common","white","MenuItem","connect","store","userManagementReducers","roleManagementReducers","dsearchReducers","userList","userRolesList","roleList","authUser","classes","useTheme","fullScreen","useMediaQuery","breakpoints","down","useState","openDropDown","setOpenDropDown","openUserAddModal","setOpenUserAddModal","showPassword","setShowPassword","email","setEmail","emailError","setEmailError","username","setUsername","usernameError","setUsernameError","roleId","setRoleId","roleIdError","setRoleIdError","selectedUserId","setSelectedUserId","openUserEditModal","setOpenUserEditModal","toggleDropDownButton","event","currentTarget","toggleUserAddModal","setRoleListAction","toggleUserEditModal","user","find","userRoles","useEffect","isManager","Fragment","title","Typography","variant","gutterBottom","display","my","Grid","container","alignItems","justify","item","xs","CardContent","align","style","Button","aria-controls","aria-haspopup","onClick","ArrowDropDown","id","anchorEl","keepMounted","open","Boolean","onClose","ListItemIcon","ListItemText","disabled","method","log","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableBody","map","roleName","role","key","scope","Checkbox","checked","onChange","Dialog","fullWidth","DialogTitle","DialogContent","Box","mt","value","target","DialogActions","test","SET_USER","alert","size","params","action","SET_ROLE_LIST","addRoleAction","SET_ROLE","editRoleAction","removeRoleAction"],"mappings":"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","file":"static/js/68.c03652e2.chunk.js","sourcesContent":["import {SET_API_MANAGEMENT, SET_USER, SET_USER_LIST} from \"../constants\";\r\nimport Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const setUserListAction = () => dispatch => client.call({\r\n    uri: `/users`\r\n}).then(response => dispatch({type: SET_USER_LIST, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\n\r\nexport const addUserAction = user => dispatch => client.call({\r\n    uri: `/users`,\r\n    method: \"POST\",\r\n    data: user,\r\n}).then(response => {\r\n    dispatch({type: SET_USER, payload: response.data})\r\n    return response\r\n})\r\n    .catch(error => console.error(error))\r\n\r\nexport const resetPasswordAction = id => dispatch => client.call({\r\n    uri: `/users/${id}`,\r\n    method: \"PUT\",\r\n    params: {\r\n        action: \"RESET_PASSWORD\"\r\n    },\r\n    data: {}\r\n}).then(response => {\r\n    dispatch({type: SET_USER, payload: response.data})\r\n    return response\r\n})\r\n\r\nexport const setUserEditAction = (id, user) => dispatch => client.call({\r\n    uri: `/users/${id}`,\r\n    method: \"PUT\",\r\n    params: {\r\n        action: \"EDIT_PROFILE\"\r\n    },\r\n    data: user\r\n}).then(response => {\r\n    dispatch({type: SET_USER, payload: response.data})\r\n})\r\n\r\nexport const removeUserAction = (id) => dispatch => client.call({\r\n    uri: `/users/${id}`,\r\n    method: \"DELETE\"\r\n}).then(response => {\r\n    console.log(response)\r\n})","import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {makeStyles, useTheme, withStyles} from '@material-ui/core/styles';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider as MuiDivider,\r\n    FormControl as MuiFormControl, FormControlLabel,\r\n    Grid,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Menu,\r\n    MenuItem,\r\n    Paper,\r\n    Select as MuiSelect,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField as MuiTextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {ArrowDropDown} from \"@material-ui/icons\";\r\nimport {\r\n    addUserAction, removeUserAction,\r\n    resetPasswordAction,\r\n    setUserEditAction,\r\n    setUserListAction\r\n} from \"../../redux/actions/userManagementActions\";\r\nimport red from \"@material-ui/core/colors/red\";\r\nimport roleManagementReducers from \"../../redux/reducers/roleManagementReducers\";\r\nimport {setRoleListAction} from \"../../redux/actions/roleManagementActions\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 600,\r\n    },\r\n    roleTable: {\r\n        marginTop: \"30px\",\r\n        minWidth: 300\r\n    },\r\n    warning: {\r\n        color: red[500],\r\n        marginTop: \"30px\"\r\n    }\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.background.default,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\nconst FormControl = styled(MuiFormControl)(spacing);\r\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\r\n\r\nconst TextField = styled(TextFieldSpacing)`\r\n  width: 100%;\r\n`;\r\n\r\nconst Select = styled(MuiSelect)(spacing);\r\n\r\nconst StyledMenu = withStyles({\r\n    paper: {\r\n        border: '1px solid #d3d4d5',\r\n    },\r\n})((props) => (\r\n    <Menu\r\n        elevation={0}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'top',\r\n            horizontal: 'center',\r\n        }}\r\n        {...props}\r\n    />\r\n));\r\n\r\nconst StyledMenuItem = withStyles((theme) => ({\r\n    root: {\r\n        '&:focus': {\r\n            backgroundColor: theme.palette.primary.main,\r\n            '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\r\n                color: theme.palette.common.white,\r\n            },\r\n        },\r\n    },\r\n}))(MenuItem);\r\n\r\nfunction UserManagement({dispatch, userList, userRolesList, roleList, authUser}) {\r\n    const classes = useStyles()\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\r\n    const [openDropDown, setOpenDropDown] = useState(null);\r\n\r\n    const [openUserAddModal, setOpenUserAddModal] = useState(null);\r\n    const [showPassword, setShowPassword] = useState(null)\r\n\r\n    const [email, setEmail] = useState(\"\")\r\n    const [emailError, setEmailError] = useState(false)\r\n    const [username, setUsername] = useState(\"\")\r\n    const [usernameError, setUsernameError] = useState(false)\r\n    const [roleId, setRoleId] = useState(\"\")\r\n    const [roleIdError, setRoleIdError] = useState(false)\r\n\r\n    const [selectedUserId, setSelectedUserId] = useState(\"\")\r\n    const [openUserEditModal, setOpenUserEditModal] = useState(null);\r\n\r\n    useEffect(() => {\r\n        dispatch(setRoleListAction())\r\n        dispatch(setUserListAction())\r\n    }, [])\r\n\r\n    function toggleDropDownButton(event) {\r\n        if (openDropDown === null) {\r\n            setOpenDropDown(event.currentTarget);\r\n        } else {\r\n            setOpenDropDown(null);\r\n        }\r\n    }\r\n\r\n    function toggleUserAddModal(event) {\r\n        if (openUserAddModal === null) {\r\n            setShowPassword(null)\r\n            setEmail(\"\")\r\n            setUsername(\"\")\r\n            setRoleId(\"\")\r\n            setOpenUserAddModal(event.currentTarget);\r\n        } else {\r\n            dispatch(setRoleListAction())\r\n            dispatch(setUserListAction())\r\n            setOpenDropDown(null);\r\n            setOpenUserAddModal(null);\r\n        }\r\n    }\r\n\r\n    function toggleUserEditModal(event) {\r\n        setShowPassword(null)\r\n        if (openUserEditModal === null) {\r\n            const user = userList.find(user => user['id'] === selectedUserId)\r\n            const userRoles = userRolesList.find(userRoles => userRoles['userId'] === selectedUserId)\r\n            setEmail(user['email'])\r\n            setUsername(user['username'])\r\n            setRoleId(userRoles['roleId'])\r\n            setOpenUserEditModal(event.currentTarget);\r\n        } else {\r\n            dispatch(setRoleListAction())\r\n            dispatch(setUserListAction())\r\n            setOpenDropDown(null);\r\n            setOpenUserEditModal(null);\r\n        }\r\n    }\r\n\r\n    function handleUserAddProcess() {\r\n        setEmailError(false)\r\n        setUsernameError(false)\r\n        setRoleIdError(false)\r\n\r\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        if (email === \"\" || !re.test(email)) {\r\n            setEmailError(true)\r\n            return false\r\n        }\r\n        if (username === \"\") {\r\n            setUsernameError(true)\r\n            return false\r\n        }\r\n        if (roleId === \"\") {\r\n            setRoleIdError(true)\r\n            return false\r\n        }\r\n        dispatch(addUserAction({ email, username, roleId})).then(response => {\r\n            setShowPassword(response.data['password'])\r\n        }).catch(error => {\r\n            console.log(error)\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n\r\n    function resetPassword() {\r\n        dispatch(resetPasswordAction(selectedUserId))\r\n            .then(response => {\r\n                setShowPassword(response.data['password'])\r\n            }).catch(error => {\r\n            alert(\"실패\")\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    function handleUserEditProcess() {\r\n        dispatch(setUserEditAction(selectedUserId, {\r\n            email, username, roleId\r\n        }))\r\n            .then(() => {\r\n                toggleUserEditModal()\r\n            }).catch(error => {\r\n            alert(\"실패\")\r\n            console.log(error)\r\n        })\r\n    }\r\n\r\n    function handleRemoveUserProcess() {\r\n        dispatch(removeUserAction(selectedUserId))\r\n            .then(response => {\r\n                setSelectedUserId(\"\")\r\n                setOpenDropDown(null);\r\n                dispatch(setRoleListAction())\r\n                dispatch(setUserListAction())\r\n            })\r\n    }\r\n\r\n    const isManager = authUser['role']['manage']\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"사용자\"/>\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                사용자\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <Grid container spacing={6} alignItems=\"center\" justify=\"center\">\r\n                <Grid item xs={12}>\r\n                    <Card>\r\n                        <CardContent>\r\n                            <div align={\"right\"} style={{display: isManager ? 'block' : 'none'}}>\r\n                                <Button\r\n                                    aria-controls=\"customized-menu\"\r\n                                    aria-haspopup=\"true\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={toggleDropDownButton}\r\n                                >\r\n                                    작업\r\n                                    <ArrowDropDown />\r\n                                </Button>\r\n\r\n                                <StyledMenu\r\n                                    id=\"customized-menu\"\r\n                                    anchorEl={openDropDown}\r\n                                    keepMounted\r\n                                    open={Boolean(openDropDown)}\r\n                                    onClose={toggleDropDownButton}\r\n                                >\r\n                                    <StyledMenuItem onClick={toggleUserAddModal}>\r\n                                        <ListItemIcon>\r\n                                            <InboxIcon fontSize=\"small\" />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"추가\" />\r\n                                    </StyledMenuItem>\r\n                                    <StyledMenuItem onClick={toggleUserEditModal}\r\n                                                    disabled={selectedUserId === \"\"}>\r\n                                        <ListItemIcon>\r\n                                            <SendIcon fontSize=\"small\" />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"수정\" />\r\n                                    </StyledMenuItem>\r\n                                    <StyledMenuItem onClick={handleRemoveUserProcess}\r\n                                                    disabled={selectedUserId === \"\"}>\r\n                                        <ListItemIcon>\r\n                                            <DraftsIcon fontSize=\"small\" />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"삭제\" />\r\n                                    </StyledMenuItem>\r\n                                </StyledMenu>\r\n                            </div>\r\n\r\n                            <TableContainer component={Paper}>\r\n                                <Table className={classes.table} aria-label=\"customized table\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            {\r\n                                                isManager ?\r\n                                                    <StyledTableCell align=\"center\">#</StyledTableCell>\r\n                                                    :\r\n                                                    null\r\n                                            }\r\n                                            <StyledTableCell>이메일</StyledTableCell>\r\n                                            <StyledTableCell>이름</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">역할</StyledTableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {userList.map((user) => {\r\n                                            const userRoles = userRolesList.find(userRoles => userRoles['userId'] === user['id']);\r\n                                            let roleName = \"\";\r\n                                            if (userRoles) {\r\n                                                roleName = roleList.find(role => role['id'] === userRoles['roleId'])['name'] || \"\"\r\n                                            }\r\n                                            return (\r\n                                                <StyledTableRow key={user['email']}>\r\n                                                    {\r\n                                                        isManager ?\r\n                                                            <StyledTableCell component=\"th\"\r\n                                                                             scope=\"row\"\r\n                                                                             align=\"center\"\r\n                                                            >\r\n                                                                <Checkbox color=\"primary\"\r\n                                                                          checked={selectedUserId === user['id']}\r\n                                                                          onChange={() => selectedUserId === user['id'] ? setSelectedUserId(\"\") : setSelectedUserId(user['id'])}\r\n                                                                />\r\n                                                            </StyledTableCell>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    <StyledTableCell>{user['email']}</StyledTableCell>\r\n                                                    <StyledTableCell>{user['username']}</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">{roleName}</StyledTableCell>\r\n                                                </StyledTableRow>\r\n                                            )\r\n                                        })}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Dialog open={Boolean(openUserAddModal)}\r\n                    fullScreen={fullScreen}\r\n                    onClose={toggleUserAddModal}\r\n                    fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">사용자 추가</DialogTitle>\r\n                <DialogContent>\r\n                    <Box display={showPassword ? \"none\" : \"block\"}>\r\n                        <Grid container>\r\n                            <Grid item xs={4}>\r\n                                <Box mt={2}>이메일</Box>\r\n                            </Grid>\r\n                            <Grid item xs={7}>\r\n                                <TextField value={email}\r\n                                           onChange={event => setEmail(event.target.value)}\r\n                                           error={emailError}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <br/>\r\n                        <Grid container>\r\n                            <Grid item xs={4}>\r\n                                <Box mt={2}>이름</Box>\r\n                            </Grid>\r\n                            <Grid item xs={7}>\r\n                                <TextField value={username}\r\n                                           onChange={event => setUsername(event.target.value)}\r\n                                           error={usernameError}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <br/>\r\n                        <Grid container>\r\n                            <Grid item xs={4}>\r\n                                <Box mt={2}>역할</Box>\r\n                            </Grid>\r\n                            <Grid item xs={7}>\r\n                                <Select value={roleId}\r\n                                        onChange={event => setRoleId(event.target.value)}\r\n                                        error={roleIdError}\r\n                                        style={{minWidth: \"120px\"}}\r\n                                >\r\n                                    { roleList.map(role => <MenuItem key={role['name']} value={role['id']}>{role['name']}</MenuItem>) }\r\n                                </Select>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                    <Box display={showPassword ? \"block\" : \"none\" } align={\"center\"}>\r\n                        임시 비밀번호\r\n                        <Divider my={2} />\r\n                        {showPassword}\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Box display={showPassword ? \"none\" : \"block\" }>\r\n                        <Button onClick={handleUserAddProcess}>\r\n                            추가\r\n                        </Button>\r\n                        <Button onClick={toggleUserAddModal}>\r\n                            취소\r\n                        </Button>\r\n                    </Box>\r\n                    <Box display={showPassword ? \"block\" : \"none\" }>\r\n                        <Button onClick={toggleUserAddModal}>\r\n                            확인\r\n                        </Button>\r\n                    </Box>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n            {/*    수정       */}\r\n            <Dialog open={Boolean(openUserEditModal)}\r\n                    fullScreen={fullScreen}\r\n                    onClose={toggleUserEditModal}\r\n                    fullWidth={true}\r\n            >\r\n                <DialogTitle id=\"form-dialog-title\">사용자 수정</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box mt={2}>이메일</Box>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <TextField value={email} disabled/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br/>\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box mt={2}>이름</Box>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <TextField value={username}\r\n                                       onChange={event => setUsername(event.target.value)}\r\n                                       error={usernameError}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br/>\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box mt={2}>역할</Box>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <Select value={roleId}\r\n                                    onChange={event => setRoleId(event.target.value)}\r\n                                    error={roleIdError}\r\n                                    style={{minWidth: \"120px\"}}\r\n                            >\r\n                                { roleList.map(role => <MenuItem key={role['name']} value={role['id']}>{role['name']}</MenuItem>) }\r\n                            </Select>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br/>\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box mt={2}>비밀번호</Box>\r\n                        </Grid>\r\n                        <Grid item xs={7}>\r\n                            <Box display={showPassword ? \"none\" : \"block\"}>\r\n                                <Button variant={\"contained\"}\r\n                                        style={{backgroundColor: red[\"400\"]}}\r\n                                        size={\"small\"}\r\n                                        onClick={resetPassword}\r\n                                >초기화</Button>\r\n                            </Box>\r\n                            <Box display={showPassword ? \"block\" : \"none\"} mt={2}>\r\n                                {showPassword}\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleUserEditProcess}>\r\n                        저장\r\n                    </Button>\r\n                    <Button onClick={toggleUserEditModal}>\r\n                        취소\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({...store.userManagementReducers, ...store.roleManagementReducers, ...store.dsearchReducers}))(UserManagement);\r\n","import {SET_API_MANAGEMENT, SET_ROLE, SET_ROLE_LIST} from \"../constants\";\r\nimport Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const setRoleListAction = () => dispatch => client.call({\r\n    uri: `/roles`\r\n}).then(response => dispatch({type: SET_ROLE_LIST, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const addRoleAction = role => dispatch => client.call({\r\n    uri: `/roles`,\r\n    method: \"POST\",\r\n    data: role\r\n}).then(response => dispatch({type: SET_ROLE, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const editRoleAction = (id, role) => dispatch => client.call({\r\n    uri: `/roles/${id}`,\r\n    method: \"PUT\",\r\n    data: role\r\n}).then(response => dispatch({type: SET_ROLE, payload: response.data}))\r\n    .catch(err => console.error(err))\r\n\r\nexport const removeRoleAction = (id) => dispatch => client.call({\r\n    uri: `/roles/${id}`,\r\n    method: \"DELETE\"\r\n})"],"sourceRoot":""}
{"version":3,"sources":["pages/analysis/dictionary/Settings.js","pages/analysis/dictionary/index.js","components/AntTabs/index.js","redux/actions/dictionaryActions.js"],"names":["Divider","styled","MuiDivider","spacing","useStyles","makeStyles","theme","formControl","minWidth","root","flexGrow","width","edit","link","cursor","fab","margin","absolute","position","bottom","right","firstSetting","connect","store","authUser","dsearchReducers","settings","dictionaryReducers","active","dispatch","classes","fullScreen","useMediaQuery","useTheme","breakpoints","down","React","useState","settingsList","setSettingsList","openEditDictModal","setOpenEditDictModal","selectedSetting","setSelectedSetting","openRemoveDictModal","setOpenRemoveDictModal","id","name","type","tokenType","ignoreCase","column_id","column_keyword","column_value","newDictSetting","setNewDictSetting","dictId","useRef","value","dictName","dictColumn_id","dictColumn_keyword","dictColumn_value","errorNewDictSetting","setErrorNewDictSetting","useEffect","setSettings","dragProps","onDragEnd","fromIndex","toIndex","data","item","splice","role","index","i","length","updatedSettingList","updateSettingList","nodeSelector","handleSelector","title","Box","align","Link","className","onClick","color","TableContainer","component","Paper","style","marginTop","marginBottom","display","paddingTop","paddingBottom","map","idx","key","filter","c","join","Button","size","variant","red","disabled","Dialog","open","fullWidth","onClose","DialogTitle","DialogContent","my","Grid","container","xs","alignItems","justifyContent","TextField","autoFocus","placeholder","inputRef","error","helperText","FormControl","select","Select","onChange","e","target","MenuItem","backgroundColor","includes","DialogActions","mx","marginRight","dictSetting","current","tmpError","trim","test","String","Object","keys","setAddDictionarySetting","columns_id","columns_keyword","columns_value","then","body","columns","push","concat","setTimeout","marginLeft","removeDictionarySetting","tmpList","findIndex","firstTabs","icon","Async","time","label","totalCount","openSettings","setOpenSettings","remote","setRemote","dictTabs","dictionary","setRemoteCluster","Typography","gutterBottom","fontSize","mt","AntTabs","tabs","tabIndex","setActiveSettingIndex","MuiBox","Tab","withStyles","textTransform","fontWeight","typography","fontWeightRegular","opacity","fontWeightMedium","selected","props","disableRipple","state","setState","event","indicatorColor","textColor","scrollButtons","tab","hidden","aria-labelledby","client","Client","activeIndex","types","payload","call","uri","response","sort","a","b","catch","console","newSettings","method","err","log","setDictionary","pageNum","rowSize","isMatch","searchColumns","params","downloadDictionary","responseType","document","createElement","href","window","URL","createObjectURL","Blob","headers","setAttribute","appendChild","click","deleteDictionary","createDictionary","updateDictionary","searchDictionaries","setSummary","applyDictionary","sendFile","fd","resetDict"],"mappings":"geAqCMA,EAAUC,YAAOC,IAAPD,CAAmBE,KAE7BC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,YAAa,CACTC,SAAU,KAEdC,KAAM,CACFC,SAAU,EACVC,MAAO,QAEXC,KAAM,CACFD,MAAO,QAEXE,KAAM,CACFC,OAAQ,WAEZC,IAAK,CACDC,OAAQV,EAAMH,QAAQ,IAE1Bc,SAAU,CACNC,SAAU,WACVC,OAAQb,EAAMH,QAAQ,GACtBiB,MAAOd,EAAMH,QAAQ,QAMzBkB,EAGU,qBAHVA,EAIY,eAJZA,EAKY,eALZA,EAMkB,wCANlBA,EAOkB,4BAPlBA,EAQgB,mCARhBA,EASgB,mCAThBA,EAUgB,uBAVhBA,EAWgB,eAskBLC,mBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,SAChCE,SAAUH,EAAMI,mBAAmBD,SACnCE,OAAQL,EAAMI,mBAAmBC,UAHtBN,EAlkBf,gBAAoBO,EAApB,EAAoBA,SAAUL,EAA9B,EAA8BA,SAA9B,mBACI,IAAMM,EAAU1B,IACV2B,EAAaC,YAAcC,cAAWC,YAAYC,KAAK,OAFb,EAIRC,IAAMC,SAASX,GAJP,mBAIzCY,EAJyC,KAI3BC,EAJ2B,OAMEH,IAAMC,UAAS,GANjB,mBAMzCG,EANyC,KAMtBC,EANsB,OAQFL,IAAMC,SAAS,IARb,mBAQzCK,EARyC,KAQxBC,EARwB,QASMP,IAAMC,UAAS,GATrB,qBASzCO,GATyC,MASpBC,GAToB,SAWJT,IAAMC,SAAS,CACvDS,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,UAAW,GACXC,WAAY,GACZC,UAAW,GACXC,eAAgB,GAChBC,aAAc,KAnB8B,qBAWzCC,GAXyC,MAWzBC,GAXyB,MAsB1CC,GAASpB,IAAMqB,OAAO,CAACC,MAAO,KAC9BC,GAAWvB,IAAMqB,OAAO,CAACC,MAAO,KAChCE,GAAgBxB,IAAMqB,OAAO,CAACC,MAAO,KACrCG,GAAqBzB,IAAMqB,OAAO,CAACC,MAAO,KAC1CI,GAAmB1B,IAAMqB,OAAO,CAACC,MAAO,KA1BE,GA4BMtB,IAAMC,SAAS,IA5BrB,qBA4BzC0B,GA5ByC,MA4BpBC,GA5BoB,MA8BhDC,qBAAU,WACNpC,EAASqC,iBACV,IAqKH,IAAMC,GAAY,CACdC,UADc,SACJC,EAAWC,GACjB,IAAMC,EAAI,YAAOjC,GACXkC,EAAOD,EAAKE,OAAOJ,EAAW,GAAG,GACvCE,EAAKE,OAAOH,EAAS,EAAGE,GACxBjC,EAAgBgC,GACb/C,EAASkD,KAAKC,OAlBzB,SAA2BjD,EAAU2C,EAAWC,GAC5C,GAAID,IAAcC,EAAlB,CAEA,IAAI,IAAIM,EAAI,EAAGA,EAAIlD,EAASmD,OAAQD,IAChClD,EAASkD,GAAT,MAAuBA,EAAE,EAG7BrC,EAAgBb,GAChBG,EAASiD,YAAmBpD,KAUAqD,CAAkBR,EAAMF,EAAWC,IAE/DU,aAAc,MACdC,eAAgB,OAIpB,OACI,oCACI,kBAAC,IAAD,CAAQC,MAAM,8BAEd,kBAACC,EAAA,EAAD,CAAKC,MAAO,SACP5D,EAASkD,KAAKC,MAAQ,kBAACU,EAAA,EAAD,CAAMC,UAAWxD,EAAQjB,KAC5C0E,QAtLhB,WACIhC,GAAkB,CACdT,GAAI,GACJC,KAAM,GACNC,KAAM,GACNC,UAAW,GACXC,WAAY,GACZC,UAAW,GACXC,eAAgB,GAChBC,aAAc,KAElBZ,GAAqB,IA4KT+C,MAAO,WAFY,6BAKb,sCAGd,6BACA,kBAACC,EAAA,EAAD,CAAgBC,UAAWC,KACvB,kBAACR,EAAA,EAAD,CAAKS,MAAO,CAAEjF,MAAO,OAAQkF,UAAW,OAAQC,aAAc,SAC9C,kBAACX,EAAA,EAAD,CAAKS,MAAO,CAAEjF,MAAO,OAAQoF,QAAS,OAASC,WAAY,MAAOC,cAAe,QAC7E,kBAACd,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,OAAQ,iCAC9C,kBAACwE,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,QAAS,2BAAIU,IACnD,kBAAC8D,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,QAAS,2BAAIU,IACnD,kBAAC8D,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAS,2BAAIK,IAClE,kBAAC8D,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAS,2BAAIK,IAClE,kBAAC8D,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAS,2BAAIK,IAClE,kBAAC8D,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAS,2BAAIK,IAClE,kBAAC8D,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAS,2BAAIK,IAClE,kBAAC8D,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAS,2BAAIK,IAClE,kBAAC8D,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAS,2BAAIK,KAEtE,kBAAC,EAAD,OAGhB,kBAAC,IAAsB8C,GAElB7B,EAAa4D,KAAI,SAAC1B,EAAM2B,GAAP,OACd,kBAAChB,EAAA,EAAD,CAAKiB,IAAKD,EAAKP,MAAO,CAAEjF,MAAO,OAAQoF,QAAS,OAASF,UAAW,MAAOC,aAAc,MAAOE,WAAY,OAAQC,cAAe,SAC/H,kBAAC,IAAD,CAAgBL,MAAO,CAAC9E,OAAQ,OAAQH,MAAO,QAC/C,kBAACwE,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,QAAU6D,EAAI,IACpD,kBAACW,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,QAAU6D,EAAI,MACpD,kBAACW,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAUwD,EAAI,MACnE,kBAACW,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAUwD,EAAI,YACnE,kBAACW,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAUwD,EAAI,WACnE,kBAACW,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAUwD,EAAI,QAAY6B,QAAO,SAAAC,GAAC,MAAkB,OAAdA,EAAC,QAAmBJ,KAAI,SAAAI,GAAC,OAAIA,EAAC,SAAWC,KAAK,KACzI,kBAACpB,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAUwD,EAAI,QAAY6B,QAAO,SAAAC,GAAC,MAAkB,YAAdA,EAAC,QAAwBJ,KAAI,SAAAI,GAAC,OAAIA,EAAC,SAAWC,KAAK,KAC9I,kBAACpB,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,MAAOK,OAAQ,QAAUwD,EAAI,QAAY6B,QAAO,SAAAC,GAAC,MAAkB,UAAdA,EAAC,QAAsBJ,KAAI,SAAAI,GAAC,OAAIA,EAAC,SAAWC,KAAK,KAC5I,kBAACpB,EAAA,EAAD,CAAKC,MAAO,SAAUQ,MAAO,CAAEjF,MAAO,QACjCa,EAASkD,KAAKC,MAAQ,kBAAC6B,EAAA,EAAD,CAAQC,KAAM,QACjCC,QAAS,WACTd,MAAO,CAAEJ,MAAOmB,IAAI,MACpBpB,QAAS,kBAjNrC5C,EAiNwE6B,QAhNxE3B,IAAuB,KA6MwB,gBAKvB,kBAAC2D,EAAA,EAAD,CAAQC,KAAM,QACVC,QAAS,WACTd,MAAO,CAAEJ,MAAOmB,IAAI,MACpBC,UAAQ,GAHZ,uBA2EpB,kBAACC,EAAA,EAAD,CAAQC,KAAMtE,EACVuE,WAAS,EACThF,WAAYA,EACZiF,QAAS,kBAAMvE,GAAqB,KAEpC,kBAACwE,EAAA,EAAD,kCAGA,kBAACC,EAAA,EAAD,KACI,kBAAC/B,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,KACI,kBAACA,EAAA,EAAD,CAAKgC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,EAAG1B,MAAO,CAAE2B,WAAY,SAAUC,eAAgB,SAAUzB,QAAS,SAApF,sBAGA,kBAACqB,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACG,EAAA,EAAD,CAAWV,WAAW,EAClBW,WAAW,EACXC,YAAa,UACbC,SAAUpE,GAGVqE,MAAO9D,GAAmB,GAC1B+D,WAAY/D,GAAmB,IAAU,QAKzD,kBAACoB,EAAA,EAAD,CAAKgC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,EAAG1B,MAAO,CAAE2B,WAAY,SAAUC,eAAgB,SAAUzB,QAAS,SAApF,gBAGA,kBAACqB,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACG,EAAA,EAAD,CAAWV,WAAW,EAClBY,YAAa,kCACbC,SAAUjE,GAGVkE,MAAO9D,GAAmB,KAC1B+D,WAAY/D,GAAmB,MAAY,QAK3D,kBAACoB,EAAA,EAAD,CAAKgC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,EAAG1B,MAAO,CAAE2B,WAAY,SAAUC,eAAgB,SAAUzB,QAAS,SAApF,gBAGA,kBAACqB,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACS,EAAA,EAAD,CAAazC,UAAWxD,EAAQkG,OAAQjB,WAAW,GAC/C,kBAACkB,EAAA,EAAD,CAAQN,YAAa,UACjBjE,MAAOJ,GAAc,KACrB4E,SAAU,SAAAC,GACN5E,GAAkB,2BACXD,IADU,IAEbH,UAAW,GACXC,eAAgB,GAChBC,aAAc,GACdL,KAAMmF,EAAEC,OAAO1E,UAGvBmE,MAAO9D,GAAmB,MAE1B,kBAACsE,EAAA,EAAD,CAAU3E,MAAO,GAAIkD,UAAU,GAA/B,mCACA,kBAACyB,EAAA,EAAD,CAAU3E,MAAO,OAAjB,OACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,WAAjB,WACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,SAAjB,SACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,YAAjB,YACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,gBAAjB,gBACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,UAAjB,eAMpB,kBAACyB,EAAA,EAAD,CAAKgC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,EAAG1B,MAAO,CAAE2B,WAAY,SAAUC,eAAgB,SAAUzB,QAAS,SAApF,6BAGA,kBAACqB,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACS,EAAA,EAAD,CAAazC,UAAWxD,EAAQkG,OAAQjB,WAAW,GAC/C,kBAACkB,EAAA,EAAD,CAAQN,YAAa,MACjBjE,MAAOJ,GAAc,UACrB4E,SAAU,SAAAC,GACN5E,GAAkB,2BAAKD,IAAN,IAAsBL,UAAWkF,EAAEC,OAAO1E,UAE/DmE,MAAO9D,GAAmB,WAE1B,kBAACsE,EAAA,EAAD,CAAU3E,MAAO,GAAIkD,UAAU,GAA/B,mCACA,kBAACyB,EAAA,EAAD,CAAU3E,MAAO,OAAjB,OACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,OAAjB,OACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,OAAjB,OACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,QAAjB,QACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,QAAjB,aAMpB,kBAACyB,EAAA,EAAD,CAAKgC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,EAAG1B,MAAO,CAAE2B,WAAY,SAAUC,eAAgB,SAAUzB,QAAS,SAApF,0CAGA,kBAACqB,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACS,EAAA,EAAD,CAAazC,UAAWxD,EAAQkG,OAAQjB,WAAW,GAC/C,kBAACkB,EAAA,EAAD,CAAQvE,MAAOJ,GAAc,WACzB4E,SAAU,SAAAC,GACF5E,GAAkB,2BAAKD,IAAN,IAAsBJ,WAAYiF,EAAEC,OAAO1E,UAGpEmE,MAAO9D,GAAmB,YAE1B,kBAACsE,EAAA,EAAD,CAAU3E,MAAO,GAAIkD,UAAU,GAA/B,mCACA,kBAACyB,EAAA,EAAD,CAAU3E,MAAO,QAAjB,QACA,kBAAC2E,EAAA,EAAD,CAAU3E,MAAO,SAAjB,cAOpB,kBAACyB,EAAA,EAAD,CAAKgC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,EAAG1B,MAAO,CAAE2B,WAAY,SAAUC,eAAgB,SAAUzB,QAAS,SAApF,gBAGA,kBAACqB,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACnC,EAAA,EAAD,CAAKgC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,EAAG1B,MAAO,CAAE2B,WAAY,SAAUC,eAAgB,SAAUzB,QAAS,SAApF,sBAGA,kBAACqB,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACG,EAAA,EAAD,CAAWV,WAAW,EAClBa,SAAUhE,GAGV+D,YAAa,GACb/B,MAAO,CAAE0C,gBAAkB,CAAC,UAAUC,SAASjF,GAAc,MAAwB,KAAZ,WACzEsD,UAAW,CAAC,UAAU2B,SAASjF,GAAc,MAC7CuE,MAAO9D,GAAmB,WAC1B+D,WAAY/D,GAAmB,WAAiB,QAMhE,kBAACoB,EAAA,EAAD,CAAKgC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,EAAG1B,MAAO,CAAE2B,WAAY,SAAUC,eAAgB,SAAUzB,QAAS,SAApF,sBAGA,kBAACqB,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACG,EAAA,EAAD,CAAWV,WAAW,EAClBY,YAAa,GACbC,SAAU/D,GAGV+B,MAAO,CAAE0C,gBAAkB,CAAC,MAAO,UAAW,QAAS,WAAY,UAAUC,SAASjF,GAAc,MAAwB,KAAZ,WAChHsD,UAAW,CAAC,MAAO,UAAW,QAAS,WAAY,UAAU2B,SAASjF,GAAc,MACpFuE,MAAO9D,GAAmB,eAC1B+D,WAAY/D,GAAmB,gBAAsB,QAMrE,kBAACoB,EAAA,EAAD,CAAKgC,GAAI,GACL,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,EAAG1B,MAAO,CAAE2B,WAAY,SAAUC,eAAgB,SAAUzB,QAAS,SAApF,UAGA,kBAACqB,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACG,EAAA,EAAD,CAAWV,WAAW,EAClBY,YAAa,GACbC,SAAU9D,GAGV8B,MAAO,CAAE0C,gBAAkB,CAAC,UAAW,WAAY,eAAgB,UAAUC,SAASjF,GAAc,MAAwB,KAAZ,WAChHsD,UAAW,CAAC,UAAW,WAAY,eAAgB,UAAU2B,SAASjF,GAAc,MACpFuE,MAAO9D,GAAmB,aAC1B+D,WAAY/D,GAAmB,cAAoB,cAc3F,kBAACyE,EAAA,EAAD,KACI,kBAACrD,EAAA,EAAD,CAAKsD,GAAI,GACL,kBAACjC,EAAA,EAAD,CAAQE,QAAQ,YACZlB,MAAO,UACPI,MAAO,CAAE8C,YAAa,OACtBnD,QAvexB,WACI,IAAIoD,EAAcrF,GAClBqF,EAAW,GAASnF,GAAOoF,QAAQlF,MACnCiF,EAAW,KAAUhF,GAASiF,QAAQlF,MACtCiF,EAAW,UAAe/E,GAAcgF,QAAQlF,MAChDiF,EAAW,eAAoB9E,GAAmB+E,QAAQlF,MAC1DiF,EAAW,aAAkB7E,GAAiB8E,QAAQlF,MAEtDH,GAAkBoF,GAElB,IAAIE,EAAW,GAiBf,IAfoC,KAAhCvF,GAAc,GAAOwF,QAAiB,gBAAgBC,KAAKzF,GAAc,GAAOwF,WAChFD,EAAQ,GAAS,4HAEiB,KAAlCvF,GAAc,KAASwF,SACvBD,EAAQ,KAAW,sDAEQ,KAA3BvF,GAAc,OACduF,EAAQ,KAAW,sDAEa,KAAhCvF,GAAc,YACduF,EAAQ,UAAgB,kEAES,KAAjCvF,GAAc,aACduF,EAAQ,WAAiB,gFAEzBvF,GAAc,KAAU,CACxB,IAAIN,EAAOM,GAAc,KACrB,CAAC,UAAUiF,SAASvF,IAA8D,KAArDgG,OAAO1F,GAAc,WAAiB,IAAIwF,SAEvED,EAAQ,UAAgB,yEAExB,CAAC,MAAO,UAAW,QAAS,WAAY,UAAUN,SAASvF,IAAmE,KAA1DgG,OAAO1F,GAAc,gBAAsB,IAAIwF,SAEnHD,EAAQ,eAAqB,+EAE7B,CAAC,UAAW,WAAY,eAAgB,UAAUN,SAASvF,IAAiE,KAAxDgG,OAAO1F,GAAc,cAAoB,IAAIwF,SAEjHD,EAAQ,aAAmB,mEAI/BI,OAAOC,KAAKL,GAAUhE,OAAS,EAC/Bb,GAAuB6E,GAI3BhH,EAASsH,YAAwB,CAC7BrG,GAAIQ,GAAc,GAAQP,KAAMO,GAAc,KAAUJ,WAAYI,GAAc,WAClFN,KAAMM,GAAc,KAAUL,UAAWK,GAAc,UACvD8F,WAAY9F,GAAc,UAC1B+F,gBAAiB/F,GAAc,eAC/BgG,cAAehG,GAAc,gBAC7BiG,MAAK,SAAAC,GAEL,IAAIC,EAAW,GAEmB,IAA/BnG,GAAc,WACbmG,EAAQC,KAAK,CAAC,KAAQ,KAAM,MAASpG,GAAc,YAEhB,IAApCA,GAAc,gBACbmG,EAAQC,KAAK,CAAC,KAAQ,UAAW,MAASpG,GAAc,iBAEvB,IAAlCA,GAAc,cACbmG,EAAQC,KAAK,CAAC,KAAQ,QAAS,MAASpG,GAAc,eAE1Df,EAAgBD,EAAaqH,OAAO,CAChC7G,GAAIQ,GAAc,GAClBP,KAAMO,GAAc,KACpBJ,WAAYI,GAAc,WAC1BN,KAAMM,GAAc,KACpBL,UAAWK,GAAc,UACzBqB,MAAOjD,EAASmD,OAChB4E,QAASA,KAGbG,YAAW,WACP/H,EAASqC,eACTzB,GAAqB,KACtB,UAoZS,gBAKA,kBAAC+D,EAAA,EAAD,CAAQE,QAAS,WACbnB,QAAS,kBAAM9C,GAAqB,IACpCmD,MAAO,CAAEiE,WAAY,QAFzB,mBAWZ,kBAAChD,EAAA,EAAD,CAAQC,KAAMlE,GACVmE,WAAS,EACThF,WAAYA,EACZiF,QAAS,kBAAMnE,IAAuB,KAEtC,kBAACoE,EAAA,EAAD,kCAGA,kBAACC,EAAA,EAAD,KACKxE,EAAe,MAAY,GADhC,yEAGA,kBAAC8F,EAAA,EAAD,KACI,kBAAChC,EAAA,EAAD,CAAQE,QAAQ,YACZlB,MAAO,UACPD,QA9apB,WACI1D,EAASiI,YAAwBpH,EAAe,aAC3C6G,MAAK,SAAAC,GAEF,IAAIO,EAAUzH,EACV6D,EAAM4D,EAAQC,WAAU,SAACxF,GAAW,OAAOA,EAAI,aAAmB9B,EAAe,cACrFqH,EAAQtF,OAAO0B,EAAK,GAEpB5D,EAAgBwH,GAMhBH,YAAW,WACP/H,EAASqC,eACTrB,IAAuB,KACxB,UA2ZC,gBAIA,kBAAC2D,EAAA,EAAD,CAAQE,QAAS,WACbnB,QAAS,kBAAM1C,IAAuB,KAD1C,mBAzjBpB,GAAwCnB,aCnElC1B,GAAUC,YAAOC,IAAPD,CAAmBE,KAE7B8J,GAAY,CACd,CAACC,KAAO,kBAAC,IAAD,MAAgBxE,UAAWyE,aAAM,kBAAM,kCAAoB,CAAEC,KAAM,KAC3E,CAACC,MAAO,eAAM3E,UAAWyE,aAAM,kBAAM,4DAgE1B7I,uBAAQ,SAAAC,GAAK,MAAK,CAC7BC,SAAUD,EAAME,gBAAgBD,SAChCE,SAAUH,EAAMI,mBAAmBD,SACnCE,OAAQL,EAAMI,mBAAmBC,UAHtBN,EA7Df,YAAyE,IAApDO,EAAmD,EAAnDA,SAAUL,EAAyC,EAAzCA,SAAUE,EAA+B,EAA/BA,SAAUE,EAAqB,EAArBA,OAAqB,KAAb0I,WACflI,IAAMC,UAAS,IADa,mBAC7DkI,EAD6D,KAC/CC,EAD+C,OAExCpI,IAAMC,SAAS,IAFyB,mBAE7DoI,EAF6D,KAErDC,EAFqD,KAGhEC,EAAWV,GAAUN,OACrBjI,EAASwE,KAAI,SAAA0E,GAAU,MAAK,CAACP,MAAOO,EAAW7H,KAAM2C,UAAWyE,aAAM,kBAAO,+DAYjF,OATAlG,qBAAU,WACNpC,EAASqC,eACTrC,EAASgJ,eAAoBtB,MAAK,SAAAC,GAASkB,EAAUlB,QACtD,IAOC,oCACI,kBAAC,IAAD,CAAQtE,MAAK,iBAEb,kBAACkC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,IACX,kBAACwD,EAAA,EAAD,CAAYpE,QAAQ,KAAKqE,cAAY,EAAChF,QAAQ,UAA9C,gBACQwE,EAAe,eAAO,IAE9B,kBAACpF,EAAA,EAAD,CAAKS,MAAO,CAACoF,SAAU,SAAUC,GAAI,GAE7BR,EAAM,SAAmC,IAArBA,EAAM,OAA1B,gDAA2DA,EAAM,MAAU,GAA3E,YAAiFA,EAAM,MAAU,IAAO,KAIpH,kBAACrD,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,GACX,kBAACnC,EAAA,EAAD,CAAKC,MAAO,SACR,kBAACoB,EAAA,EAAD,CAAQhB,MAAO,UAAWkB,QAAS,WAAYnB,QAAS,kBAAMiF,GAAiBD,KAEvEA,EACI,eAEA,mBAOxB,kBAAC,GAAD,CAASpD,GAAI,IAGToD,EACI,kBAAC,EAAD,MAEA,kBAACnD,EAAA,EAAD,CAAMC,WAAS,EAAClH,QAAS,GACrB,kBAACiH,EAAA,EAAD,CAAM5C,MAAI,EAAC8C,GAAI,IACX,kBAAC4D,EAAA,EAAD,CAAS1J,SAAUA,EAAU2J,KAAMR,EAAUS,SAAUxJ,EAAQsG,SAzCvF,SAAyBvD,GACrB9C,EAASwJ,YAAsB1G,EAAQsF,GAAUpF,mB,oICvBnD7E,EAAUC,YAAOC,IAAPD,CAAmBE,KAC7BgF,EAAMlF,YAAOqL,IAAPrL,CAAeE,KAarBoL,EAAMC,aAAW,SAAClL,GAAD,MAAY,CAC/BG,KAAM,CACFgL,cAAe,OACfjL,SAAU,GACVkL,WAAYpL,EAAMqL,WAAWC,kBAC7BlD,YAAapI,EAAMH,QAAQ,GAC3B,UAAW,CACPqF,MAAO,UACPqG,QAAS,GAEb,aAAc,CACVrG,MAAO,UACPkG,WAAYpL,EAAMqL,WAAWG,kBAEjC,UAAW,CACPtG,MAAO,YAGfuG,SAAU,MACV,CAACpH,MAAO,GAnBA6G,EAmBI,SAACQ,GAAD,OAAW,kBAAC,IAAD,eAAQC,eAAa,GAAKD,OAoEtCd,IAtCf,YAAkD,IAAhCC,EAA+B,EAA/BA,KAA+B,IAAzBC,gBAAyB,MAAd,EAAc,EAAXlD,EAAW,EAAXA,SAAW,EACnB9F,IAAMC,SAAS,CAAC+I,SAAUA,IADP,mBACtCc,EADsC,KAC/BC,EAD+B,KAW7C,OACI,oCACI,kBAAC,IAAD,CAAMzI,MAAOwI,EAAMd,SACblD,SAZO,SAACkE,EAAOhB,GACzBe,EAAS,CACLf,SAAUA,IAEU,oBAAblD,GACPA,EAASkD,IAQHiB,eAAe,UACfC,UAAU,UACV5F,QAAQ,aACR6F,cAAc,QAEfpB,EAAKjF,KAAI,SAACsG,EAAK7H,GAAN,OAAgB,kBAAC4G,EAAD,CAAKnF,IAAKzB,EAAO7B,GAAI6B,EAAOuF,KAAMsC,EAAItC,KAAMG,MAAOmC,EAAInC,OAAS,SAE9F,kBAACrK,EAAD,MACCmL,EAAKjF,KAAI,SAACqF,EAAK5G,GACZ,OACI,kBAACQ,EAAD,CAAKiB,IAAKzB,EACJD,KAAK,WACL+H,OAAQP,EAAMd,WAAazG,EAC3B7B,GAAE,mCAA8B6B,GAChC+H,kBAAA,8BAAwC/H,IACzCA,IAAUuH,EAAMd,UAAYG,EAAI7F,WAAa,kBAACP,EAAD,SAAM,kBAACoG,EAAI7F,UAAL,CAAeyF,KAAMI,IAA3B,Y,iCCvGtE,mjBAGMoB,EAAS,IAAIC,IAINvB,EAAwB,SAACwB,GAAD,OAAiB,SAAAhL,GAAQ,OAAIA,EAAS,CAACmB,KAAM8J,IAAgCC,QAASF,MAE9G3I,EAAc,kBAAM,SAAArC,GAAQ,OACrC8K,EAAOK,KAAK,CACRC,IAAI,2BAEH1D,MAAK,SAAA2D,GACE,IAAIxL,EAAWwL,EAAS3I,KACxB1C,EAAS,CAACmB,KAAM8J,KAAgCC,QAASrL,EAASyL,MAAK,SAACC,EAAGC,GAAJ,OAASD,EAAEzI,MAAQ0I,EAAE1I,cAMnG2I,OAAM,SAAAzF,GAAK,OAAI0F,QAAQ1F,MAAMA,QAEzB/C,EAAqB,SAAC0I,GAAD,OAAiB,SAAA3L,GAAQ,OAAK8K,EAAOK,KAAK,CACxEC,IAAI,oCACJQ,OAAQ,OACRlJ,KAAMiJ,IACPjE,MAAK,SAAC2D,OAENI,OAAM,SAACI,GACNH,QAAQI,IAAID,QAGHE,EAAgB,SAAChD,EAAYiD,EAASC,EAASC,EAASrK,EAAOsK,GAA/C,OAAiE,SAAAnM,GAAQ,OAClG8K,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBrC,GACtBqD,OAAQ,CAACJ,UAASC,UAASC,UAASrK,QAAOsK,mBAE1CzE,MAAK,SAAA2D,GAAQ,OAAIrL,EAAS,CAACmB,KAAM8J,IAA8BlC,WAAYA,EAAYmC,QAASG,EAAS3I,UACzG+I,OAAM,SAAAzF,GAAK,OAAI0F,QAAQ1F,MAAMA,QAEzBqG,EAAqB,SAACtD,GAAD,OAC9B+B,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBrC,EAAnB,aACHuD,aAAc,SAEb5E,MAAK,SAAA2D,GACF,IAAMrM,EAAOuN,SAASC,cAAc,KACpCxN,EAAKyN,KAAOC,OAAOC,IAAIC,gBAAgB,IAAIC,KAAK,CAACxB,EAAS3I,MAAO,CAC7DvB,KAAMkK,EAASyB,QAAQ,mBAE3B9N,EAAK+N,aAAa,WAAlB,UAAiChE,EAAjC,SACAwD,SAAS5E,KAAKqF,YAAYhO,GAC1BA,EAAKiO,YAGJC,EAAmB,SAACnE,EAAY9H,GAAb,OAC5B6J,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBrC,EAAnB,YAAiC9H,GACpC2K,OAAQ,YAGHuB,EAAmB,SAACpE,EAAYrG,GAAb,OAC5BoI,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBrC,GACtB6C,OAAQ,OACRlJ,KAAMA,IAELgF,MAAK,SAAA2D,OAGLI,OAAM,SAAAzF,GAAK,OAAI0F,QAAQ1F,MAAMA,OAEzBoH,EAAmB,SAACrE,EAAY9H,EAAIyB,GAAjB,OAC5BoI,EAAOK,KAAK,CACRC,IAAI,iBAAD,OAAmBrC,EAAnB,YAAiC9H,GACpC2K,OAAQ,MACRlJ,KAAMA,IAELgF,MAAK,SAAA2D,OAGLI,OAAM,SAAAzF,GAAK,OAAI0F,QAAQ1F,MAAMA,OAGzBqH,EAAqB,SAAC3K,GAAD,OAAU,SAAA1C,GAAQ,OAAI8K,EAAOK,KAAK,CAChEC,IAAK,0BACLQ,OAAQ,OACRlJ,KAAMA,IACPgF,MAAK,SAAA2D,GAAQ,OAAIrL,EAAS,CAACmB,KAAM8J,IAAmCC,QAASG,EAAS3I,YAE5E4K,EAAa,kBAAM,SAAAtN,GAAQ,OAAI8K,EAAOK,KAAK,CACpDC,IAAK,0BACN1D,MAAK,SAAA2D,GAAQ,OAAIrL,EAAS,CAACmB,KAAM8J,KAAoBC,QAASG,EAAS3I,YAG7D6K,EAAkB,SAAC7K,GAAD,OAAU,SAAA1C,GAAQ,OAAI8K,EAAOK,KAAK,CAC7DC,IAAK,6BACLQ,OAAQ,OACRlJ,KAAMA,IACPgF,MAAK,SAAA2D,GAAQ,OAAIrL,EAAS,CAACmB,KAAM8J,IAAsBC,QAASG,EAAS3I,YAE/D4E,EAA0B,SAAC,GAAD,IAAErG,EAAF,EAAEA,GAAIC,EAAN,EAAMA,KAAMC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,WAAYkG,EAAzC,EAAyCA,WAAYC,EAArD,EAAqDA,gBAAiBC,EAAtE,EAAsEA,cAAtE,OAAyF,SAAAzH,GAAQ,OAAI8K,EAAOK,KAAK,CACpJC,IAAK,yBACLQ,OAAQ,OACRlJ,KAAM,CACFzB,KAAIC,OAAMC,OAAMC,YAAWC,aAC3BuG,QAAS,CACLL,EAAWvE,OAAS,EAAI,CAChB7B,KAAM,KACNqH,MAAOjB,GAGX,KACJC,EAAgBxE,OAAS,EAAI,CACrB7B,KAAM,UACNqH,MAAOhB,GAGX,KACJC,EAAczE,OAAS,EAAI,CACnB7B,KAAM,QACNqH,MAAOf,GAGX,SAGbC,MAAK,SAAA2D,GAAQ,OAAIA,EAAS3I,UAEhBuF,EAA0B,SAAAhH,GAAE,OAAI,SAAAjB,GAAQ,OAAI8K,EAAOK,KAAK,CACjEC,IAAK,0BAA4BnK,EACjC2K,OAAQ,WACTlE,MAAK,SAAA2D,GAAQ,OAAIA,EAAS3I,UAEhBsG,EAAmB,kBAAM,SAAAhJ,GAAQ,OAC1C8K,EAAOK,KAAK,CACRC,IAAI,yBAEH1D,MAAK,SAAA2D,GAAQ,OAAIA,EAAS3I,QAC1B+I,OAAM,SAAAzF,GAAK,OAAI0F,QAAQ1F,MAAMA,QAGzBwH,EAAW,SAACC,GAAD,OAAQ,SAAAzN,GAAQ,OAAI8K,EAAOK,KAAK,CACnDC,IAAI,2BACJQ,OAAQ,OACRlJ,KAAM+K,EACNX,QAAS,CACN,eAAgB,2BAKXY,EAAY,SAACD,GAAD,OAAQ,SAAAzN,GAAQ,OAAI8K,EAAOK,KAAK,CACjDC,IAAI,0BACJQ,OAAQ,OACRlJ,KAAM+K","file":"static/js/51.c73e1158.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n// import ReactDragList from 'react-drag-list'\r\nimport DragHandleIcon from '@material-ui/icons/DragHandle';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport ReactDragListView from 'react-drag-listview/lib/index.js';\r\n\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider as MuiDivider,\r\n    FormControl,\r\n    Grid,\r\n    Link,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TableContainer,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {\r\n    removeDictionarySetting,\r\n    setAddDictionarySetting,\r\n    setSettings,\r\n    updatedSettingList\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport {makeStyles, useTheme} from \"@material-ui/core/styles\";\r\nimport {red} from \"@material-ui/core/colors\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    },\r\n    link: {\r\n        cursor: \"pointer\"\r\n    },\r\n    fab: {\r\n        margin: theme.spacing(2),\r\n    },\r\n    absolute: {\r\n        position: 'absolute',\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(3),\r\n    },\r\n}));\r\n\r\n\r\n\r\nlet firstSetting = \r\n    {\r\n        \"header\": true,\r\n        \"id\": \"아이디\",\r\n        \"name\": \"이름\",\r\n        \"type\": \"타입\",\r\n        \"ignoreCase\": \"대/소문자무시\",\r\n        \"tokenType\":  \"토큰 타입\", \r\n        \"columns1\": \"필드(아이디)\", \r\n        \"columns2\": \"필드(키워드)\", \r\n        \"columns3\": \"필드(값)\", \r\n        \"columns4\": \"삭제\"\r\n    };\r\n\r\n\r\nfunction Settings({ dispatch, authUser, settings }) {\r\n    const classes = useStyles();\r\n    const fullScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n\r\n    const [settingsList, setSettingsList] = React.useState(settings)\r\n\r\n    const [openEditDictModal, setOpenEditDictModal] = React.useState(false)\r\n\r\n    const [selectedSetting, setSelectedSetting] = React.useState({})\r\n    const [openRemoveDictModal, setOpenRemoveDictModal] = React.useState(false)\r\n\r\n    const [newDictSetting, setNewDictSetting] = React.useState({\r\n        id: \"\",\r\n        name: \"\",\r\n        type: \"\",\r\n        tokenType: \"\",\r\n        ignoreCase: \"\",\r\n        column_id: \"\",\r\n        column_keyword: \"\",\r\n        column_value: \"\",\r\n    })\r\n\r\n    const dictId = React.useRef({value: \"\"});\r\n    const dictName = React.useRef({value: \"\"});\r\n    const dictColumn_id = React.useRef({value: \"\"});\r\n    const dictColumn_keyword = React.useRef({value: \"\"});\r\n    const dictColumn_value = React.useRef({value: \"\"});\r\n\r\n    const [errorNewDictSetting, setErrorNewDictSetting] = React.useState({})\r\n\r\n    useEffect(() => {\r\n        dispatch(setSettings())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleOpenEditModal() {\r\n        setNewDictSetting({\r\n            id: \"\",\r\n            name: \"\",\r\n            type: \"\",\r\n            tokenType: \"\",\r\n            ignoreCase: \"\",\r\n            column_id: \"\",\r\n            column_keyword: \"\",\r\n            column_value: \"\",\r\n        })\r\n        setOpenEditDictModal(true)\r\n    }\r\n\r\n    function handleOpenRemoveSettingModal(setting) {\r\n        setSelectedSetting(setting);\r\n        setOpenRemoveDictModal(true)\r\n    }\r\n\r\n    function handleAddSetting() {\r\n        let dictSetting = newDictSetting;\r\n        dictSetting['id'] = dictId.current.value\r\n        dictSetting['name']= dictName.current.value\r\n        dictSetting['column_id']= dictColumn_id.current.value\r\n        dictSetting['column_keyword']= dictColumn_keyword.current.value\r\n        dictSetting['column_value']= dictColumn_value.current.value\r\n\r\n        setNewDictSetting(dictSetting)\r\n\r\n        let tmpError = {}\r\n\r\n        if (newDictSetting['id'].trim() === '' || /[^a-z0-9_]+/gi.test(newDictSetting['id'].trim())) {\r\n            tmpError['id'] = \"아이디를 확인하세요. (a-zA-Z0-9_ 글자만 가능합니다.)\"\r\n        }\r\n        if (newDictSetting['name'].trim() === '') {\r\n            tmpError['name'] = \"이름를 확인하세요.\"\r\n        }\r\n        if (newDictSetting['type'] === '') {\r\n            tmpError['type'] = \"타입을 선택하세요.\"\r\n        }\r\n        if (newDictSetting['tokenType'] === '') {\r\n            tmpError['tokenType'] = \"토큰타입을 선택하세요.\"\r\n        }\r\n        if (newDictSetting['ignoreCase'] === '') {\r\n            tmpError['ignoreCase'] = \"대/소문자 무시를 선택하세요.\"\r\n        }\r\n        if (newDictSetting['type']) {\r\n            let type = newDictSetting['type']\r\n            if ([\"CUSTOM\"].includes(type) && String(newDictSetting['column_id'] || '').trim() === '') {\r\n                // id\r\n                tmpError['column_id'] = \"필드 아이디를 확인하세요.\"\r\n            }\r\n            if ([\"SET\", \"SYNONYM\", \"SPACE\", \"COMPOUND\", \"CUSTOM\"].includes(type) && String(newDictSetting['column_keyword'] || '').trim() === '') {\r\n                // keyword\r\n                tmpError['column_keyword'] = \"필드의 키워드를 확인하세요.\"\r\n            }\r\n            if ([\"SYNONYM\", \"COMPOUND\", \"SYNONYM_2WAY\", \"CUSTOM\"].includes(type) && String(newDictSetting['column_value'] || '').trim() === '') {\r\n                // value\r\n                tmpError['column_value'] = \"필드의 값를 확인하세요.\"\r\n            }\r\n        }\r\n\r\n        if (Object.keys(tmpError).length > 0) {\r\n            setErrorNewDictSetting(tmpError)\r\n            return;\r\n        }\r\n\r\n        dispatch(setAddDictionarySetting({\r\n            id: newDictSetting['id'], name: newDictSetting['name'], ignoreCase: newDictSetting['ignoreCase'],\r\n            type: newDictSetting['type'], tokenType: newDictSetting['tokenType'],\r\n            columns_id: newDictSetting['column_id'],\r\n            columns_keyword: newDictSetting['column_keyword'],\r\n            columns_value: newDictSetting['column_value']\r\n        })).then(body => {\r\n\r\n            let columns  = [];\r\n\r\n            if(newDictSetting['column_id'] != \"\"){\r\n                columns.push({\"type\": \"id\", \"label\": newDictSetting['column_id']})\r\n            }\r\n            if(newDictSetting['column_keyword'] != \"\"){\r\n                columns.push({\"type\": \"keyword\", \"label\": newDictSetting['column_keyword']})\r\n            }\r\n            if(newDictSetting['column_value'] != \"\"){\r\n                columns.push({\"type\": \"value\", \"label\": newDictSetting['column_value']})\r\n            }\r\n            setSettingsList(settingsList.concat({\r\n                id: newDictSetting['id'], \r\n                name: newDictSetting['name'], \r\n                ignoreCase: newDictSetting['ignoreCase'],\r\n                type: newDictSetting['type'], \r\n                tokenType: newDictSetting['tokenType'],\r\n                index: settings.length,\r\n                columns: columns\r\n            }))\r\n\r\n            setTimeout(() => {\r\n                dispatch(setSettings())\r\n                setOpenEditDictModal(false)\r\n            }, 1000)\r\n        })\r\n    }\r\n\r\n    function handleRemoveDictionarySetting() {\r\n        dispatch(removeDictionarySetting(selectedSetting['documentId']))\r\n            .then(body => {\r\n                \r\n                let tmpList = settingsList\r\n                let idx = tmpList.findIndex((item) => { return item['documentId'] === selectedSetting['documentId']})\r\n                tmpList.splice(idx, 1);\r\n\r\n                setSettingsList(tmpList);\r\n\r\n                // settings = settingsList;\r\n                // idx = settings.findIndex((item) => { return item['documentId'] === selectedSetting['documentId']})\r\n                // settings.splice(idx, 1);\r\n\r\n                setTimeout(() => {\r\n                    dispatch(setSettings())\r\n                    setOpenRemoveDictModal(false)\r\n                }, 1000)\r\n            })\r\n    }\r\n\r\n    function updateSettingList(e){\r\n        if( e.oldIndex === e.newIndex ) return;\r\n\r\n        let list = [];\r\n        \r\n        if(e.oldIndex < e.newIndex){\r\n            // 위에 있는 내용을 밑으로 \r\n            list = list.concat(settings.slice(0, e.oldIndex))\r\n            list = list.concat(settings.slice(e.oldIndex+1, e.newIndex+1))\r\n            list = list.concat(settings[e.oldIndex])\r\n            list = list.concat(settings.slice(e.newIndex+1, settings.length));\r\n        }else if(e.oldIndex > e.newIndex){\r\n            // 밑에 있는 내용을 위로 \r\n            list = list.concat(settings.slice(0, e.newIndex))\r\n            list = list.concat(settings[e.oldIndex])\r\n            list = list.concat(settings.slice(e.newIndex, e.oldIndex));\r\n            list = list.concat(settings.slice(e.oldIndex+1, settings.length));\r\n        }\r\n\r\n        for(let i = 0; i < list.length; i++){\r\n            list[i]['index'] = i+1;\r\n        }\r\n\r\n        settings = list;\r\n        dispatch(updatedSettingList(list));\r\n    }\r\n\r\n    function updateSettingList(settings, fromIndex, toIndex){\r\n        if( fromIndex === toIndex ) return;\r\n        \r\n        for(let i = 0; i < settings.length; i++){\r\n            settings[i]['index'] = i+1;\r\n        }\r\n\r\n        setSettingsList(settings);\r\n        dispatch(updatedSettingList(settings));\r\n    }\r\n\r\n\r\n    const dragProps = {\r\n        onDragEnd(fromIndex, toIndex) {\r\n            const data = [...settingsList];\r\n            const item = data.splice(fromIndex, 1)[0];\r\n            data.splice(toIndex, 0, item);\r\n            setSettingsList(data)\r\n            if(authUser.role.index) updateSettingList(data, fromIndex, toIndex)\r\n        },\r\n        nodeSelector: 'div',\r\n        handleSelector: 'svg'\r\n      };\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet title=\"사전 설정\" />\r\n\r\n            <Box align={'right'}>\r\n                {authUser.role.index ? <Link className={classes.link}\r\n                    onClick={handleOpenEditModal}\r\n                    color={\"primary\"}\r\n                >\r\n                    사전 생성\r\n                </Link> : <></>}\r\n            </Box>\r\n\r\n            <br />\r\n            <TableContainer component={Paper}>\r\n                <Box style={{ width: \"100%\", marginTop: \"12px\", marginBottom: \"12px\"}}>\r\n                                <Box style={{ width: \"100%\", display: \"flex\",  paddingTop: \"8px\", paddingBottom: \"8px\" }} >\r\n                                    <Box align={\"center\"} style={{ width: \"5%\" }}><b>#</b></Box>\r\n                                    <Box align={\"center\"} style={{ width: \"10%\" }}><b>{firstSetting['id']}</b></Box>\r\n                                    <Box align={\"center\"} style={{ width: \"15%\" }}><b>{firstSetting['name']}</b></Box>\r\n                                    <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}><b>{firstSetting['type']}</b></Box>\r\n                                    <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}><b>{firstSetting['ignoreCase']}</b></Box>\r\n                                    <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}><b>{firstSetting['tokenType']}</b></Box>\r\n                                    <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}><b>{firstSetting['columns1']}</b></Box>\r\n                                    <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}><b>{firstSetting['columns2']}</b></Box>\r\n                                    <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}><b>{firstSetting['columns3']}</b></Box>\r\n                                    <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}><b>{firstSetting['columns4']}</b></Box>\r\n                                </Box>\r\n                                <Divider />\r\n                </Box>\r\n\r\n                <ReactDragListView {...dragProps}>\r\n                    \r\n                    {settingsList.map((item, idx) => (\r\n                        <Box key={idx} style={{ width: \"100%\", display: \"flex\",  marginTop: \"8px\", marginBottom: \"8px\", paddingTop: \"12px\", paddingBottom: \"12px\" } } >\r\n                            <DragHandleIcon style={{cursor: \"move\", width: \"5%\"}} />\r\n                            <Box align={\"center\"} style={{ width: \"10%\" }}>{item['id']}</Box>\r\n                            <Box align={\"center\"} style={{ width: \"15%\" }}>{item['name']}</Box>\r\n                            <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}>{item['type']}</Box>\r\n                            <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}>{item['ignoreCase']}</Box>\r\n                            <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}>{item['tokenType']}</Box>\r\n                            <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}>{item['columns'].filter(c => c['type'] === 'id').map(c => c['label']).join(\"\")}</Box>\r\n                            <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}>{item['columns'].filter(c => c['type'] === 'keyword').map(c => c['label']).join(\"\")}</Box>\r\n                            <Box align={\"center\"} style={{ width: \"10%\", margin: \"4px\" }}>{item['columns'].filter(c => c['type'] === 'value').map(c => c['label']).join(\"\")}</Box>\r\n                            <Box align={\"center\"} style={{ width: \"10%\" }}>\r\n                                {authUser.role.index ? <Button size={\"small\"}\r\n                                    variant={\"outlined\"}\r\n                                    style={{ color: red[400] }}\r\n                                    onClick={() => handleOpenRemoveSettingModal(item)}\r\n                                >삭제</Button> : \r\n                                <Button size={\"small\"}\r\n                                    variant={\"outlined\"}\r\n                                    style={{ color: red[400] }}\r\n                                    disabled\r\n                                >삭제</Button>}\r\n                                \r\n                            </Box>\r\n                        </Box>\r\n                        ))}\r\n                </ReactDragListView>\r\n\r\n                {/* <Table className={classes.table}>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align={\"center\"}>아이디</TableCell>\r\n                            <TableCell align={\"center\"}>이름</TableCell>\r\n                            <TableCell align={\"center\"}>타입</TableCell>\r\n                            <TableCell align={\"center\"}>대/소문자무시</TableCell>\r\n                            <TableCell align={\"center\"}>토큰타입</TableCell>\r\n                            <TableCell align={\"center\"}>필드(아이디)</TableCell>\r\n                            <TableCell align={\"center\"}>필드(키워드)</TableCell>\r\n                            <TableCell align={\"center\"}>필드(값)</TableCell>\r\n                            <TableCell align={\"center\"}>삭제</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {\r\n                            settings.length === 0 ?\r\n                                <TableRow>\r\n                                    <TableCell colSpan={11} align={\"center\"}>\r\n                                        등록된 사전이 없습니다.\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                :\r\n                                settings.map((setting, index) => {\r\n                                    return (\r\n                                        <TableRow key={index}>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['id']}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['name']}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['type']}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['ignoreCase'] ? \"true\" : \"false\"}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['tokenType']}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['columns'].filter(c => c['type'] === 'id').map(c => c['label']).join(\"\")}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['columns'].filter(c => c['type'] === 'keyword').map(c => c['label']).join(\"\")}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Box>{setting['columns'].filter(c => c['type'] === 'value').map(c => c['label']).join(\"\")}</Box>\r\n                                            </TableCell>\r\n                                            <TableCell align={\"center\"}>\r\n                                                <Button size={\"small\"}\r\n                                                    variant={\"outlined\"}\r\n                                                    style={{ color: red[400] }}\r\n                                                    onClick={() => handleOpenRemoveSettingModal(setting)}\r\n                                                >삭제</Button>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })\r\n                        }\r\n                    </TableBody>\r\n                </Table> */}\r\n            </TableContainer>\r\n            <Dialog open={openEditDictModal}\r\n                fullWidth\r\n                fullScreen={fullScreen}\r\n                onClose={() => setOpenEditDictModal(false)}\r\n            >\r\n                <DialogTitle>\r\n                    사전 추가\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <Box>\r\n                        <Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{ alignItems: \"center\", justifyContent: \"center\", display: \"flex\" }}>\r\n                                        아이디\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <TextField fullWidth={true}\r\n                                            autoFocus={true}\r\n                                            placeholder={\"Synonym\"}\r\n                                            inputRef={dictId}\r\n                                            // value={newDictSetting[\"id\"]}\r\n                                            // onChange={e => setNewDictSetting({ ...newDictSetting, id: e.target.value })}\r\n                                            error={errorNewDictSetting['id']}\r\n                                            helperText={errorNewDictSetting['id'] || \"\"}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{ alignItems: \"center\", justifyContent: \"center\", display: \"flex\" }}>\r\n                                        이름\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <TextField fullWidth={true}\r\n                                            placeholder={\"동의어 사전\"}\r\n                                            inputRef={dictName}\r\n                                            // value={newDictSetting[\"name\"]}\r\n                                            // onChange={e => setNewDictSetting({ ...newDictSetting, name: e.target.value })}\r\n                                            error={errorNewDictSetting['name']}\r\n                                            helperText={errorNewDictSetting['name'] || \"\"}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{ alignItems: \"center\", justifyContent: \"center\", display: \"flex\" }}>\r\n                                        타입\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <FormControl className={classes.select} fullWidth={true}>\r\n                                            <Select placeholder={\"SYNONYM\"}\r\n                                                value={newDictSetting[\"type\"]}\r\n                                                onChange={e => {\r\n                                                    setNewDictSetting({\r\n                                                        ...newDictSetting,\r\n                                                        column_id: \"\",\r\n                                                        column_keyword: \"\",\r\n                                                        column_value: \"\",\r\n                                                        type: e.target.value,\r\n                                                    })\r\n                                                }}\r\n                                                error={errorNewDictSetting['type']}\r\n                                            >\r\n                                                <MenuItem value={\"\"} disabled={true} >선택하세요.</MenuItem>\r\n                                                <MenuItem value={\"SET\"}>SET</MenuItem>\r\n                                                <MenuItem value={\"SYNONYM\"}>SYNONYM</MenuItem>\r\n                                                <MenuItem value={\"SPACE\"}>SPACE</MenuItem>\r\n                                                <MenuItem value={\"COMPOUND\"}>COMPOUND</MenuItem>\r\n                                                <MenuItem value={\"SYNONYM_2WAY\"}>SYNONYM_2WAY</MenuItem>\r\n                                                <MenuItem value={\"CUSTOM\"}>CUSTOM</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{ alignItems: \"center\", justifyContent: \"center\", display: \"flex\" }}>\r\n                                        토큰 타입\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <FormControl className={classes.select} fullWidth={true}>\r\n                                            <Select placeholder={\"MAX\"}\r\n                                                value={newDictSetting[\"tokenType\"]}\r\n                                                onChange={e => {\r\n                                                    setNewDictSetting({ ...newDictSetting, tokenType: e.target.value })}\r\n                                                }\r\n                                                error={errorNewDictSetting['tokenType']}\r\n                                            >\r\n                                                <MenuItem value={\"\"} disabled={true} >선택하세요.</MenuItem>\r\n                                                <MenuItem value={\"MAX\"}>MAX</MenuItem>\r\n                                                <MenuItem value={\"MIN\"}>MIN</MenuItem>\r\n                                                <MenuItem value={\"MID\"}>MID</MenuItem>\r\n                                                <MenuItem value={\"HIGH\"}>HIGH</MenuItem>\r\n                                                <MenuItem value={\"NONE\"}>NONE</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{ alignItems: \"center\", justifyContent: \"center\", display: \"flex\" }}>\r\n                                        대/소문자 무시\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <FormControl className={classes.select} fullWidth={true}>\r\n                                            <Select value={newDictSetting[\"ignoreCase\"]}\r\n                                                onChange={e => {\r\n                                                        setNewDictSetting({ ...newDictSetting, ignoreCase: e.target.value })\r\n                                                    }\r\n                                                }\r\n                                                error={errorNewDictSetting['ignoreCase']}\r\n                                            >\r\n                                                <MenuItem value={\"\"} disabled={true} >선택하세요.</MenuItem>\r\n                                                <MenuItem value={\"true\"}>true</MenuItem>\r\n                                                <MenuItem value={\"false\"}>false</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n\r\n                            <Box my={3}>\r\n                                <Grid container>\r\n                                    <Grid item xs={3} style={{ alignItems: \"center\", justifyContent: \"center\", display: \"flex\" }}>\r\n                                        필드\r\n                                    </Grid>\r\n                                    <Grid item xs={9}>\r\n                                        <Box my={3}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} style={{ alignItems: \"center\", justifyContent: \"center\", display: \"flex\" }}>\r\n                                                    아이디\r\n                                                </Grid>\r\n                                                <Grid item xs={9}>\r\n                                                    <TextField fullWidth={true}\r\n                                                        inputRef={dictColumn_id}\r\n                                                        // value={newDictSetting[\"column_id\"]}\r\n                                                        // onChange={e => setNewDictSetting({ ...newDictSetting, column_id: e.target.value })}\r\n                                                        placeholder={\"\"}\r\n                                                        style={{ backgroundColor: ![\"CUSTOM\"].includes(newDictSetting['type']) ? \"#bdbdbd\" : null }}\r\n                                                        disabled={![\"CUSTOM\"].includes(newDictSetting['type'])}\r\n                                                        error={errorNewDictSetting[\"columns_id\"]}\r\n                                                        helperText={errorNewDictSetting[\"column_id\"] || \"\"}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Box>\r\n\r\n                                        <Box my={3}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} style={{ alignItems: \"center\", justifyContent: \"center\", display: \"flex\" }}>\r\n                                                    키워드\r\n                                                </Grid>\r\n                                                <Grid item xs={9}>\r\n                                                    <TextField fullWidth={true}\r\n                                                        placeholder={\"\"}\r\n                                                        inputRef={dictColumn_keyword}\r\n                                                        // value={newDictSetting[\"column_keyword\"]}\r\n                                                        // onChange={e => setNewDictSetting({ ...newDictSetting, column_keyword: e.target.value })}\r\n                                                        style={{ backgroundColor: ![\"SET\", \"SYNONYM\", \"SPACE\", \"COMPOUND\", \"CUSTOM\"].includes(newDictSetting['type']) ? \"#bdbdbd\" : null }}\r\n                                                        disabled={![\"SET\", \"SYNONYM\", \"SPACE\", \"COMPOUND\", \"CUSTOM\"].includes(newDictSetting['type'])}\r\n                                                        error={errorNewDictSetting[\"column_keyword\"]}\r\n                                                        helperText={errorNewDictSetting[\"column_keyword\"] || \"\"}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Box>\r\n\r\n                                        <Box my={3}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={3} style={{ alignItems: \"center\", justifyContent: \"center\", display: \"flex\" }}>\r\n                                                    값\r\n                                                </Grid>\r\n                                                <Grid item xs={9}>\r\n                                                    <TextField fullWidth={true}\r\n                                                        placeholder={\"\"}\r\n                                                        inputRef={dictColumn_value}\r\n                                                        // value={newDictSetting[\"column_value\"]}\r\n                                                        // onChange={e => setNewDictSetting({ ...newDictSetting, column_value: e.target.value })}\r\n                                                        style={{ backgroundColor: ![\"SYNONYM\", \"COMPOUND\", \"SYNONYM_2WAY\", \"CUSTOM\"].includes(newDictSetting['type']) ? \"#bdbdbd\" : null }}\r\n                                                        disabled={![\"SYNONYM\", \"COMPOUND\", \"SYNONYM_2WAY\", \"CUSTOM\"].includes(newDictSetting['type'])}\r\n                                                        error={errorNewDictSetting[\"column_value\"]}\r\n                                                        helperText={errorNewDictSetting[\"column_value\"] || \"\"}\r\n                                                    />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Box>\r\n\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Box>\r\n                        </Box>\r\n                    </Box>\r\n\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Box mx={3}>\r\n                        <Button variant=\"contained\"\r\n                            color={\"primary\"}\r\n                            style={{ marginRight: \"5px\" }}\r\n                            onClick={handleAddSetting}\r\n                        >추가</Button>\r\n                        <Button variant={\"outlined\"}\r\n                            onClick={() => setOpenEditDictModal(false)}\r\n                            style={{ marginLeft: \"5px\" }}\r\n                        >닫기</Button>\r\n                    </Box>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n\r\n            <Dialog open={openRemoveDictModal}\r\n                fullWidth\r\n                fullScreen={fullScreen}\r\n                onClose={() => setOpenRemoveDictModal(false)}\r\n            >\r\n                <DialogTitle>\r\n                    사전 삭제\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {selectedSetting['name'] || ''} 사전을 삭제하시겠습니까?\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant=\"contained\"\r\n                        color={\"primary\"}\r\n                        onClick={handleRemoveDictionarySetting}\r\n                    >삭제</Button>\r\n                    <Button variant={\"outlined\"}\r\n                        onClick={() => setOpenRemoveDictModal(false)}\r\n                    >취소</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    settings: store.dictionaryReducers.settings,\r\n    active: store.dictionaryReducers.active\r\n}))(Settings);","import React, {useEffect} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport Async from '~/components/Async';\r\n\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\nimport {Box, Button, Divider as MuiDivider, Grid, Typography,} from \"@material-ui/core\";\r\nimport AntTabs from \"~/components/AntTabs\"\r\nimport {spacing} from \"@material-ui/system\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport {setActiveSettingIndex, setSettings, setRemoteCluster} from \"../../../redux/actions/dictionaryActions\";\r\nimport Settings from \"./Settings\"\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst firstTabs = [\r\n    {icon: (<SearchIcon/>), component: Async(() => import(\"./Search\"), { time: 0 })},\r\n    {label: \"개요\", component: Async(() => import(\"./Summary\"))},\r\n]\r\n    \r\nfunction Dictionary({dispatch, authUser, settings, active, totalCount}) {\r\n    const [openSettings, setOpenSettings] = React.useState(false)\r\n    const [remote, setRemote] = React.useState({})\r\n    let dictTabs = firstTabs.concat(\r\n        settings.map(dictionary => ({label: dictionary.name, component: Async(() =>  import(\"./WrapperTabPanel\") )}))\r\n    )\r\n\r\n    useEffect(() => {\r\n        dispatch(setSettings())\r\n        dispatch(setRemoteCluster()).then(body => {setRemote(body)})\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleTabChange(index) {\r\n        dispatch(setActiveSettingIndex(index - firstTabs.length))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet title={`사전`}/>\r\n\r\n            <Grid container>\r\n                <Grid item xs={10}>\r\n                    <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                        사전 {openSettings ? \"설정\" : \"\"}\r\n                    </Typography>\r\n                    <Box style={{fontSize: \"0.9em\"}} mt={3}>\r\n                        {\r\n                            remote['remote'] && remote['remote'] === true ? `사전소스정보: ${remote['host']||\"\"}:${remote['port']||\"\"}` : \"\"\r\n                        }\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item xs={2}>\r\n                    <Box align={\"right\"}>\r\n                        <Button color={\"primary\"} variant={\"outlined\"} onClick={() => setOpenSettings(!openSettings)}>\r\n                            {\r\n                                openSettings ?\r\n                                    \"닫기\"\r\n                                    :\r\n                                    \"설정\"\r\n                            }\r\n                        </Button >\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Divider my={6}/>\r\n\r\n            {\r\n                openSettings ?\r\n                    <Settings />\r\n                    :\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <AntTabs authUser={authUser} tabs={dictTabs} tabIndex={active} onChange={handleTabChange}/>\r\n                        </Grid>\r\n                    </Grid>\r\n            }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    settings: store.dictionaryReducers.settings, \r\n    active: store.dictionaryReducers.active }))(Dictionary);","// React components\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n// Material components\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Box as MuiBox, Divider as MuiDivider, Tab as AntTab, Tabs, Typography} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport {spacing} from \"@material-ui/system\";\r\n\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         width: '100%',\r\n//         backgroundColor: theme.palette.background.paper\r\n//     },\r\n//     indicator: {\r\n//         backgroundColor: '#1890ff',\r\n//     },\r\n// }));\r\n\r\nconst Tab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(2),\r\n        '&:hover': {\r\n            color: '#40a9ff',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#1890ff',\r\n            fontWeight: theme.typography.fontWeightMedium,\r\n        },\r\n        '&:focus': {\r\n            color: '#40a9ff',\r\n        },\r\n    },\r\n    selected: {},\r\n}), {index: 1})((props) => <AntTab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {key, children, value, index} = props;\r\n    return (\r\n        <Typography\r\n            key={key}\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n        >\r\n            {value === index && <Box >\r\n                <children key={key} />\r\n            </Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    key: PropTypes.any,\r\n    children: PropTypes.node,\r\n    index: PropTypes.any,\r\n    value: PropTypes.any,\r\n};\r\n\r\n\r\n\r\nfunction AntTabs({tabs, tabIndex = 0, onChange}) {\r\n    const [state, setState] = React.useState({tabIndex: tabIndex});\r\n    const handleChange = (event, tabIndex) => {\r\n        setState({\r\n            tabIndex: tabIndex\r\n        })\r\n        if (typeof onChange === 'function') {\r\n            onChange(tabIndex)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tabs value={state.tabIndex}\r\n                  onChange={handleChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n            >\r\n                {tabs.map((tab, index) => <Tab key={index} id={index} icon={tab.icon} label={tab.label || \"\"} />)}\r\n            </Tabs>\r\n            <Divider />\r\n            {tabs.map((Tab, index) => {\r\n                return (\r\n                    <Box key={index}\r\n                          role=\"tabpanel\"\r\n                          hidden={state.tabIndex !== index}\r\n                          id={`scrollable-auto-tabpanel-${index}`}\r\n                          aria-labelledby={`scrollable-auto-tab-${index}`}>\r\n                        {index === state.tabIndex && Tab.component && <Box> <Tab.component tabs={Tab}/> </Box>}\r\n                    </Box>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AntTabs;","import Client from '~/Client'\r\nimport * as types from \"../constants\";\r\n\r\nconst client = new Client()\r\n\r\n\r\n\r\nexport const setActiveSettingIndex = (activeIndex) => dispatch => dispatch({type: types.SET_ACTIVE_SETTING_INDEX, payload: activeIndex})\r\n\r\nexport const setSettings = () => dispatch =>\r\n    client.call({\r\n        uri: `/dictionaries/settings`\r\n    })\r\n        .then(response => {\r\n                let settings = response.data;\r\n                dispatch({type: types.SET_SETTING_DICTIONARIES, payload: settings.sort((a, b)=> a.index - b.index)})\r\n\r\n                //원본\r\n                // dispatch({type: types.SET_SETTING_DICTIONARIES, payload: response.data})\r\n            }\r\n        )\r\n        .catch(error => console.error(error))\r\n\r\nexport const updatedSettingList = (newSettings) => dispatch =>  client.call({\r\n    uri: `/dictionaries/settings/updateList`,\r\n    method: \"POST\",\r\n    data: newSettings\r\n}).then((response)=>{\r\n    // console.log(response)\r\n}).catch((err) => {\r\n    console.log(err)\r\n});\r\n\r\nexport const setDictionary = (dictionary, pageNum, rowSize, isMatch, value, searchColumns) => dispatch =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}`,\r\n        params: {pageNum, rowSize, isMatch, value, searchColumns}\r\n    })\r\n        .then(response => dispatch({type: types.SET_DICTIONARY_DATASET, dictionary: dictionary, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const downloadDictionary = (dictionary) =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}/download`,\r\n        responseType: 'blob'\r\n    })\r\n        .then(response => {\r\n            const link = document.createElement('a');\r\n            link.href = window.URL.createObjectURL(new Blob([response.data], {\r\n                type: response.headers['content-type']\r\n            }));\r\n            link.setAttribute('download', `${dictionary}.txt`);\r\n            document.body.appendChild(link);\r\n            link.click();\r\n        })\r\n\r\nexport const deleteDictionary = (dictionary, id) =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}/${id}`,\r\n        method: \"DELETE\"\r\n    })\r\n\r\nexport const createDictionary = (dictionary, data) =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}`,\r\n        method: \"POST\",\r\n        data: data\r\n    })\r\n        .then(response => {\r\n            // console.log(response)\r\n        })\r\n        .catch(error => console.error(error))\r\n\r\nexport const updateDictionary = (dictionary, id, data) =>\r\n    client.call({\r\n        uri: `/dictionaries/${dictionary}/${id}`,\r\n        method: \"PUT\",\r\n        data: data\r\n    })\r\n        .then(response => {\r\n            // console.log(response)\r\n        })\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const searchDictionaries = (data) => dispatch => client.call({\r\n    uri: \"/dictionaries/find-dict\",\r\n    method: \"POST\",\r\n    data: data\r\n}).then(response => dispatch({type: types.SET_DICTIONARY_SEARCH_LIST , payload: response.data}))\r\n\r\nexport const setSummary = () => dispatch => client.call({\r\n    uri: \"/dictionaries/summary\",\r\n}).then(response => dispatch({type: types.SET_SUMMARY , payload: response.data}))\r\n\r\n\r\nexport const applyDictionary = (data) => dispatch => client.call({\r\n    uri: \"/dictionaries/compile-dict\",\r\n    method: \"POST\",\r\n    data: data\r\n}).then(response => dispatch({type: types.SET_DICTIONARY, payload: response.data}))\r\n\r\nexport const setAddDictionarySetting = ({id, name, type, tokenType, ignoreCase, columns_id, columns_keyword, columns_value}) => dispatch => client.call({\r\n    uri: \"/dictionaries/settings\",\r\n    method: \"POST\",\r\n    data: {\r\n        id, name, type, tokenType, ignoreCase,\r\n        columns: [\r\n            columns_id.length > 0 ? {\r\n                    type: \"id\",\r\n                    label: columns_id\r\n                }\r\n                :\r\n                null,\r\n            columns_keyword.length > 0 ? {\r\n                    type: \"keyword\",\r\n                    label: columns_keyword\r\n                }\r\n                :\r\n                null,\r\n            columns_value.length > 0 ? {\r\n                    type: \"value\",\r\n                    label: columns_value\r\n                }\r\n                :\r\n                null,\r\n        ]\r\n    }\r\n}).then(response => response.data)\r\n\r\nexport const removeDictionarySetting = id => dispatch => client.call({\r\n    uri: \"/dictionaries/settings/\" + id,\r\n    method: \"DELETE\"\r\n}).then(response => response.data)\r\n\r\nexport const setRemoteCluster = () => dispatch =>\r\n    client.call({\r\n        uri: `/dictionaries/remote`\r\n    })\r\n        .then(response => response.data)\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const sendFile = (fd) => dispatch => client.call({\r\n     uri: `/dictionaries/fileUpload`, \r\n     method: \"POST\", \r\n     data: fd,\r\n     headers: {\r\n        \"Content-type\": \"multipart/form-data\",\r\n     }\r\n    })\r\n\r\n\r\nexport const resetDict = (fd) => dispatch => client.call({\r\n        uri: `/dictionaries/resetDict`, \r\n        method: \"POST\", \r\n        data: fd,\r\n    })"],"sourceRoot":""}
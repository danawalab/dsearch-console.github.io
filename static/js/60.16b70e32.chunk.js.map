{"version":3,"sources":["pages/analysis/dictionary/Summary.js","utils.js"],"names":["systemInfo","isEmpty","param","Object","keys","length","connect","store","authUser","dsearchReducers","summary","dictionaryReducers","update","dispatch","useState","applyDict","setApplyDict","progress","setProgress","disabled","setDisabled","tableInfo","setTableInfo","checkedAllList","setCheckedAllList","checkedAll","setCheckedAll","disabledApplyButton","list","flag","useEffect","setSummary","undefined","dictionaryInfo","dictionarySettings","infoDict","JSON","parse","dictionary","settings","i","type","info","name","push","j","id","count","words","indexCount","makeTableInfo","handleCheckBox","event","documentId","checked","target","value","tmpCheckedAllList","key","Fragment","role","analysis","variant","color","onClick","data","str","ids","applyDictionary","then","utils","sleep","open","autoHideDuration","onClose","elevation","severity","control","onChange","map","index","checkedList","defaultChecked","Number","toLocaleString","updatedTime","Date","appliedTime","tokenType","ignoreCase","ms","Promise","resolve","setTimeout"],"mappings":"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","file":"static/js/60.16b70e32.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    CircularProgress,\r\n    Snackbar,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,FormControl,\r\n    FormControlLabel,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { applyDictionary, setSummary } from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\n\r\nconst systemInfo = {\r\n    type: \"SYSTEM\",\r\n    name: \"시스템 사전\"\r\n}\r\n\r\nfunction makeTableInfo(summary){\r\n    let tableInfo = [];\r\n\r\n    if (summary.dictionaryInfo === undefined || summary.dictionarySettings === undefined) return tableInfo;\r\n\r\n    let infoDict = JSON.parse(summary.dictionaryInfo).dictionary;\r\n    let settings = summary.dictionarySettings;\r\n\r\n    for (let i in infoDict) {\r\n        if (infoDict[i].type === systemInfo.type) {\r\n            var info = infoDict[i];\r\n            info.name = systemInfo.name;\r\n            tableInfo.push(info);\r\n            break;\r\n        }\r\n    }\r\n\r\n    for (let i in settings) {\r\n        let info = settings[i];\r\n        for (var j in infoDict) {\r\n            if (settings[i].id === infoDict[j].type) {\r\n                info.count = infoDict[j].count;\r\n                info.words = infoDict[j].words;\r\n                info.indexCount = infoDict[j].indexCount;\r\n                break;\r\n            }\r\n        }\r\n\r\n        tableInfo.push(info);\r\n    }\r\n\r\n    return tableInfo;\r\n}\r\n\r\nfunction isEmpty(param) {\r\n    return Object.keys(param).length === 0;\r\n  }\r\n\r\nfunction Summary({ dispatch, authUser, summary, update }) {\r\n    const [applyDict, setApplyDict] = useState(false);\r\n    const [progress, setProgress] = useState(false);\r\n    const [disabled, setDisabled] = useState(true);\r\n\r\n    const [tableInfo, setTableInfo] = useState([]);\r\n\r\n    // checkedAllList[type] = [documentId, checked]\r\n    const [checkedAllList, setCheckedAllList] = useState({});\r\n    const [checkedAll, setCheckedAll] = useState(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(setSummary())\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    if(isEmpty(tableInfo) && !isEmpty(summary)){\r\n        setTableInfo(makeTableInfo(summary))\r\n    }\r\n\r\n    const clickApplyDictionary = (event) => {\r\n        let data = {};\r\n        let str = \"\";\r\n        let ids = \"\";\r\n\r\n        setProgress(true);\r\n\r\n        let keyList = Object.keys(checkedAllList);\r\n        // checkedAllList[type] = [documentId, checked]\r\n        for (let key of keyList) {\r\n            let list = checkedAllList[key];\r\n            if(list[1]){\r\n                if (str.length === 0) {\r\n                    str = key;\r\n                    ids = list[0];\r\n                } else {\r\n                    str += \",\" + key;\r\n                    ids += \",\" + list[0];\r\n                }    \r\n            }\r\n        }\r\n        data.ids = ids;\r\n        data.type = str;\r\n\r\n        dispatch(applyDictionary(data)).then(() => { \r\n            setApplyDict(true); \r\n            setProgress(false); \r\n\r\n            utils.sleep(1000).then(() => { \r\n                dispatch(setSummary()) \r\n            }); \r\n        });\r\n    }\r\n\r\n    function disabledApplyButton(list) {\r\n        let flag = true;\r\n        let keyList = Object.keys(list);\r\n        for (let key of keyList) {\r\n            let cList = list[key];\r\n            if (cList[1]) {\r\n                flag = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        setDisabled(flag);\r\n    }\r\n\r\n    function handleCheckBoxClickAll(event) {\r\n        let tmpCheckedAllList = {};\r\n        \r\n        tableInfo.map((info) => {\r\n            let documentId = info['documentId']\r\n            let id = info['id']\r\n            if( documentId != undefined ){\r\n                tmpCheckedAllList[id] = [documentId, event.target.checked]\r\n            }\r\n        })\r\n\r\n        disabledApplyButton(tmpCheckedAllList)\r\n        setCheckedAllList(tmpCheckedAllList)\r\n        setCheckedAll(event.target.checked)\r\n    }\r\n\r\n    const handleCheckBox = (event, documentId) => {\r\n        let checked = event.target.checked\r\n        let value = event.target.value\r\n        let tmpCheckedAllList = {}\r\n\r\n        let keyList = Object.keys(checkedAllList);\r\n        for (let key of keyList) {\r\n            tmpCheckedAllList[key] = checkedAllList[key];\r\n        }\r\n\r\n        tmpCheckedAllList[value] = [documentId, checked];\r\n        disabledApplyButton(tmpCheckedAllList)\r\n        setCheckedAllList(tmpCheckedAllList)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br />\r\n            <Card>\r\n                <CardContent>\r\n                    <Box>\r\n                        {authUser.role.analysis ?\r\n                            progress ? <CircularProgress /> : <Button disabled={disabled} variant={\"contained\"} color={\"primary\"} onClick={clickApplyDictionary}>사전적용</Button>\r\n                            : <></>}\r\n                        {/* <label style={{marginLeft: \"4px\", marginTop: \"2px\"}}>(사전 적용은 시간이 오래 걸립니다.)</label> */}\r\n                    </Box>\r\n                    <Box>\r\n                        <Snackbar open={applyDict} autoHideDuration={5000} onClose={() => { setApplyDict(false) }}>\r\n                            <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> 사전 적용 성공 </MuiAlert>\r\n                        </Snackbar>\r\n                        <Table>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    {/* <TableCell>#</TableCell> */}\r\n                                    <TableCell>\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox />}\r\n                                            onChange={handleCheckBoxClickAll}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell>이름</TableCell>\r\n                                    <TableCell>타업</TableCell>\r\n                                    <TableCell>작업단어갯수</TableCell>\r\n                                    <TableCell>수정시간</TableCell>\r\n                                    <TableCell>적용단어갯수</TableCell>\r\n                                    <TableCell>적용시간</TableCell>\r\n                                    <TableCell>토큰타입</TableCell>\r\n                                    <TableCell>대소문자무시</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {\r\n                                    tableInfo.map((info, index) => {\r\n                                        let key = info.id;\r\n                                        let checkedList = checkedAllList[key];\r\n                                        return <TableRow key={index}>\r\n                                             <TableCell>\r\n                                            {\r\n                                                checkedAll ? \r\n                                                    info.type === systemInfo.type ? <></> : \r\n                                                        <FormControlLabel\r\n                                                                control={<Checkbox />}\r\n                                                                checked={checkedList == undefined ? false : checkedList[1]}\r\n                                                                onChange={(event) => handleCheckBox(event, info.documentId)}\r\n                                                                id={info.documentId} \r\n                                                                name={\"checkbox\"} \r\n                                                                value={info.id} \r\n                                                                defaultChecked={true}\r\n                                                        />\r\n                                                    : info.type === systemInfo.type ? <></> : \r\n                                                        <FormControlLabel\r\n                                                                control={<Checkbox />}\r\n                                                                checked={checkedList == undefined ? false : checkedList[1]}\r\n                                                                onChange={(event) => handleCheckBox(event, info.documentId)}\r\n                                                                id={info.documentId} name={\"checkbox\"} value={info.id}\r\n                                                        />\r\n                                            }\r\n                                            </TableCell>\r\n                                            <TableCell>{info.name}</TableCell>\r\n                                            <TableCell>{info.type}</TableCell>\r\n                                            <TableCell>{info.indexCount ? Number(info.indexCount).toLocaleString() : \"0\"}</TableCell>\r\n                                            <TableCell> {info.updatedTime ? new Date(info.updatedTime).toLocaleString() : \"-\"} </TableCell>\r\n                                            <TableCell>{Number(info.count).toLocaleString()}</TableCell>\r\n                                            <TableCell> {info.appliedTime ? new Date(info.appliedTime).toLocaleString() : \"-\"} </TableCell>\r\n                                            <TableCell> {info.tokenType ? info.tokenType : \"-\"} </TableCell>\r\n                                            <TableCell> {info.ignoreCase ? info.ignoreCase ? \"Y\" : \"N\" : \"-\"} </TableCell>\r\n                                        </TableRow>\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    summary: store.dictionaryReducers.summary,\r\n    update: store.dictionaryReducers.update\r\n}))(Summary)","const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils"],"sourceRoot":""}
{"version":3,"sources":["pages/indices/collection/ControlBox.js","pages/indices/collection/Source.js"],"names":["Box","styled","MuiBox","spacing","positions","Button","MuiButton","Grid","MuiGrid","timer","connect","store","authUser","dsearchReducers","collectionReducers","dispatch","collection","job","React","useState","actionOpen","setActionOpen","actionAnchorRef","useRef","connected","setConnected","processUI","setProcessUI","errorSnackbar","setErrorSnackbar","errorMessage","setErrorMessage","isRunningJob","useEffect","setCollection","clearTimeout","err","setTimeout","fetchJob","setCollectionJob","then","catch","error","handleClose","event","current","contains","target","handleAction","action","editCollectionAction","response","console","log","container","my","ml","item","xs","mt","style","alignSelf","CircularProgress","m","color","fontWeight","height","options","Fragment","Switch","onChange","checked","editCollectionScheduleAction","disabled","role","index","display","ButtonGroup","variant","ref","width","minWidth","maxWidth","size","onClick","prevOpen","Popper","open","anchorEl","undefined","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","MenuList","id","map","option","MenuItem","key","handleMenuItemClick","Alert","iconMapping","success","fontSize","severity","info","border","LinearProgress","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","message","Typography","MuiTypography","Card","MuiCard","useStyles","makeStyles","theme","formControl","root","flexGrow","edit","typography","padding","TEMPLATE_LIST","TEMPLATE","NO_SELECTED","jdbcReducers","clusterReducers","JdbcList","classes","editModal","setEditModal","mode","setMode","setAnchorEl","setOpen","cronCount","setCronCount","cronMessage","setCronMessage","templateValue","setTemplateValue","launcherYaml","setLauncherYaml","scheme","setScheme","jdbcId","setJdbcId","isExtIndexer","setExtIndexer","esScheme","setEsScheme","invalid","setInvalid","aceEditor","newSourceName","value","newHost","newPort","newCron","newCron2","newCron3","newCron4","newCron5","newEsHost","newEsPort","newEsUser","newEsPassword","toggleEditModal","currentTarget","editor","setValue","cron_list","split","forEach","element","length","clearSelection","handleClick","newPlacement","prev","jdbcHitList","sourceAsMap","name","useJdbcList","filter","jdbcObj","view_cron","CardContent","align","mx","Table","TableBody","TableRow","TableCell","component","Link","cursor","sourceName","host","port","esHost","esPort","esUser","esPassword","invalidCheck","trim","isValidCron","cron_merge","Object","keys","editCollectionSourceAction","cron","extIndexer","launcher","yaml","getValue","alert","p","TextField","inputRef","fullWidth","alignItems","justifyContent","marginBottom","FormControl","InputLabel","Select","labelId","i","tabSize","placeholder","setOptions","useWorker","onMouseOver","onMouseLeave","Boolean","zIndex","Fade","timeout","className","e","type","reason","elevation","Dialog","DialogTitle","DialogContent","DialogActions"],"mappings":"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","file":"static/js/73.1b82a5f5.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    CircularProgress,\r\n    Grid as MuiGrid,\r\n    Grow,\r\n    LinearProgress,\r\n    MenuItem,\r\n    MenuList,\r\n    Paper,\r\n    Popper,\r\n    Snackbar,\r\n    Switch,\r\n} from \"@material-ui/core\";\r\nimport {positions, spacing} from \"@material-ui/system\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport {\r\n    editCollectionAction,\r\n    editCollectionScheduleAction,\r\n    setCollection,\r\n    setCollectionJob\r\n} from \"../../../redux/actions/collectionActions\";\r\nimport {connect} from \"react-redux\";\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\n\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions);\r\nconst Grid = styled(MuiGrid)(spacing, positions);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     formControl: {\r\n//         minWidth: 250,\r\n//     },\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         width: '100%',\r\n//     },\r\n//     edit: {\r\n//         width: '100%'\r\n//     },\r\n//     typography: {\r\n//         padding: theme.spacing(2),\r\n//     },\r\n// }));\r\n\r\n// let testScheduleFlag = true\r\nlet timer = null\r\n\r\n\r\nlet pollingDelay = 2000\r\nfunction ControlBox({dispatch, authUser, collection, job}) {\r\n    const [actionOpen, setActionOpen] = React.useState(false);\r\n    const actionAnchorRef = React.useRef(null);\r\n    const [connected, setConnected] = useState(false)\r\n    const [processUI, setProcessUI] = useState(false)\r\n    const [errorSnackbar, setErrorSnackbar] = useState(false)\r\n    const [errorMessage, setErrorMessage] = useState(\"\")\r\n\r\n    // job이 있을 경우 데이터가 생김..\r\n    const isRunningJob = job['status'] ? true : false\r\n\r\n    // useEffect(() => {\r\n    //     dispatch(setCollection(collection['id']))\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(setCollection(collection['id']))\r\n        \r\n        const fetchJob = () => {\r\n            dispatch(setCollectionJob(collection['id']))\r\n                .then(job => {\r\n                    setConnected(true); \r\n                    if (timer != null) {\r\n                        try {\r\n                            clearTimeout(timer)\r\n                            timer = null\r\n                        } catch(err) {}\r\n                    }\r\n                    timer = setTimeout(fetchJob, pollingDelay)\r\n                })\r\n                .catch(error => {\r\n                    setConnected(false); \r\n                    if (timer != null) {\r\n                        try {\r\n                            clearTimeout(timer)\r\n                            timer = null\r\n                        } catch(err) {}\r\n                    }\r\n                    timer = setTimeout(fetchJob, pollingDelay)\r\n                })\r\n        }\r\n        if (timer != null) {\r\n            try {\r\n                clearTimeout(timer)\r\n                timer = null\r\n            } catch(err) {}\r\n        }\r\n\r\n        timer = setTimeout(() => fetchJob(), 500);\r\n        return () => {\r\n            try {\r\n                clearTimeout(timer)\r\n            } catch(error) {\r\n                // ignore..\r\n            }\r\n        }\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    const handleMenuItemClick = (event, option, index) => {\r\n        if ('연속실행' === option) {\r\n            handleAction('all')\r\n        } else if ('색인실행' === option) {\r\n            handleAction('indexing')\r\n        } else if ('전파실행' === option) {\r\n            handleAction('propagate')\r\n        } else if ('교체실행' === option) {\r\n            handleAction('expose')\r\n        }\r\n        setActionOpen(false);\r\n    };\r\n    const handleToggle = () => {\r\n        setActionOpen((prevOpen) => !prevOpen);\r\n    };\r\n    const handleClose = (event) => {\r\n        if (actionAnchorRef.current && actionAnchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n        setActionOpen(false);\r\n    };\r\n\r\n    function handleEditSchedule(event) {\r\n        setProcessUI(true)\r\n        collection['scheduled'] = event.target.checked;\r\n        dispatch(editCollectionScheduleAction(collection['id'], collection))\r\n            .then(response => {\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 2000)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                setErrorMessage(\"\" + error)\r\n                setErrorSnackbar(true)\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 2000)\r\n            })\r\n    }\r\n    function handleAction(action) {\r\n        setProcessUI(true)\r\n        // actions: all, indexing, propagate, expose, stop_propagation, stop_indexing\r\n        dispatch(editCollectionAction(collection['id'], action))\r\n            .then(response => {\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 4000)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n                setErrorMessage(\"\" + error)\r\n                setErrorSnackbar(true)\r\n                dispatch(setCollection(collection['id']))\r\n                setTimeout(() => {\r\n                    setProcessUI(false)\r\n                }, 4000)\r\n            })\r\n    }\r\n\r\n    function handleErrorSnackbarClose() {\r\n        setErrorSnackbar(false)\r\n    }\r\n\r\n    if (connected === false) {\r\n        return (\r\n            <Grid container my={0} ml={4}>\r\n                <Grid item xs={9} mt={2} style={{alignSelf: \"center\"}}>\r\n                    <Box>\r\n                        연결 중...\r\n                    </Box>\r\n                    <Box>\r\n                        <CircularProgress m={2} color=\"secondary\" />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    if (processUI) {\r\n        return (\r\n            <Grid container my={0} ml={4}>\r\n                <Grid item xs={3} >\r\n                    <Grid container my={3}>\r\n                        <Grid item xs={3} mt={2}>\r\n                            <Box style={{fontWeight: \"bold\"}}>스케쥴</Box>\r\n                        </Grid>\r\n                        <Grid item xs={9}>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container my={3}>\r\n                        <Grid item xs={3} mt={5} style={{height: '37px'}}>\r\n                            <b>상태</b>\r\n                        </Grid>\r\n                        <Grid item xs={9}>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Grid item xs={9} mt={2} style={{alignSelf: \"center\"}}>\r\n                    <Box>\r\n                        <CircularProgress m={2} color=\"secondary\" />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    let options = ['연속실행', '색인실행', '전파실행', '교체실행'];\r\n    // if (typeof collection['ignoreRoleYn'] === \"string\" && collection['ignoreRoleYn'] === \"Y\") {\r\n    //     options = ['연속실행', '색인실행', '교체실행'];\r\n    // }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Grid container my={3} ml={4}>\r\n                <Grid item xs={3} mt={2}>\r\n                    <Box style={{fontWeight: \"bold\"}}>스케쥴</Box>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                    <Switch onChange={handleEditSchedule}\r\n                            checked={collection['scheduled']}\r\n                            disabled={!authUser.role.index}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container my={3} ml={4}>\r\n                <Grid item xs={3} mt={2} style={{height: '40px'}}>\r\n                    <b>상태</b>\r\n                </Grid>\r\n                <Grid item xs={9}>\r\n                    {/* 컨트롤 가능한 상태 */}\r\n                    <Box style={{display: isRunningJob === false && collection['scheduled'] === false ? \"block\" : \"none\"}}>\r\n                        <ButtonGroup variant=\"contained\" color=\"primary\" ref={actionAnchorRef}>\r\n                            <Button disabled={true}\r\n                                    style={{width: '100%', minWidth: \"150px\", maxWidth: \"300px\", color: \"black\"}}\r\n                            >\r\n                                수동 실행\r\n                            </Button>\r\n                            {authUser.role.index ?\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                    onClick={handleToggle}\r\n                                    disabled={!authUser.role.index}\r\n                                >\r\n                                    <ArrowDropDownIcon/>\r\n                                </Button>\r\n                                :\r\n                                <></>\r\n                            }\r\n                        </ButtonGroup>\r\n                        <Popper open={actionOpen} anchorEl={actionAnchorRef.current} role={undefined}\r\n                                transition disablePortal>\r\n                            {({TransitionProps, placement}) => (\r\n                                <Grow\r\n                                    {...TransitionProps}\r\n                                    style={{\r\n                                        transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                                    }}\r\n                                >\r\n                                    <Paper>\r\n                                        <ClickAwayListener onClickAway={handleClose}>\r\n                                            <MenuList id=\"split-button-menu\">\r\n                                                {options.map((option, index) => (\r\n                                                    <MenuItem\r\n                                                        key={option}\r\n                                                        onClick={(event) => handleMenuItemClick(event, option, index)}\r\n                                                    >\r\n                                                        {option}\r\n                                                    </MenuItem>\r\n                                                ))}\r\n                                            </MenuList>\r\n                                        </ClickAwayListener>\r\n                                    </Paper>\r\n                                </Grow>\r\n                            )}\r\n                        </Popper>\r\n                    </Box>\r\n                    <Box style={{\r\n                        display: isRunningJob === false && collection['scheduled'] === true ? \"block\" : \"none\",\r\n                        width: '100%', minWidth: \"150px\", maxWidth: \"400px\", color: \"black\" }}\r\n                    >\r\n                        <Alert iconMapping={{ success: <ScheduleIcon fontSize=\"inherit\" /> }}\r\n                               severity=\"success\"\r\n                               style={{display: isRunningJob ? 'none' : 'flex'}}\r\n                        >스케쥴 대기중</Alert>\r\n                    </Box>\r\n\r\n                    <Box style={{\r\n                        display: (isRunningJob === true && collection['scheduled'] === false) || (isRunningJob === true && collection['scheduled'] === true) ? \"block\" : \"none\",\r\n                        width: '100%', minWidth: \"150px\", maxWidth: \"400px\", color: \"black\" }}\r\n                    >\r\n                        <Box style={{display: job['currentStep'] === 'FULL_INDEX' || job['currentStep'] === 'DYNAMIC_INDEX' ? 'block' : 'none' }}>\r\n                            <Alert iconMapping={{ info: <PlayCircleOutlineIcon fontSize=\"inherit\" style={{alignSelf: \"center\"}}/> }}\r\n                                   severity=\"info\"\r\n                                   action={<Button color=\"inherit\" style={{border: \"1px solid silver\"}} size=\"small\" onClick={() => handleAction('stop_indexing')}> 정지 </Button> }\r\n                            >\r\n                                <LinearProgress/>\r\n                                <Box mt={2}>\r\n                                    색인을 진행하고 있습니다.\r\n                                </Box>\r\n                            </Alert>\r\n                        </Box>\r\n\r\n                        <Box style={{display: job['currentStep'] === 'PROPAGATE' ? 'block' : 'none' }}>\r\n                            <Alert iconMapping={{ info: <PlayCircleOutlineIcon fontSize=\"inherit\" style={{alignSelf: \"center\"}}/> }}\r\n                                   severity=\"info\"\r\n                                   action={<Button color=\"inherit\" style={{border: \"1px solid silver\"}} size=\"small\" onClick={() => handleAction('stop_propagation')}> 취소 </Button> }\r\n                            >\r\n                                <LinearProgress />\r\n                                <Box mt={2}>\r\n                                    전파를 진행하고 있습니다.\r\n                                </Box>\r\n                            </Alert>\r\n                        </Box>\r\n\r\n                        <Box style={{display: job['currentStep'] === 'EXPOSE' ? 'block' : 'none' }}>\r\n                            <Alert iconMapping={{ info: <PlayCircleOutlineIcon fontSize=\"inherit\" /> }}\r\n                                   severity=\"info\"\r\n                            >\r\n                                <LinearProgress />\r\n                                교체를 진행하고 있습니다.\r\n                            </Alert>\r\n                        </Box>\r\n\r\n                    </Box>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Snackbar\r\n                anchorOrigin={{ vertical: 'top', horizontal: 'right'}}\r\n                autoHideDuration={6000}\r\n                open={errorSnackbar}\r\n                onClose={handleErrorSnackbarClose}\r\n                severity=\"error\"\r\n                message={\"요청이 실패되었습니다. \" + errorMessage}\r\n                key={\"errorSnackbar\"}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ authUser: store.dsearchReducers.authUser, ...store.collectionReducers }))(ControlBox);\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Fade,\r\n    FormControl,\r\n    Grid as MuiGrid,\r\n    InputLabel,\r\n    Link,\r\n    MenuItem,\r\n    Paper,\r\n    Popper,\r\n    Select,\r\n    Switch,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n    TextField,\r\n    Typography as MuiTypography,\r\n} from \"@material-ui/core\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {positions, spacing} from \"@material-ui/system\";\r\nimport {connect} from \"react-redux\";\r\nimport {editCollectionSourceAction, setCollection} from \"../../../redux/actions/collectionActions\";\r\nimport {isValidCron} from 'cron-validator'\r\nimport ControlBox from \"./ControlBox\";\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-yaml\";\r\nimport \"ace-builds/src-noconflict/theme-kuroir\";\r\n\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Card = styled(MuiCard)(spacing, positions);\r\nconst Button = styled(MuiButton)(spacing, positions);\r\nconst Grid = styled(MuiGrid)(spacing, positions);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    },\r\n    typography: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}));\r\n\r\nconst TEMPLATE_LIST = [\"multipleDumpFile\", \"ndjson\", \"csv\", \"file\", \"procedure\", \"database\"]\r\nconst TEMPLATE = {\r\n    \"multipleDumpFile\":\r\n`type: \"multipleDumpFile\"\r\npipeLine: \"s-prod-pipeline-v3\"\r\nbulkSize: 1000\r\ndumpFormat: \"konan\"\r\ngroupSeq: \"0,2-3\"\r\nbwlimit: \"10240\"\r\npath: \"/data/indexFile/M/\"\r\nrsyncIp: \"192.168.4.198\"\r\nrsyncPath: \"search_data_alti\"\r\nencoding: \"CP949\"\r\nprocedureSkip: true\r\nrsyncSkip: false\r\nthreadSize: 4`,\r\n\r\n    \"ndjson\" : \r\n`type: ndjson\r\npath: /data/source/search-prod.ndjson\r\nencoding: utf-8\r\nbulkSize: 10000\r\nreset: true\r\nthreadSize: 1`,\r\n\r\n    \"csv\" : \r\n`type: csv\r\npath: /data/source/search-prod.csv\r\nencoding: utf-8\r\nbulkSize: 10000\r\nreset: true\r\nthreadSize: 1`,\r\n\r\n\"file\" : \r\n`type: file\r\npath: /data/source/prodExt_dump\r\nencoding: utf-8\r\nbulkSize: 10000\r\nreset: true\r\nthreadSize: 1\r\nheaderText:\"name,color,price\"\r\ndelimiter: \"^\"`,\r\n\r\n    \"procedure\": \r\n`type: procedure\r\nbulkSize: 1000\r\ndriverClassName: \"Altibase.jdbc.driver.AltibaseDriver\"\r\nfilterClass: \"com.danawa.fastcatx.indexer.filter.DanawaProductFilter\"\r\nurl: \"jdbc:Altibase://localhost:20200/DANAWA_ALTI\"\r\nuser: \"root\"\r\npassword: \"qwerty123456\"\r\nprocedureName: \"procedureName1\"\r\ndumpFormat: \"konan\"\r\ngroupSeq: 1\r\nbwlimit: \"10240\"\r\npath: \"/data/product/VM\"\r\nrsyncIp: \"remote server IP\"\r\nrsyncPath: \"search_data_alti\"\r\nencoding: CP949\r\nprocedureSkip: true\r\nrsyncSkip: true\r\nthreadSize: 1\r\n`,\r\n\r\n    \"database\": \r\n`bulkSize: 10000\r\nfetchSize: 10000\r\ntype: jdbc\r\npipeLine: \"pipeline\"\r\nthreadSize: 1\r\ndataSQL : \"SELECT * FROM myTable\"`\r\n};\r\nconst NO_SELECTED = 'NO_SELECTED';\r\nconst DEFAULT_CRON = '0 0 * * *'\r\n\r\nfunction Source({dispatch, authUser, collection, JdbcList}) {\r\n    const classes = useStyles();\r\n    const [editModal, setEditModal] = useState(null)\r\n    const [mode, setMode] = useState(\"VIEW\")\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const [open, setOpen] = React.useState(null);\r\n    const [placement, setPlacement] = React.useState();\r\n    const [cronCount, setCronCount]= React.useState(0);\r\n    const [cronMessage, setCronMessage]= React.useState(false);\r\n\r\n    const [templateValue, setTemplateValue] = useState(TEMPLATE_LIST[0]);\r\n\r\n    const [launcherYaml, setLauncherYaml] = useState(\"\")\r\n    const [scheme, setScheme] = useState(\"http\")\r\n    const [jdbcId, setJdbcId] = useState(NO_SELECTED)\r\n\r\n    const [isExtIndexer, setExtIndexer] = useState(false);\r\n    const [esScheme, setEsScheme] = useState(\"http\");\r\n    const [invalid, setInvalid] = useState({})\r\n\r\n    const aceEditor = useRef(null)\r\n    \r\n    // 수정 \r\n    const newSourceName =  useRef({value : \"\"})\r\n    const newHost = useRef({value : \"\"})\r\n    const newPort = useRef({value : \"\"})\r\n    const newCron = useRef({value : \"\"})\r\n    const newCron2 = useRef({value : \"\"})\r\n    const newCron3 = useRef({value : \"\"})\r\n    const newCron4 = useRef({value : \"\"})\r\n    const newCron5 = useRef({value : \"\"})\r\n\r\n    const newEsHost = useRef({value : \"\"})\r\n    const newEsPort = useRef({value : \"\"})\r\n    const newEsUser = useRef({value : \"\"})\r\n    const newEsPassword = useRef({value : \"\"})\r\n\r\n    useEffect(() => {\r\n        setInvalid({})\r\n        if (collection['sourceName'] === undefined || collection['sourceName'] === null || collection['sourceName'] === \"\") {\r\n            /* FORCE_EDIT(생성하고 아무런 데이터가 없을 때) 모드일때만 */\r\n            setMode(\"FORCE_EDIT\");\r\n            aceEditor.current.editor.setValue(TEMPLATE[TEMPLATE_LIST[0]]);\r\n        } else {\r\n            setOpen(false)\r\n            newSourceName.current.value = collection['sourceName']\r\n            setScheme((collection['launcher']||{})['scheme']||\"\");\r\n            newHost.current.value = (collection['launcher']||{})['host']||\"\"\r\n            newPort.current.value = (collection['launcher']||{})['port']||\"\"\r\n\r\n            setExtIndexer(collection['extIndexer'])\r\n            setEsScheme(collection['esScheme'])\r\n            newEsHost.current.value = collection['esHost']\r\n            newEsPort.current.value = collection['esPort']\r\n            newEsUser.current.value = collection['esUser']\r\n            newEsPassword.current.value = collection['esPassword']\r\n\r\n            setJdbcId(collection['jdbcId'] === '' ? NO_SELECTED : collection['jdbcId'])\r\n\r\n            newCron.current.value = \"\"\r\n            newCron2.current.value = \"\"\r\n            newCron3.current.value = \"\"\r\n            newCron4.current.value = \"\"\r\n            newCron5.current.value = \"\"\r\n\r\n            let cron_list = collection['cron'].split(\"||\")\r\n            cron_list.forEach((element, index) => {\r\n                if(index == 0) newCron.current.value = element\r\n                else if(index == 1) newCron2.current.value = element\r\n                else if(index == 2) newCron3.current.value = element\r\n                else if(index == 3) newCron4.current.value = element\r\n                else if(index == 4) newCron5.current.value = element\r\n            });\r\n\r\n            setCronCount(cron_list.length);\r\n            setLauncherYaml((collection['launcher']||{})['yaml']||\"\");\r\n            aceEditor.current.editor.setValue((collection['launcher']||{})['yaml']||\"\")\r\n            aceEditor.current.editor.clearSelection()\r\n        }\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    useEffect(() => {\r\n        try {\r\n            if (mode === \"EDIT\") {\r\n                setInvalid({})\r\n                newSourceName.current.value = collection['sourceName']\r\n                newHost.current.value = (collection['launcher']||{})['host']||\"\"\r\n                newPort.current.value = (collection['launcher']||{})['port']||\"\"\r\n                newEsHost.current.value = collection['esHost']\r\n                newEsPort.current.value = collection['esPort']\r\n                newEsUser.current.value = collection['esUser']\r\n                newEsPassword.current.value = collection['esPassword']\r\n\r\n                newCron.current.value = \"\"\r\n                newCron2.current.value = \"\"\r\n                newCron3.current.value = \"\"\r\n                newCron4.current.value = \"\"\r\n                newCron5.current.value = \"\"\r\n\r\n                let cron_list = collection['cron'].split(\"||\")\r\n                setCronCount(cron_list.length);\r\n                cron_list.forEach((element, index) => {\r\n                    if(index == 0) newCron.current.value = element\r\n                    else if(index == 1) newCron2.current.value = element\r\n                    else if(index == 2) newCron3.current.value = element\r\n                    else if(index == 3) newCron4.current.value = element\r\n                    else if(index == 4) newCron5.current.value = element\r\n                });\r\n\r\n                setScheme((collection['launcher']||{})['scheme']||\"\");\r\n                setExtIndexer(collection['extIndexer'])\r\n                setEsScheme(collection['esScheme'])\r\n                setJdbcId(collection['jdbcId'] === '' ? NO_SELECTED : collection['jdbcId'])\r\n                setLauncherYaml((collection['launcher']||{})['yaml']||\"\");\r\n                aceEditor.current.editor.setValue((collection['launcher']||{})['yaml']||\"\")\r\n                aceEditor.current.editor.clearSelection()\r\n            }\r\n        } catch (error) {\r\n            console.log('change ace editor')\r\n        }\r\n    }, [mode]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n\r\n    function toggleEditModal(event) {\r\n        setEditModal(editModal === null ? event.currentTarget : null)\r\n    }\r\n\r\n    const handleClick = (newPlacement) => (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n        setOpen((prev) => placement !== newPlacement || !prev);\r\n        // setPlacement(newPlacement);\r\n    }\r\n\r\n    function handleSaveProcess() {\r\n        let sourceName = newSourceName.current.value\r\n        let host = newHost.current.value\r\n        let port = newPort.current.value\r\n        let esHost = newEsHost.current.value\r\n        let esPort = newEsPort.current.value\r\n        let esUser = newEsUser.current.value\r\n        let esPassword = newEsPassword.current.value\r\n\r\n        setInvalid({})\r\n\r\n        let invalidCheck = {}\r\n        if (sourceName.trim() === \"\") {\r\n            invalidCheck['sourceName'] = true\r\n        }\r\n\r\n        if (isExtIndexer) {\r\n            // || !/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/gi.test(host)\r\n            if (host.trim() === \"\") {\r\n                invalidCheck['host'] = true\r\n            }\r\n            if (port === \"\") {\r\n                invalidCheck['port'] = true\r\n            }\r\n            // || !/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/gi.test(host)\r\n            if (esHost.trim() === \"\") {\r\n                invalidCheck['esHost'] = true\r\n            }\r\n            if (esPort === \"\") {\r\n                invalidCheck['esPort'] = true\r\n            }\r\n        }\r\n\r\n        // 크론 설정 가져오기\r\n        if(!isValidCron(newCron.current.value)){\r\n            invalidCheck['cron'] = true\r\n        }\r\n\r\n        let cron_merge = newCron.current.value \r\n\r\n        if(isValidCron(newCron2.current.value) && cronCount >= 2) {\r\n            if(cron_merge.length == 0){\r\n                cron_merge +=  newCron2.current.value \r\n            }else{\r\n                cron_merge +=  \"||\" + newCron2.current.value \r\n            }\r\n        }else if(newCron2.current.value.length == 0 || cronCount < 2){\r\n            /* ignore */\r\n        }else{\r\n            invalidCheck['cron'] = true\r\n        }\r\n            \r\n        if(isValidCron(newCron3.current.value) && cronCount >= 3) {\r\n            if(cron_merge.length == 0){\r\n                cron_merge += newCron3.current.value \r\n            }else{\r\n                cron_merge +=  \"||\" + newCron3.current.value \r\n            }\r\n        }else if(newCron3.current.value.length == 0|| cronCount < 3){\r\n            /* ignore */\r\n        }else{\r\n            invalidCheck['cron'] = true\r\n        }\r\n            \r\n        if(isValidCron(newCron4.current.value) && cronCount >= 4) {\r\n            if(cron_merge.length == 0){\r\n                cron_merge +=  newCron4.current.value \r\n            }else{\r\n                cron_merge +=  \"||\" + newCron4.current.value \r\n            }\r\n        }else if(newCron4.current.value.length == 0 || cronCount < 4){\r\n            /* ignore */\r\n        }else{\r\n            invalidCheck['cron'] = true\r\n        }\r\n            \r\n        if(isValidCron(newCron5.current.value) && cronCount >= 5) {\r\n            if(cron_merge.length == 0){\r\n                cron_merge +=  newCron5.current.value\r\n            }else{\r\n                cron_merge +=  \"||\" + newCron5.current.value\r\n            }\r\n        }else if(newCron5.current.value.length == 0 || cronCount < 5){\r\n            /* ignore */\r\n        }else{\r\n            invalidCheck['cron'] = true\r\n        }\r\n        \r\n        if(cron_merge.length === 0){\r\n            cron_merge = DEFAULT_CRON\r\n            delete invalidCheck['cron'];\r\n        }\r\n\r\n        if (Object.keys(invalidCheck).length > 0) {\r\n            setInvalid(invalidCheck)\r\n            return false\r\n        }\r\n\r\n        setOpen(false)\r\n        dispatch(editCollectionSourceAction(collection['id'], {\r\n            sourceName,\r\n            // cron: (cron.length === 0 ? DEFAULT_CRON : cron),\r\n            cron: (cron_merge.length === 0 ? DEFAULT_CRON : cron_merge),\r\n            jdbcId: (jdbcId === NO_SELECTED ? '' : jdbcId),\r\n            extIndexer: isExtIndexer,\r\n            esScheme, esHost: esHost.trim(), esPort, esUser: esUser.trim(), esPassword: esPassword.trim(),\r\n            launcher: {\r\n                yaml: aceEditor.current.editor.getValue() || '',\r\n                scheme: isExtIndexer ? scheme : \"http\", host: isExtIndexer ? host.trim() : \"\", port: isExtIndexer ? port : \"\",\r\n            }\r\n        })).then(response => {\r\n            dispatch(setCollection(collection['id']))\r\n            setMode(\"VIEW\")\r\n        }).catch(error => {\r\n            console.log(error)\r\n            alert(error)\r\n        })\r\n    }\r\n\r\n    const handleTemplateValue = (event) => {\r\n        setTemplateValue(event.target.value);\r\n        aceEditor.current.editor.setValue(TEMPLATE[event.target.value]);\r\n    }\r\n\r\n    const handleCronAdd = (event) => {\r\n        if(cronCount == 5){\r\n            if(cronMessage == false)\r\n                setCronMessage(true)\r\n            return;\r\n        }\r\n        setCronCount(cronCount < 5 ? cronCount+1 : 5)\r\n    }\r\n    const handleCronRemove = (event) => {\r\n        setCronCount(cronCount >= 0 ? cronCount-1 : 0)\r\n    }\r\n\r\n    let jdbcHitList = [\r\n        { id: NO_SELECTED, sourceAsMap: {name: '선택안함'} },\r\n        ...((JdbcList['hits']||{})['hits']||[])\r\n    ]\r\n\r\n    let useJdbcList = jdbcHitList.filter(jdbcObj => (collection['jdbcId'] === '' ? NO_SELECTED : collection['jdbcId']) === jdbcObj['id']).map(jdbcObj => jdbcObj['sourceAsMap']['name'])\r\n\r\n    let view_cron = \"\" \r\n    let view_cron_list = collection['cron'].split(\"||\");\r\n    view_cron_list.forEach((element, index) => {\r\n        if(view_cron.length > 0) view_cron += \",  \" + element\r\n        else view_cron = element;\r\n    });\r\n    \r\n    return (\r\n        <React.Fragment>\r\n\r\n            <br/>\r\n\r\n            <Card>\r\n                <CardContent>\r\n                    <Box style={{display: mode === \"VIEW\" ? \"block\" : \"none\"}}>\r\n                        <Grid container>\r\n                            <Grid item xs={10}>\r\n\r\n                                <ControlBox />\r\n\r\n                            </Grid>\r\n                            <Grid item xs={2} align={\"right\"}>\r\n                                {authUser.role.index ? <Button mx={1} variant={\"outlined\"} onClick={() => setMode(\"EDIT\")}>\r\n                                    수정\r\n                                </Button> : <></>}\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Box>\r\n                                    <Table>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>파라미터</TableCell>\r\n                                                <TableCell>\r\n                                                    <Link style={{cursor: \"pointer\"}}\r\n                                                          onClick={toggleEditModal}\r\n                                                    >YAML</Link>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            {\r\n                                                collection['extIndexer'] ?\r\n                                                    <React.Fragment>\r\n                                                        <TableRow>\r\n                                                            <TableCell variant={\"head\"} component={\"th\"}>전용 인덱서</TableCell>\r\n                                                            <TableCell>\r\n                                                                {(collection['launcher']||{})['scheme']||''}://\r\n                                                                {(collection['launcher']||{})['host']||''}:\r\n                                                                {(collection['launcher']||{})['port'] === 0 ? \"\" : (collection['launcher']||{})['port']||''}\r\n                                                            </TableCell>\r\n                                                        </TableRow>\r\n                                                    </React.Fragment>\r\n                                                    :\r\n                                                    <React.Fragment>\r\n                                                        <TableRow>\r\n                                                            <TableCell variant={\"head\"} component={\"th\"}>전용인덱서 정보</TableCell>\r\n                                                            <TableCell> 사용안함 </TableCell>\r\n                                                        </TableRow>\r\n                                                    </React.Fragment>\r\n                                            }\r\n\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>엘라스틱서치 정보</TableCell>\r\n                                                <TableCell>\r\n                                                    {collection['esScheme']||''}://\r\n                                                    {collection['esHost']||''}:\r\n                                                    {collection['esPort']||''}\r\n                                                    {\r\n                                                        collection['esUser'] !== \"\" ?\r\n                                                            <Box component={\"span\"}> (사용자: {collection['esUser']})</Box>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n\r\n\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>JDBC</TableCell>\r\n                                                <TableCell>\r\n                                                    {\r\n                                                        useJdbcList.length === 0 ?\r\n                                                            \"사용안함\"\r\n                                                            :\r\n                                                            useJdbcList[0]\r\n                                                    }\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>크론주기</TableCell>\r\n                                                <TableCell> {view_cron} </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n\r\n\r\n                    {/*======================================= EDIT MODE  ===========================================*/}\r\n\r\n                    <Box style={{display: mode === \"EDIT\" || mode === \"FORCE_EDIT\" ? \"block\" : \"none\"}}>\r\n                        <Grid container>\r\n                            <Grid item xs={8}>\r\n\r\n                            </Grid>\r\n                            <Grid item xs={4} align={\"right\"}>\r\n                                <Button mx={1}\r\n                                        variant={\"outlined\"}\r\n                                        onClick={handleSaveProcess}\r\n                                        style={{display: authUser.role.index ? 'inline' : 'none'}}\r\n                                >\r\n                                    저장\r\n                                </Button>\r\n                                <Button style={{display: authUser.role.index ? mode === 'EDIT' ? \"inline\" : \"none\" : \"none\"}} mx={1}\r\n                                        variant={\"outlined\"}\r\n                                        onClick={() => {setOpen(false); setMode(\"VIEW\"); }}\r\n                                >\r\n                                    취소\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container>\r\n                            <Grid item xs={12}>\r\n                                <Box p={5}>\r\n                                    <Table>\r\n                                        <TableBody>\r\n\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>이름</TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField \r\n                                                        inputRef={newSourceName}\r\n                                                        // 이전\r\n                                                        // value={sourceName}\r\n                                                        // onChange={event => setSourceName(event.target.value)}\r\n                                                        fullWidth\r\n                                                        error={invalid['sourceName']||false}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>파라미터 YAML</TableCell>\r\n                                                <TableCell>\r\n                                                    <Box display=\"flex\" alignItems=\"center\"  justifyContent=\"space-between\" width=\"100%\" marginBottom=\"8px\">\r\n                                                        <div></div>\r\n                                                        <FormControl style={{width: \"200px\"}}>\r\n                                                            <InputLabel id=\"demo-simple-select-label\">수집소스 템플릿</InputLabel>\r\n                                                            <Select\r\n                                                                labelId=\"demo-simple-select-label\"\r\n                                                                id=\"demo-simple-select\"\r\n                                                                value={templateValue}\r\n                                                                onChange={handleTemplateValue}\r\n                                                            >\r\n                                                                {\r\n                                                                    TEMPLATE_LIST.map((item, i) => (<MenuItem key={i} value={item}>{item}</MenuItem>))\r\n                                                                }\r\n                                                            </Select>\r\n                                                        </FormControl>\r\n                                                    </Box>\r\n                                                    <AceEditor\r\n                                                        ref={aceEditor}\r\n                                                        mode=\"yaml\"\r\n                                                        theme=\"kuroir\"\r\n                                                        fontSize=\"15px\"\r\n                                                        height={\"400px\"}\r\n                                                        width=\"100%\"\r\n                                                        tabSize={2}\r\n                                                        placeholder=\"type: 'jdbc'\"\r\n                                                        setOptions={{ useWorker: false }}\r\n                                                        onChange={() => {\r\n                                                            let yaml = aceEditor.current.editor.getValue()\r\n                                                            if (launcherYaml !== yaml) {\r\n                                                                setLauncherYaml(yaml)\r\n                                                            }\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>JDBC</TableCell>\r\n                                                <TableCell>\r\n                                                    <Select value={jdbcId}\r\n                                                            onChange={event => setJdbcId(event.target.value)}\r\n                                                            style={{minWidth: \"100%\"}}\r\n                                                            error={invalid['jdbcId']||false}\r\n                                                    >\r\n                                                        {\r\n                                                            jdbcHitList.map((jdbcObj, index) => {\r\n                                                                return (\r\n                                                                    <MenuItem key={index}\r\n                                                                              value={jdbcObj['id']}\r\n                                                                    >\r\n                                                                        {(jdbcObj['sourceAsMap']||{})['name']||\"\"}\r\n                                                                    </MenuItem>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n                                                    </Select>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>크론주기</TableCell>\r\n                                                <TableCell>\r\n                                                    <Grid container>\r\n                                                        <Grid item xs={10}>\r\n                                                            <Box maxWidth={\"100%\"}>\r\n                                                            <TextField\r\n                                                                inputRef={newCron}\r\n                                                                fullWidth\r\n                                                                placeholder={\"분 시 일 월 요일 (default: 0 0 * * *)\"}\r\n                                                                error={invalid['cron'] || false}\r\n                                                            />\r\n                                                            </Box>\r\n                                                            <Box maxWidth={\"100%\"}>\r\n                                                            <TextField\r\n                                                                inputRef={newCron2}\r\n                                                                style={{ display: cronCount > 1 ? \"\" : \"none\" }}\r\n                                                                fullWidth\r\n                                                                placeholder={\"분 시 일 월 요일 (default: 0 0 * * *)\"}\r\n                                                                error={invalid['cron'] || false} />\r\n                                                            </Box>\r\n                                                            <Box maxWidth={\"100%\"}>\r\n                                                            <TextField\r\n                                                                inputRef={newCron3}\r\n                                                                style={{ display: cronCount > 2 ? \"\" : \"none\" }}\r\n                                                                fullWidth\r\n                                                                placeholder={\"분 시 일 월 요일 (default: 0 0 * * *)\"}\r\n                                                                error={invalid['cron'] || false} />\r\n                                                            </Box>\r\n                                                            <Box maxWidth={\"100%\"}>\r\n                                                            <TextField\r\n                                                                inputRef={newCron4}\r\n                                                                style={{ display: cronCount > 3? \"\" : \"none\" }}\r\n                                                                fullWidth\r\n                                                                placeholder={\"분 시 일 월 요일 (default: 0 0 * * *)\"}\r\n                                                                error={invalid['cron'] || false} />\r\n                                                            </Box>\r\n                                                            <Box maxWidth={\"100%\"}>\r\n                                                            <TextField\r\n                                                                inputRef={newCron5}\r\n                                                                style={{ display: cronCount > 4 ? \"\" : \"none\" }}\r\n                                                                fullWidth\r\n                                                                placeholder={\"분 시 일 월 요일 (default: 0 0 * * *)\"}\r\n                                                                error={invalid['cron'] || false} />\r\n                                                            </Box>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={1}>\r\n                                                            <Button onClick={handleCronAdd}><AddBoxIcon /></Button>\r\n                                                            <Button onClick={handleCronRemove}><IndeterminateCheckBoxIcon /></Button>\r\n                                                        </Grid>\r\n                                                        <Grid item xs={1} \r\n                                                            // justify={\"center\"} alignItems=\"center\"\r\n                                                            >\r\n                                                            <Link onMouseOver={handleClick('top')} onMouseLeave={handleClick('top')}>예제</Link>\r\n                                                            <Popper open={Boolean(open)} \r\n                                                                    anchorEl={anchorEl}\r\n                                                                    placement={'top'}\r\n                                                                    // placement={placement}\r\n                                                                    transition \r\n                                                                    style={{ zIndex: 999999999 }}>\r\n                                                                {({TransitionProps}) => (\r\n                                                                    <Fade {...TransitionProps} timeout={300}>\r\n                                                                        <Paper>\r\n                                                                            <Typography className={classes.typography}>\r\n                                                                                예제<br/>\r\n                                                                                */1 * * * * : 1분마다 한 번씩<br/>\r\n                                                                                */5 * * * * : 5분마다 한 번씩<br/>\r\n                                                                                0 5 1 * * : 매달 1일 새벽 5시에 실행.<br/>\r\n                                                                                0 5,11 * * 0,3 : 매주 일요일과 수요일 새벽 5시와 밤 11시.<br/>\r\n                                                                                0 5,11 * * * : 새벽 5시와 밤 11시\r\n                                                                            </Typography>\r\n                                                                        </Paper>\r\n                                                                    </Fade>\r\n                                                                )}\r\n                                                            </Popper>\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>엘라스틱서치 정보</TableCell>\r\n                                                <TableCell>\r\n                                                    <Box my={3}>\r\n                                                        <Select style={{minWidth: \"100%\"}}\r\n                                                                value={esScheme}\r\n                                                                onChange={e => setEsScheme(e.target.value)}\r\n                                                        >\r\n                                                            <MenuItem key={1}\r\n                                                                      value={\"http\"}\r\n                                                            >\r\n                                                                HTTP\r\n                                                            </MenuItem>\r\n                                                            <MenuItem key={1}\r\n                                                                      value={\"https\"}\r\n                                                            >\r\n                                                                HTTPS\r\n                                                            </MenuItem>\r\n                                                        </Select>\r\n                                                    </Box>\r\n                                                    <Box my={3}>\r\n                                                        <TextField \r\n                                                            inputRef={newEsHost}\r\n                                                            // value={esHost}\r\n                                                            // onChange={e => setEsHost(e.target.value)}\r\n                                                                   fullWidth\r\n                                                                   placeholder={\"elastic.com\"}\r\n                                                                   error={invalid['esHost']||false}\r\n                                                        />\r\n                                                    </Box>\r\n                                                    <Box my={3}>\r\n                                                        <TextField \r\n                                                            inputRef={newEsPort}\r\n                                                                // value={esPort}\r\n                                                                // onChange={e => setEsPort(e.target.value)}\r\n                                                                fullWidth\r\n                                                                // type={\"number\"}\r\n                                                                placeholder={\"9200\"}\r\n                                                                error={invalid['esPort']||false}\r\n                                                        />\r\n                                                    </Box>\r\n                                                    <Box my={3}>\r\n                                                        <TextField \r\n                                                            inputRef={newEsUser}\r\n                                                        //  value={esUser}\r\n                                                        //            onChange={e => setEsUser(e.target.value)}\r\n                                                                   fullWidth\r\n                                                                   placeholder={\"elastic\"}\r\n                                                        />\r\n                                                    </Box>\r\n                                                    <Box my={3}>\r\n                                                        <TextField \r\n                                                            inputRef={newEsPassword}\r\n                                                            // value={esPassword}\r\n                                                            //        onChange={e => setEsPassword(e.target.value)}\r\n                                                                   fullWidth\r\n                                                                   type={\"password\"}\r\n                                                                   placeholder={\"password\"}\r\n                                                        />\r\n                                                    </Box>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n\r\n                                            <TableRow>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>전용인덱서</TableCell>\r\n                                                <TableCell>\r\n                                                    <Typography component=\"div\">\r\n                                                        <Grid component=\"label\" \r\n                                                            container \r\n                                                            // alignItems=\"center\" \r\n                                                            spacing={1}>\r\n                                                            <Grid item>사용안함</Grid>\r\n                                                            <Grid item>\r\n                                                                <Switch checked={isExtIndexer} onChange={() => setExtIndexer((!isExtIndexer))}  />\r\n                                                            </Grid>\r\n                                                            <Grid item>사용</Grid>\r\n                                                        </Grid>\r\n                                                    </Typography>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n\r\n                                            <TableRow style={{display: isExtIndexer ? \"table-row\" : \"none\" }}>\r\n                                                <TableCell variant={\"head\"} component={\"th\"}>전용인덱서 정보</TableCell>\r\n                                                <TableCell>\r\n                                                    <Box my={3}>\r\n                                                        <Select style={{minWidth: \"100%\"}}\r\n                                                                value={scheme}\r\n                                                                onChange={e => setScheme(e.target.value)}\r\n                                                        >\r\n                                                            <MenuItem value={\"http\"}>\r\n                                                                HTTP\r\n                                                            </MenuItem>\r\n                                                            <MenuItem value={\"https\"}>\r\n                                                                HTTPS\r\n                                                            </MenuItem>\r\n                                                        </Select>\r\n                                                    </Box>\r\n                                                    <Box my={3}>\r\n                                                        <TextField \r\n                                                            inputRef={newHost}\r\n                                                            // value={host}\r\n                                                            //        onChange={event => setHost(event.target.value)}\r\n                                                                   fullWidth\r\n                                                                   placeholder={\"127.0.0.1\"}\r\n                                                                   error={invalid['host']||false}\r\n                                                        />\r\n                                                    </Box>\r\n                                                    <Box my={3}>\r\n                                                        <TextField \r\n                                                            inputRef={newPort}\r\n                                                            // value={port}\r\n                                                            //        onChange={event => setPort(event.target.value)}\r\n                                                                   fullWidth\r\n                                                                   placeholder={\"5005\"}\r\n                                                                   type={\"number\"}\r\n                                                                   error={invalid['port']||false}\r\n                                                        />\r\n                                                    </Box>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Snackbar \r\n                open={cronMessage} autoHideDuration={3000} \r\n                onClose={(event, reason) => {\r\n                    if (reason === 'clickaway') {\r\n                        return;\r\n                      }\r\n                  setCronMessage(false) }\r\n                }>\r\n                <MuiAlert elevation={4} variant=\"filled\" severity=\"info\"> 크론 설정은 최대 5개까지만 설정 가능합니다. </MuiAlert>\r\n            </Snackbar>\r\n\r\n            <Dialog open={Boolean(editModal)}\r\n                    fullWidth\r\n                    onClose={toggleEditModal}\r\n            >\r\n                <DialogTitle>\r\n                    설정\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <pre>\r\n                        {(collection['launcher'] || {})['yaml']}\r\n                    </pre>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={toggleEditModal}>닫기</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    authUser: store.dsearchReducers.authUser,\r\n    ...store.collectionReducers,\r\n    ...store.jdbcReducers,\r\n    ...store.clusterReducers,\r\n}))(Source);\r\n"],"sourceRoot":""}
{"version":3,"sources":["pages/management/clusterSettings/index.js","components/AntTabs/index.js"],"names":["Divider","styled","MuiDivider","spacing","ClusterSettings","Fragment","title","variant","gutterBottom","display","my","tabs","label","component","async","Box","MuiBox","Tab","withStyles","theme","root","textTransform","minWidth","fontWeight","typography","fontWeightRegular","marginRight","color","opacity","fontWeightMedium","selected","index","props","disableRipple","AntTabs","tabIndex","onChange","React","useState","state","setState","value","event","indicatorColor","textColor","scrollButtons","map","tab","key","id","icon","role","hidden","aria-labelledby"],"mappings":"4HAAA,gGAUMA,EAAUC,YAAOC,IAAPD,CAAmBE,KAuBpBC,UArBf,WACI,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CAAQC,MAAM,yCACd,kBAAC,IAAD,CAAYC,QAAQ,KAAKC,cAAY,EAACC,QAAQ,UAA9C,wCAIA,kBAACT,EAAD,CAASU,GAAI,IAEb,kBAAC,IAAD,CAASC,KAAM,CACX,CAACC,MAAO,qBAAOC,UAAWC,aAAM,kBAAM,mCACtC,CAACF,MAAO,2BAAQC,UAAWC,aAAM,kBAAM,mCACvC,CAACF,MAAO,2BAAQC,UAAWC,aAAM,kBAAM,yC,oICfjDd,EAAUC,YAAOC,IAAPD,CAAmBE,KAC7BY,EAAMd,YAAOe,IAAPf,CAAeE,KAarBc,EAAMC,aAAW,SAACC,GAAD,MAAY,CAC/BC,KAAM,CACFC,cAAe,OACfC,SAAU,GACVC,WAAYJ,EAAMK,WAAWC,kBAC7BC,YAAaP,EAAMhB,QAAQ,GAC3B,UAAW,CACPwB,MAAO,UACPC,QAAS,GAEb,aAAc,CACVD,MAAO,UACPJ,WAAYJ,EAAMK,WAAWK,kBAEjC,UAAW,CACPF,MAAO,YAGfG,SAAU,MACV,CAACC,MAAO,GAnBAb,EAmBI,SAACc,GAAD,OAAW,kBAAC,IAAD,eAAQC,eAAa,GAAKD,OAmEtCE,IAtCf,YAAkD,IAAhCvB,EAA+B,EAA/BA,KAA+B,IAAzBwB,gBAAyB,MAAd,EAAc,EAAXC,EAAW,EAAXA,SAAW,EACnBC,IAAMC,SAAS,CAACH,SAAUA,IADP,mBACtCI,EADsC,KAC/BC,EAD+B,KAW7C,OACI,oCACI,kBAAC,IAAD,CAAMC,MAAOF,EAAMJ,SACbC,SAZO,SAACM,EAAOP,GACzBK,EAAS,CACLL,SAAUA,IAEU,oBAAbC,GACPA,EAASD,IAQHQ,eAAe,UACfC,UAAU,UACVrC,QAAQ,aACRsC,cAAc,QAEflC,EAAKmC,KAAI,SAACC,EAAKhB,GAAN,OAAgB,kBAACd,EAAD,CAAK+B,IAAKjB,EAAOkB,GAAIlB,EAAOmB,KAAMH,EAAIG,KAAMtC,MAAOmC,EAAInC,OAAS,SAE9F,kBAACZ,EAAD,MACCW,EAAKmC,KAAI,SAAC7B,EAAKc,GACZ,OACI,kBAAChB,EAAD,CAAKiC,IAAKjB,EACJoB,KAAK,WACLC,OAAQb,EAAMJ,WAAaJ,EAC3BkB,GAAE,mCAA8BlB,GAChCsB,kBAAA,8BAAwCtB,IACzCA,IAAUQ,EAAMJ,UAAYlB,EAAIJ,WAAa,kBAACE,EAAD,SAAM,kBAACE,EAAIJ,UAAL,CAAeF,KAAMM,IAA3B","file":"static/js/61.937f230a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport Helmet from 'react-helmet';\r\n\r\nimport {Divider as MuiDivider, Typography} from \"@material-ui/core\";\r\nimport {spacing} from \"@material-ui/system\";\r\nimport AntTabs from \"../../../components/AntTabs\";\r\nimport async from \"../../../components/Async\";\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nfunction ClusterSettings() {\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"클러스터설정\"/>\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                클러스터설정\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <AntTabs tabs={[\r\n                {label: \"기본값\", component: async(() => import(\"./Defaults\"))},\r\n                {label: \"영구설정\", component: async(() => import(\"./Persistent\"))},\r\n                {label: \"임시설정\", component: async(() => import(\"./Transient\"))},\r\n            ]} />\r\n\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ClusterSettings;\r\n","// React components\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n// Material components\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport {Box as MuiBox, Divider as MuiDivider, Tab as AntTab, Tabs, Typography, Card, CardContent} from \"@material-ui/core\";\r\nimport styled from \"styled-components\";\r\nimport {spacing} from \"@material-ui/system\";\r\n\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing);\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//     root: {\r\n//         flexGrow: 1,\r\n//         width: '100%',\r\n//         backgroundColor: theme.palette.background.paper\r\n//     },\r\n//     indicator: {\r\n//         backgroundColor: '#1890ff',\r\n//     },\r\n// }));\r\n\r\nconst Tab = withStyles((theme) => ({\r\n    root: {\r\n        textTransform: 'none',\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n        marginRight: theme.spacing(2),\r\n        '&:hover': {\r\n            color: '#40a9ff',\r\n            opacity: 1,\r\n        },\r\n        '&$selected': {\r\n            color: '#1890ff',\r\n            fontWeight: theme.typography.fontWeightMedium,\r\n        },\r\n        '&:focus': {\r\n            color: '#40a9ff',\r\n        },\r\n    },\r\n    selected: {},\r\n}), {index: 1})((props) => <AntTab disableRipple {...props} />);\r\n\r\n\r\nfunction TabPanel(props) {\r\n    const {key, children, value, index} = props;\r\n    return (\r\n        <Typography\r\n            key={key}\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`scrollable-auto-tabpanel-${index}`}\r\n            aria-labelledby={`scrollable-auto-tab-${index}`}\r\n        >\r\n            {value === index && <Box >\r\n                <children key={key} />\r\n            </Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    key: PropTypes.any,\r\n    children: PropTypes.node,\r\n    index: PropTypes.any,\r\n    value: PropTypes.any,\r\n};\r\n\r\n\r\nfunction AntTabs({tabs, tabIndex = 0, onChange}) {\r\n    const [state, setState] = React.useState({tabIndex: tabIndex});\r\n    const handleChange = (event, tabIndex) => {\r\n        setState({\r\n            tabIndex: tabIndex\r\n        })\r\n        if (typeof onChange === 'function') {\r\n            onChange(tabIndex)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Tabs value={state.tabIndex}\r\n                  onChange={handleChange}\r\n                  indicatorColor=\"primary\"\r\n                  textColor=\"primary\"\r\n                  variant=\"scrollable\"\r\n                  scrollButtons=\"auto\"\r\n            >\r\n                {tabs.map((tab, index) => <Tab key={index} id={index} icon={tab.icon} label={tab.label || \"\"}/>)}\r\n            </Tabs>\r\n            <Divider />\r\n            {tabs.map((Tab, index) => {\r\n                return (\r\n                    <Box key={index}\r\n                          role=\"tabpanel\"\r\n                          hidden={state.tabIndex !== index}\r\n                          id={`scrollable-auto-tabpanel-${index}`}\r\n                          aria-labelledby={`scrollable-auto-tab-${index}`}>\r\n                        {index === state.tabIndex && Tab.component && <Box> <Tab.component tabs={Tab}/> </Box>}\r\n                    </Box>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AntTabs;"],"sourceRoot":""}
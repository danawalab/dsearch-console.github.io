{"version":3,"sources":["components/DynamicTable/index.js","pages/analysis/dictionary/Set.js","pages/analysis/dictionary/Synonym.js","pages/analysis/dictionary/Space.js","pages/analysis/dictionary/Synonym2Way.js","pages/analysis/dictionary/Custom.js","pages/analysis/dictionary/WrapperTabPanel.js","utils.js"],"names":["useStyles","makeStyles","theme","input","border","DynamicTable","dataList","from","limit","showCheckBox","onSelectClick","isEdit","onUpdate","onDelete","classes","useState","selected","setSelected","array","setArray","useEffect","map","data","fields","field","rowCount","forEach","length","rows","i","cols","j","push","id","text","splice","TableContainer","component","Paper","Table","size","TableHead","TableRow","index","Fragment","key","TableCell","padding","Checkbox","defaultChecked","onChange","event","checked","ids","row","handleSelectAllClick","target","Box","align","TableBody","rowIdx","col","colIdx","includes","concat","filter","select","InputBase","className","value","cloneArray","slice","handleChange","fullWidth","b","justifyContent","display","width","IconButton","iconButton","onClick","updateFields","console","log","handleEdit","OfflinePin","Delete","prototype","PropTypes","isRequired","Button","styled","MuiButton","spacing","sizing","palette","MuiBox","formControl","minWidth","form","alignItems","marginLeft","flex","borderBottom","divider","height","margin","right","textAlign","checkedList","searchedKeyword","connect","store","authUser","dsearchReducers","totalCount","dictionaryReducers","dictionary","setting","dataSet","result","dispatch","useDispatch","searchColumns","setSearchColumns","isMatch","setMatch","mode","setMode","pageNum","setPageNum","rowSize","newCreateId","React","useRef","newCreateKeyword","newCreateValue","newKeyword","deleteDialogOpen","setDeleteDialogOpen","createDialogOpen","setCreateDialogOpen","message","setMessage","resetFlag","setResetFlag","resetMessage","setResetMessage","alertFlag","setAlertFlag","alertMessage","setAlertMessage","alertColor","setAlertColor","moreMenu","setMoreMenu","overwrite","setOverwrite","resetDialogOpen","setResetDialogOpen","fileDialogOpen","setFileDialogOpen","file","setFile","uploadProgress","setUploadProgress","toggleCheckbox","handlePagination","setDictionary","handleSearchClick","keyword","current","a","deleteDictionary","utils","sleep","handleCreateData","createId","createKeyword","createValue","createDictionary","msg","undefined","setTimeout","column","hits","hit","createLabels","colId","find","colKeyword","colValue","Card","CardContent","Grid","container","item","xs","FormControl","Select","MenuItem","placeholder","inputRef","onKeyUp","keyCode","type","aria-label","Search","color","md","style","marginRight","variant","mx","downloadDictionary","e","currentTarget","ArrowDropDown","Menu","anchorEl","open","Boolean","onClose","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","role","analysis","disabled","m","Snackbar","autoHideDuration","elevation","severity","Dialog","DialogTitle","cursor","DialogContent","TextField","autoFocus","label","onKeyPress","m5","mt","DialogActions","mr","DialogContentText","fd","FormData","append","resetDict","then","res","catch","err","files","FormControlLabel","control","labelPlacement","LinearProgress","sendFile","createSearchColumn","window","confirm","checkedListId","columns","reduce","o","k","Object","assign","updateDictionary","ml","focus","activeIndex","settings","Viewer","Set","Synonym","Space","Synonym2Way","Custom","ms","Promise","resolve"],"mappings":"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","file":"static/js/62.3698a252.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {\r\n    Box,\r\n    Checkbox,\r\n    IconButton,\r\n    InputBase,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Delete as DeleteIcon, OfflinePin as OfflinePinIcon} from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    input: { border: \"0px\" },\r\n}));\r\n\r\nfunction DynamicTable({dataList, from = 0, limit = 100000, showCheckBox = false, onSelectClick, isEdit = false, onUpdate = () => {}, onDelete = () => {}}) {\r\n    const classes = useStyles();\r\n    const [selected, setSelected] = useState([])\r\n    const [array, setArray] = useState([])\r\n\r\n    useEffect(() => {\r\n        setArray([...dataList.map(data => data.data)])\r\n    }, [dataList])\r\n\r\n    useEffect(() => {\r\n        setSelected([])\r\n    }, [showCheckBox])\r\n\r\n\r\n    const fields = dataList.map(data => data.field);\r\n\r\n    let rowCount = 0;\r\n    dataList.forEach(data => rowCount < data.data.length ? rowCount = data.data.length : rowCount);\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n        let cols = [];\r\n        for (let j = 0; j < fields.length; j++) {\r\n            if (array[j]) {\r\n                if (typeof array[j][i] !== 'object') {\r\n                    cols.push({id: array[j][i], text: array[j][i]})\r\n                } else {\r\n                    cols.push({id: array[j][i]['id'], text: array[j][i]['text']})\r\n                }\r\n            }\r\n        }\r\n        rows.push(cols)\r\n    }\r\n    rows = rows.splice(from, limit)\r\n\r\n    function handleSelectAllClick(checked) {\r\n        let ids = []\r\n        rows.forEach(row => {\r\n            onSelectClick(row[0].id, checked)\r\n            ids.push(row[0].id)\r\n        })\r\n        checked ? setSelected(ids) : setSelected([])\r\n    }\r\n    function handleSelectClick(id, checked) {\r\n        onSelectClick(id, checked)\r\n        checked ? setSelected(selected.concat(id)) : setSelected(selected.filter(select => select !== id))\r\n    }\r\n    function handleChange(event, id, colIdx, rowIdx) {\r\n        let cloneArray = array.slice()\r\n        cloneArray[colIdx][rowIdx]['text'] = event.target.value\r\n        setArray(cloneArray)\r\n    }\r\n    function handleEdit(id, rowIdx) {\r\n        let cols = []\r\n        let updateFields = []\r\n        for (let i = 0; i < array.length; i++) {\r\n            cols.push(array[i][rowIdx]['text'] || '')\r\n            console.log(fields[i])\r\n            updateFields.push(fields[i] || '')\r\n        }\r\n        onUpdate(id, cols, updateFields)\r\n    }\r\n    function handleDelete(id) {\r\n        onDelete(id)\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {\r\n                            fields.map((field, index) => (\r\n                                <React.Fragment key={field}>\r\n                                    {\r\n                                        showCheckBox && index === 0  ?\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox defaultChecked={false} onChange={(event) => handleSelectAllClick(event.target.checked)}/>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    <TableCell>{field}</TableCell>\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                        {\r\n                            showCheckBox && isEdit ?\r\n                                <TableCell>\r\n                                    <Box align={\"center\"}>\r\n                                        액션\r\n                                    </Box>\r\n                                </TableCell>\r\n                                :\r\n                                null\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        rows.map((cols, rowIdx) => {\r\n                            return (\r\n                                <TableRow key={rowIdx}>\r\n                                    {\r\n                                        cols.map((col, colIdx) => {\r\n                                            return (\r\n                                                <React.Fragment key={colIdx}>\r\n                                                    {\r\n                                                        showCheckBox && colIdx === 0 ?\r\n                                                            <TableCell padding=\"checkbox\">\r\n                                                                <Checkbox checked={selected.includes(col.id)}\r\n                                                                          onChange={(event) => handleSelectClick(col.id, event.target.checked)}\r\n                                                                />\r\n                                                            </TableCell>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    <TableCell>\r\n                                                        {\r\n                                                            showCheckBox && isEdit ?\r\n                                                                // 수정 모드\r\n                                                                <InputBase className={classes.input}\r\n                                                                           value={col.text|| ''}\r\n                                                                           /*순서 주의 (colIdx, rowIdx)*/\r\n                                                                           onChange={(event) => handleChange(event, col.id, colIdx, rowIdx)}\r\n                                                                           fullWidth\r\n                                                                           b={0}\r\n                                                                />\r\n                                                                :\r\n                                                                // 조회 모드\r\n                                                                col.text\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                </React.Fragment>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    {\r\n                                        showCheckBox && isEdit ?\r\n                                            <TableCell>\r\n                                                <Box align={\"center\"} justifyContent={\"space-between\"} display=\"flex\" width=\"100%\">\r\n                                                    <Box></Box>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleEdit(cols[0]['id'], rowIdx)}\r\n                                                    >\r\n                                                        <OfflinePinIcon/>\r\n                                                    </IconButton>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleDelete(cols[0]['id'])}\r\n                                                    >\r\n                                                        <DeleteIcon/>\r\n                                                    </IconButton>\r\n\r\n                                                </Box>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </TableRow>\r\n                            )\r\n                        })\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nDynamicTable.prototype = {\r\n    dataList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default DynamicTable","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Set({ dictionary, authUser, setting, dataSet, totalCount }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            console.log(\"createId\", createId, createId.length);    \r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            <label style={{marginRight: \"20px\"}}>전체 데이터 갯수: {totalCount}</label>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? \r\n                                <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                                >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <Button variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                disabled\r\n                                mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m5={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Set\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        setUploadProgress(true);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async (res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    totalCount: store.dictionaryReducers.totalCount\r\n}))(Set)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet, totalCount}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        const createSearchColumn = createId !== '' ? 'id' : createKeyword !== '' ? 'keyword' : 'value'\r\n        // const createSearchKeyword = createId !== '' ? createId : createKeyword !== '' ? createKeyword : createValue\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        setMatch(true)\r\n        setSearchColumns(createSearchColumn)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    \r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                          checked={isMatch}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            <label style={{marginRight: \"20px\"}}>전체 데이터 갯수: {totalCount}</label>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {setCreateDialogOpen(true);}}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                             {authUser.role.analysis ? \r\n                                <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                                >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    disabled\r\n                                    mx={1}\r\n                                >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true} \r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') handleCreateData();\r\n                                            }\r\n                                        }\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Synonym\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async (res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    totalCount: store.dictionaryReducers.totalCount\r\n}))(SynonymDictionary)\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Space({ dictionary, authUser, setting, dataSet, totalCount}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(40);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        console.log(result['lastPageNum']);\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            console.log(\"createId\", createId, createId.length);    \r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            // 수정된 사항\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n            // data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][\"value\"] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            <label style={{marginRight: \"20px\"}}>전체 데이터 갯수: {totalCount}</label>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                            >추가</Button>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            } \r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? \r\n                                <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                                >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <Button variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                disabled\r\n                                mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword}\r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                {\r\n                        message !== \"\" ? \r\n                        <Box mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Space\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        setUploadProgress(true);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async (res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    totalCount: store.dictionaryReducers.totalCount\r\n}))(Space)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n    FilledInput,\r\n} from \"@material-ui/core\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet, totalCount}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n    // authUser.role.analysis = false;\r\n\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            console.log(\"createKeyword\", createKeyword, createKeyword.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            console.log(\"createValue\", createValue, createValue.length);\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!window.confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!window.confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                                \r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            <label style={{marginRight: \"20px\"}}>전체 데이터 갯수: {totalCount}</label>\r\n\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment style={{justifyContent: \"space-between\"}}>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => {setCreateDialogOpen(true);}}\r\n                                            >추가</Button>\r\n                                            \r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                            >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? \r\n                                <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                                >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <Button variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                disabled\r\n                                mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> }\r\n                            \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{ margin: \"4px\" }}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue} \r\n                                        onKeyPress={ (e) => { if (e.key === 'Enter') handleCreateData();}}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    {\r\n                        message !== \"\" ? \r\n                        <Box ml={2} mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                            : <></>\r\n                    }\r\n\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n                         { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"synonym_2way\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async(res) => {\r\n                                console.log(\"onchange res\", res);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    totalCount: store.dictionaryReducers.totalCount\r\n}))(SynonymDictionary)","import React, {useEffect, useState, useRef} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    Menu,\r\n    MenuItem,\r\n    Select,\r\n    TextField,\r\n    Snackbar,\r\n    FormControlLabel,\r\n    LinearProgress,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {ArrowDropDown, Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary,\r\n    updateDictionary,\r\n    sendFile,\r\n    resetDict,\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet, totalCount}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    // const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize] = useState(20);\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    const [message, setMessage] = React.useState(\"\");\r\n\r\n    // 입력 성능 개선\r\n    const newCreateId = React.useRef(null);\r\n    const newCreateKeyword = React.useRef(null);\r\n    const newCreateValue = React.useRef(null);\r\n    const newKeyword = React.useRef({value: \"\"});\r\n\r\n    // 파일 업로드\r\n    const [resetFlag, setResetFlag] = React.useState(false);\r\n    const [resetMessage, setResetMessage] = React.useState(\"\");\r\n    const [alertFlag, setAlertFlag] = React.useState(false);\r\n    const [alertMessage, setAlertMessage] = React.useState(\"\");\r\n    const [alertColor, setAlertColor] = React.useState(\"info\");\r\n\r\n    const [moreMenu, setMoreMenu] = useState(null)\r\n    const [overwrite, setOverwrite] = useState(false)\r\n    const [resetDialogOpen, setResetDialogOpen] = React.useState(false);\r\n    const [fileDialogOpen, setFileDialogOpen] = React.useState(false);\r\n    const [file, setFile] = React.useState(null);\r\n    const [uploadProgress, setUploadProgress] = React.useState(false);\r\n\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n        if (newCreateId.current) {\r\n            newCreateId.current.focus();\r\n        }\r\n        if (newCreateKeyword.current) {\r\n            newCreateKeyword.current.focus();\r\n        }\r\n        if (newCreateValue.current) {\r\n            newCreateValue.current.focus();\r\n        }\r\n    }, [newCreateId, newCreateKeyword, newCreateValue]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    \r\n\r\n    function handleColumnChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // 2/1 같이 표시 되는것 방지 코드\r\n        if(pageNum > result['lastPageNum']){\r\n            return;\r\n        }\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        let keyword = newKeyword.current.value\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        let keyword = newKeyword.current.value\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        let createId = \"\"\r\n        let createKeyword = \"\"\r\n        let createValue = \"\"\r\n\r\n        if(newCreateId.current != null){\r\n            createId = newCreateId.current.value\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            createKeyword = newCreateKeyword.current.value\r\n        }\r\n        if(newCreateValue.current != null){\r\n            createValue = newCreateValue.current.value\r\n        }\r\n\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n\r\n        // 등록 메시지 만들기\r\n        let msg = \"\";\r\n        if(createId !== undefined && createId !== null && createId !== \"\" && createId.length > 0){\r\n            msg += createId\r\n        } \r\n        \r\n        if(createKeyword !== undefined && createKeyword !== null && createKeyword !== \"\" && createKeyword.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createKeyword\r\n        }\r\n\r\n        if(createValue !== undefined && createValue !== null && createValue !== \"\" && createValue.length > 0)  {\r\n            if(msg !== \"\" || msg.length > 0) {\r\n                msg += \" > \"\r\n            }\r\n            msg += createValue\r\n        }\r\n\r\n        if(newCreateId.current != null){\r\n            newCreateId.current.value = \"\";\r\n        }\r\n        if(newCreateKeyword.current != null){\r\n            newCreateKeyword.current.value = \"\";\r\n        }\r\n        if(newCreateValue.current != null){\r\n            newCreateValue.current.value = \"\";\r\n        }\r\n\r\n        await utils.sleep(1000);\r\n        let keyword = newKeyword.current.value\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n\r\n        setMessage('\"' + msg + '\" 이(가) 추가되었습니다');\r\n        setTimeout(() => {\r\n            setMessage(\"\");\r\n        }, 5000);\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    inputRef={newKeyword}\r\n                                    // value={keyword}\r\n                                    // onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            <label style={{marginRight: \"20px\"}}>전체 데이터 갯수: {totalCount}</label>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { newCreateKeyword.current =\"\"; setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mx={1}\r\n                                                onClick={() => { if(checkedList.length > 0) setDeleteDialogOpen(true)} }\r\n                                        >삭제</Button>\r\n\r\n                                        <FormControl>\r\n                                            <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                type=\"file\"\r\n                                                mx={1}\r\n                                                onClick={(e) => {\r\n                                                    setMoreMenu(e.currentTarget);\r\n                                                }}\r\n                                            >더보기<ArrowDropDown /></Button>\r\n\r\n                                            <Menu\r\n                                                anchorEl={moreMenu}\r\n                                                open={Boolean(moreMenu)}\r\n                                                onClose={() => { setMoreMenu(null) }}\r\n                                                getContentAnchorEl={null}\r\n                                                anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                                                transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                                            >\r\n                                                <MenuItem onClick={() => { setFileDialogOpen(true) }}>\r\n                                                    사전 파일 업로드\r\n                                                </MenuItem>\r\n                                                <MenuItem onClick={() => setResetDialogOpen(true)}>\r\n                                                    사전 초기화\r\n                                                </MenuItem>\r\n                                            </Menu>\r\n                                        </FormControl>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n\r\n                            {authUser.role.analysis ? \r\n                                <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                                >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> \r\n                            : <Button variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                disabled\r\n                                mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>  }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n\r\n                                {/* Reset Modal */}\r\n                                <Snackbar open={resetFlag} autoHideDuration={3000} onClose={() => { setResetFlag(false); setResetMessage(\"\"); }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity=\"info\"> {resetMessage} </MuiAlert>\r\n                                </Snackbar>\r\n\r\n                                {/* File Upload Modal */}\r\n                                <Snackbar open={alertFlag} autoHideDuration={3000} onClose={() => { setAlertFlag(false); setAlertMessage(\"\") }}>\r\n                                    <MuiAlert elevation={6} variant=\"filled\" severity={alertColor}> {alertMessage} </MuiAlert>\r\n                                </Snackbar>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus\r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.id}\r\n                                        inputRef={newCreateId}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') {\r\n                                                    handleCreateData();\r\n                                                }\r\n                                            }\r\n                                        } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id ? false : true}\r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.keyword}\r\n                                        inputRef={newCreateKeyword}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                if (e.key === 'Enter') {\r\n                                                    handleCreateData()\r\n                                                }\r\n                                            }\r\n                                        } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box m={5}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField \r\n                                        autoFocus={createLabels.id || createLabels.keyword ? false : true}\r\n                                        style={{margin: \"4px\"}}\r\n                                        label={createLabels.value}\r\n                                        inputRef={newCreateValue}\r\n                                        onKeyPress={ \r\n                                            (e) => { \r\n                                                    if (e.key === 'Enter') {\r\n                                                        handleCreateData();\r\n                                                    }\r\n                                                }\r\n                                            } \r\n                                        />\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                        {\r\n                            message !== \"\" ? \r\n                            <Box ml={2} mr={18} style={{color: \"red\"}}> <b> {message} </b></Box>\r\n                                : <></>\r\n                        }\r\n                    <Button \r\n                        onClick={\r\n                            handleCreateData\r\n                        } \r\n                        color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        닫기\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={resetDialogOpen}\r\n                onClose={() => setResetDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        정말 이 사전을 초기화 하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button \r\n                        onClick={ () => { \r\n                            let fd = new FormData();\r\n                            fd.append('dictionaryName', dictionary)\r\n                            dispatch(resetDict(fd))\r\n                            .then(async (res) =>{\r\n                                setResetMessage(\"초기화 되었습니다.\")\r\n                                setResetFlag(true);\r\n                                setResetDialogOpen(false)\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            })\r\n                            .catch((err) => {\r\n                                console.log(err);\r\n                                setResetMessage(\"초기화 중 에러가 발생 했습니다.\")\r\n                                // setResetFlag(true);\r\n                                // setResetDialogOpen(false)\r\n                                // setResetFlag(false);\r\n                            })\r\n                        }} \r\n                        color=\"secondary\" \r\n                        style={{color: \"red\"}}>\r\n                        초기화 하기\r\n                    </Button>\r\n                    <Button onClick={() => setResetDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={fileDialogOpen}\r\n                onClose={() => setFileDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    사전 파일 업로드\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        <input\r\n                            id=\"fileUpload\"\r\n                            // style={{ display: \"none\" }}\r\n                            type='file'\r\n                            onChange={(e) => {\r\n                                setFile(e.target.files[0])\r\n                            }}\r\n                        />\r\n                         <FormControlLabel\r\n                            control={\r\n                                <Checkbox color=\"primary\" \r\n                                    checked={overwrite} \r\n                                    onChange={(e) => { \r\n                                        setOverwrite(e.target.checked) \r\n                                    }} />}\r\n                            label=\"업로드 한 파일로 덮어 쓰시겠습니까?\"\r\n                            labelPlacement=\"end\"\r\n                        />\r\n\r\n                        { \r\n                            uploadProgress ? <LinearProgress /> : <></>\r\n                        }\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => { \r\n                        let fd = new FormData();\r\n                        fd.append('overwrite', overwrite);\r\n                        fd.append('dictionaryFields', result['fields'])\r\n                        fd.append('dictionaryType', \"Custom\");\r\n                        fd.append('dictionaryName', dictionary)\r\n                        fd.append('filename', file);\r\n                        setUploadProgress(true);\r\n                        dispatch(sendFile(fd))\r\n                            .then(async (res) => {\r\n                                console.log(\"onchange res\", res.data);\r\n                                setAlertFlag(true);\r\n                                if(res.data.result){\r\n                                    setAlertColor(\"info\");\r\n                                    setAlertMessage(res.data.message)\r\n                                    setFileDialogOpen(false)\r\n                                }else{\r\n                                    setAlertColor(\"error\");\r\n                                    setAlertMessage(res.data.message)\r\n                                }\r\n                                setFile(null);\r\n                                setUploadProgress(false);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            }).catch(async (err) => {\r\n                                console.log(\"onchange err\", err);\r\n                                setAlertFlag(true);\r\n                                setAlertColor(\"error\");\r\n                                setAlertMessage(\"실패\");\r\n                                setUploadProgress(false);\r\n                                setFile(null);\r\n                                await utils.sleep(1000);\r\n                                handlePagination(0);\r\n                            });\r\n                    }} color=\"secondary\">\r\n                        등록\r\n                    </Button>\r\n                    <Button onClick={() => setFileDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    totalCount: store.dictionaryReducers.totalCount\r\n}))(SynonymDictionary)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Set from './Set'\r\nimport Synonym from './Synonym'\r\nimport Space from './Space'\r\nimport Synonym2Way from './Synonym2Way'\r\nimport Custom from './Custom'\r\n\r\nfunction WrapperTabPanel({ activeIndex, settings, dataSet }) {\r\n    const setting = settings[activeIndex]\r\n    const dictionary = setting['id']\r\n    const type = setting['type']\r\n\r\n    // console.log(\"settings \", settings);\r\n    // console.log(\"dictionary \", dictionary);\r\n    // console.log(\"type \", type);\r\n    // console.log(\"dataSet \", dataSet);\r\n\r\n    let Viewer = null\r\n    switch (type) {\r\n        case \"SET\": Viewer = Set; break;\r\n        case \"SYNONYM\": Viewer = Synonym; break;\r\n        case \"SPACE\": Viewer = Space; break; // Set 과 동일함...\r\n        case \"COMPOUND\": Viewer = Synonym; break; // Synonym 과 동일함...\r\n        case \"SYNONYM_2WAY\": Viewer = Synonym2Way; break; // Synonym 과 동일함...\r\n        case \"CUSTOM\": Viewer = Custom; break; // Synonym 과 동일함...\r\n        default: Viewer = () => <React.Fragment>지원하지 않는 타입 입니다.</React.Fragment>\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Viewer dictionary={dictionary}\r\n                    setting={setting}\r\n                    dataSet={dataSet}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({...store.dictionaryReducers}))(WrapperTabPanel)","const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils"],"sourceRoot":""}
{"version":3,"sources":["pages/indices/indexTemplates/index.js","redux/actions/indexTemplateActions.js"],"names":["useStyles","makeStyles","theme","formControl","minWidth","root","flexGrow","width","edit","Divider","styled","MuiDivider","spacing","Box","MuiBox","positions","Typography","MuiTypography","connect","store","authUser","dsearchReducers","indexTemplateReducers","dispatch","templates","history","useHistory","classes","useEffect","setIndexTemplatesAction","rows","map","template","name","pattern","sort","a","b","Fragment","title","variant","gutterBottom","display","my","align","role","index","onClick","push","style","cursor","color","component","Paper","className","table","aria-label","row","i","key","scope","client","Client","call","uri","then","response","type","SET_INDEX_TEMPLATES","payload","data","filter","startsWith","addIndexTemplateAction","index_patterns","settings","mappings","method","deleteIndexTemplateAction","setIndexTemplateAction","SET_INDEX_TEMPLATE"],"mappings":"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","file":"static/js/64.3a0d19af.chunk.js","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport Helmet from 'react-helmet';\r\n\r\nimport {\r\n    Box as MuiBox,\r\n    Divider as MuiDivider,\r\n    Link,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Typography as MuiTypography,\r\n    Button\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {positions, spacing} from \"@material-ui/system\";\r\nimport {setIndexTemplatesAction} from \"../../../redux/actions/indexTemplateActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250,\r\n    },\r\n    root: {\r\n        flexGrow: 1,\r\n        width: '100%',\r\n    },\r\n    edit: {\r\n        width: '100%'\r\n    }\r\n}));\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Box = styled(MuiBox)(spacing, positions);\r\nconst Typography = styled(MuiTypography)(spacing, positions);\r\n\r\nfunction createData(name, pattern) {\r\n    return { name, pattern};\r\n}\r\n\r\nfunction Templates({dispatch, authUser, templates}) {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        dispatch(setIndexTemplatesAction())\r\n    }, [])\r\n\r\n    let list = templates.map(template => createData(template['name'], template['index_patterns']));\r\n    const rows = list.sort(function (a,b){\r\n        if(a['name'] >= b['name']) return 1;\r\n        else return -1;\r\n    })\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"템플릿\"/>\r\n\r\n            <br/>\r\n\r\n            <Typography variant=\"h3\"\r\n                        gutterBottom\r\n                        display=\"inline\"\r\n            >\r\n                템플릿\r\n            </Typography>\r\n\r\n            <Divider my={6}/>\r\n\r\n            <Box align={'right'}>\r\n                {authUser.role.index ?\r\n                    <Link onClick={() => history.push(\"./indices-templates/new\")}\r\n                          style={{cursor: \"pointer\"}}\r\n                          color={\"primary\"}>\r\n                    템플릿 생성\r\n                </Link> : <></>}\r\n            </Box>\r\n\r\n            <br/>\r\n\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"center\">#</TableCell>\r\n                            <TableCell align=\"center\">이름</TableCell>\r\n                            <TableCell align=\"center\">패턴</TableCell>\r\n                            <TableCell align=\"center\"></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row, i) => (\r\n                            <TableRow key={row.name}>\r\n                                <TableCell component=\"th\" scope=\"row\" align=\"center\">{i + 1}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <Link onClick={() => history.push(`./indices-templates/${row.name}`)}\r\n                                          style={{cursor: \"pointer\"}} >\r\n                                        {row.name}\r\n                                    </Link>\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">{row.pattern}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    {authUser.role.index ?\r\n                                        <Button variant={\"outlined\"} color={\"primary\"} onClick={() => history.push(`./indices-templates/${row.name}/edit`)}\r\n                                              style={{cursor: \"pointer\"}}\r\n                                              color={\"primary\"}>수정</Button>\r\n                                        :\r\n                                        <></>\r\n                                    }\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser,\r\n    ...store.indexTemplateReducers \r\n}))(Templates)","import Client from '~/Client'\r\nimport {SET_INDEX_TEMPLATES, SET_INDEX_TEMPLATE} from \"../constants\";\r\n\r\nconst client = new Client()\r\n\r\nexport const setIndexTemplatesAction = () => dispatch => client.call({\r\n    uri: '/elasticsearch/_cat/templates?format=json'\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_TEMPLATES,\r\n    payload: response.data.filter(template => !template['name'].startsWith(\".\"))\r\n}))\r\n\r\n\r\nexport const addIndexTemplateAction = ({template, index_patterns, settings, mappings}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"PUT\",\r\n    data: {\r\n        index_patterns,\r\n        settings,\r\n        mappings\r\n    }\r\n})\r\n\r\nexport const deleteIndexTemplateAction = ({template}) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`,\r\n    method: \"DELETE\",\r\n})\r\n\r\nexport const setIndexTemplateAction = ({ template }) => dispatch => client.call({\r\n    uri: `/elasticsearch/_template/${template}`\r\n}).then(response => dispatch({type: SET_INDEX_TEMPLATE, payload: response.data[template]}))"],"sourceRoot":""}
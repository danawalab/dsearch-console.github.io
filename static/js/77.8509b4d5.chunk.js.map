{"version":3,"sources":["pages/indices/index/DataEditTable.js","pages/indices/index/IndexedDataTable.js","pages/indices/index/Data.js"],"names":["tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Export","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","searchInterval","makeStyles","theme","styled","MuiDivider","spacing","connect","store","indicesReducers","dsearchReducers","dispatch","index","authUser","mappings","documentSourceResponse","useSelector","useState","keyword","setKeyword","pageNum","setPageNum","rowSize","setRowSize","columns","setColumns","dataList","setDataList","selectData","setSelectData","fetchIndexDocumentSourceList","searchSize","setIndexDocumentSourceListAction","from","size","then","response","tmpColumns","forEach","hit","source","flat","Object","keys","key","undefined","hits","payload","map","flatHit","tmpData","column","replace","handleChangeRowsPerPage","row","handleSearch","clearTimeout","setTimeout","flatMappings","test","filter","c","includes","useEffect","Fragment","role","icons","title","field","editable","cellStyle","whiteSpace","maxWidth","overflow","data","onChangeRowsPerPage","onRowAdd","newData","Promise","resolve","reject","tmpBody","unflatten","body","addIndexDocumentSourceAction","catch","onRowUpdate","oldData","id","editIndexDocumentSourceAction","onRowDelete","deleteIndexDocumentSourceAction","onSearchChange","options","headerStyle","onRowClick","event","rowData","target","innerText","Card","style","display","CardContent","Box","mt","Typography","variant","gutterBottom","useStyles","rowSizeList","classes","keywordInput","setKeywordInput","setFrom","setSize","totalSize","setTotalSize","loading","setLoading","fetchDocuments","searchFrom","searchKeyword","setIndexMappingsAction","searchColumns","documents","documentAnalyzerMap","flatSource","flatField","analyzer","push","text","analyzerDocumentSourceAction","tmpDataList","value","term","length","find","obj","join","error","console","log","handlePagination","handleChangeKeyword","Grid","container","item","xs","className","form","InputBase","input","placeholder","onChange","onKeyUp","keyCode","IconButton","iconButton","onClick","align","Button","disabled","component","m","isNaN","Math","ceil","FormControl","formControl","Select","labelId","num","MenuItem","TableContainer","Table","width","TableHead","TableRow","TableCell","TableBody","colSpan","CircularProgress","dataIndex","Data","chk","setChk","handleRadioChange","e","RadioGroup","aria-label","name","defaultValue","FormControlLabel","checked","control","Radio","color","label"],"mappings":"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","file":"static/js/77.8509b4d5.chunk.js","sourcesContent":["import React, {forwardRef, useEffect, useState} from \"react\";\r\nimport {connect, useSelector} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {Box, Card, CardContent, Divider as MuiDivider, TextareaAutosize, Typography} from \"@material-ui/core\";\r\nimport MaterialTable from 'material-table';\r\nimport {spacing} from \"@material-ui/system\";\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {\r\n    addIndexDocumentSourceAction,\r\n    deleteIndexDocumentSourceAction,\r\n    editIndexDocumentSourceAction,\r\n    setIndexDocumentSourceListAction\r\n} from \"../../../redux/actions/indicesActions\";\r\nimport flat, {unflatten} from 'flat'\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref}/>),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref}/>),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref}/>),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref}/>),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref}/>),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref}/>),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref}/>),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref}/>),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref}/>),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref}/>),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref}/>),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref}/>),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref}/>),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref}/>),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref}/>)\r\n};\r\nconst useStyles = makeStyles((theme) => ({}));\r\nconst Divider = styled(MuiDivider)(spacing);\r\nlet searchInterval = null\r\nfunction DataEditTable({dispatch, index, authUser, mappings}) {\r\n    const documentSourceResponse = useSelector(store => ({ ...store.indicesReducers}))['documentSourceResponse']\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize, setRowSize] = useState(5);\r\n    const [columns, setColumns] = useState([])\r\n    const [dataList, setDataList] = useState([])\r\n    const [selectData, setSelectData] = useState(\"\")\r\n\r\n    // 인덱스 변경시 호출\r\n    useEffect(() => {\r\n        setSelectData(\"\")\r\n        setKeyword(\"\")\r\n        setPageNum(0)\r\n        setRowSize(5)\r\n        if (index === \"\") {\r\n            return\r\n        }\r\n        fetchIndexDocumentSourceList({keyword})\r\n    }, [index])\r\n\r\n    useEffect(() => {\r\n        const response = documentSourceResponse;\r\n        if (!response || !response['hits']) {\r\n            return false\r\n        }\r\n\r\n        let tmpColumns = {}\r\n        tmpColumns['ID'] = null\r\n        response['hits']['hits'].forEach(hit => {\r\n            const source = flat(hit['_source'])\r\n            Object.keys(source).forEach(key => {\r\n                tmpColumns[key] = null\r\n            })\r\n        })\r\n\r\n        const columns = Object.keys(tmpColumns)\r\n        setColumns(columns)\r\n\r\n        setDataList(response['hits']['hits'].map(hit => {\r\n            const flatHit = flat(hit)\r\n            let tmpData = {}\r\n            columns.forEach(column => {\r\n                tmpData[column.replace(/\\./gi, \"___\")] = flatHit['_source.' + column] || \"\"\r\n            })\r\n            tmpData['ID'] = hit['_id']\r\n            tmpData['_hitsId'] = hit['_id']\r\n            return tmpData\r\n        }))\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    function fetchIndexDocumentSourceList({searchSize=500, columns=[], keyword=null}) {\r\n        return dispatch(setIndexDocumentSourceListAction({index, from: pageNum, size: searchSize||rowSize, columns, keyword})).then(response => {\r\n            // columns 적용\r\n            let tmpColumns = {}\r\n            tmpColumns['ID'] = null;\r\n            ((response['hits']||{})['hits']).forEach(hit => {\r\n                const source = flat(hit['_source'])\r\n                Object.keys(source).forEach(key => {\r\n                    tmpColumns[key] = null\r\n                })\r\n            })\r\n\r\n            if (keyword === undefined || keyword === null || keyword === '') {\r\n                setColumns(Object.keys(tmpColumns))\r\n            }\r\n\r\n            // setColumns(Object.keys(tmpColumns))\r\n            return {\r\n                columns: Object.keys(tmpColumns),\r\n                hits: response['hits']\r\n            }\r\n        }).then(payload => {\r\n            if(payload) {\r\n                setDataList((payload['hits']||{})['hits'].map(hit => {\r\n                    const flatHit = flat(hit)\r\n                    let tmpData = {}\r\n                    payload['columns'].forEach(column => {\r\n                        tmpData[column.replace(/\\./gi, \"___\")] = flatHit['_source.' + column] || \"\"\r\n                    })\r\n                    tmpData['ID'] = hit['_id']\r\n                    tmpData['_hitsId'] = hit['_id']\r\n                    return tmpData\r\n                }))\r\n            } else {\r\n                setDataList([])\r\n            }\r\n        })\r\n    }\r\n\r\n    function handleChangeRowsPerPage(row) {\r\n        setRowSize(row)\r\n        fetchIndexDocumentSourceList({keyword})\r\n    }\r\n\r\n    function handleSearch(keyword) {\r\n        setDataList([])\r\n\r\n        if (searchInterval !== null) {\r\n            clearTimeout(searchInterval)\r\n        }\r\n\r\n        searchInterval = setTimeout(() => {\r\n            setKeyword(keyword)\r\n            // setColumns(columns)\r\n            let searchColumns = []\r\n            const flatMappings = flat(mappings)\r\n            if (/[^0-9]/gi.test(keyword)) {\r\n                // 문자\r\n                searchColumns = columns.filter(c => ['text','keyword'].includes(flatMappings[`${c}.type`]))\r\n            } else {\r\n                searchColumns = columns\r\n            }\r\n            // 포멧 형식이 있으면 무시.\r\n            searchColumns = searchColumns.filter(c => !flatMappings[`${c}.format`])\r\n            fetchIndexDocumentSourceList({columns: searchColumns, keyword})\r\n        }, 500)\r\n    }\r\n\r\n    function handleRowAdd(newData) {\r\n        return new Promise((resolve, reject) => {\r\n            const tmpBody = unflatten(newData)\r\n            let body = {}\r\n            Object.keys(tmpBody).forEach(key => body[key.replace(/___/gi, \".\")] = tmpBody[key])\r\n            delete body['ID']\r\n            dispatch(addIndexDocumentSourceAction({ index, body }))\r\n                .then(() => setTimeout(() => fetchIndexDocumentSourceList({keyword}).then(resolve), 1000))\r\n                .catch(reject)\r\n        })\r\n    }\r\n    function handleRowUpdate(newData, oldData) {\r\n        return new Promise((resolve, reject) => {\r\n            const tmpBody = unflatten(newData)\r\n            let body = {}\r\n            Object.keys(tmpBody).forEach(key => body[key.replace(/___/gi, \".\")] = tmpBody[key])\r\n            const id = body['_hitsId']\r\n            delete body['_hitsId']\r\n            delete body['ID']\r\n            delete body['_id']\r\n            dispatch(editIndexDocumentSourceAction({ index, id, body }))\r\n                .then(() => setTimeout(() => fetchIndexDocumentSourceList({keyword}).then(resolve), 1000))\r\n                .catch(reject)\r\n        })\r\n    }\r\n    function handleRowDelete(oldData) {\r\n        return new Promise((resolve, reject) => {\r\n            const id = unflatten(oldData)['_hitsId']\r\n            dispatch(deleteIndexDocumentSourceAction({ index, id }))\r\n                .then(() => setTimeout(() => fetchIndexDocumentSourceList({keyword}).then(resolve), 1000))\r\n                .catch(reject)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                authUser.role.index ?\r\n                    <MaterialTable\r\n                        icons={tableIcons}\r\n                        title=\"\"\r\n                        columns={columns.map(column => ({\r\n                            title: column,\r\n                            field: column.replace(/\\./gi, \"___\"),\r\n                            editable: column === \"ID\" ? 'never' : \"always\",\r\n                            cellStyle:{whiteSpace: \"nowrap\", maxWidth: \"180px\", overflow: \"hidden\"}\r\n                        }))}\r\n                        data={dataList}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        editable={{ onRowAdd: handleRowAdd, onRowUpdate: handleRowUpdate, onRowDelete: handleRowDelete }}\r\n                        onSearchChange={handleSearch}\r\n                        options={{\r\n                            headerStyle: {\r\n                                maxWidth: \"180px\"\r\n                            }\r\n                        }}\r\n                        onRowClick={(event, rowData) => {\r\n                            setSelectData(event.target.innerText || \"\")\r\n                        }}\r\n                    />\r\n                    :\r\n                    <MaterialTable\r\n                        icons={tableIcons}\r\n                        title=\"\"\r\n                        columns={columns.map(column => ({\r\n                            title: column,\r\n                            field: column.replace(/\\./gi, \"___\"),\r\n                            editable: column === \"ID\" ? 'never' : \"always\",\r\n                            cellStyle:{whiteSpace: \"nowrap\", maxWidth: \"180px\"}\r\n                        }))}\r\n                        data={dataList}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                        onSearchChange={handleSearch}\r\n                        options={{\r\n                            headerStyle: {\r\n                                maxWidth: \"180px\"\r\n                            }\r\n                        }}\r\n                        onRowClick={(event, rowData) => {\r\n                            setSelectData(event.target.innerText || \"\")\r\n                        }}\r\n                    />\r\n            }\r\n\r\n            <Card style={{display: selectData === \"\" ? \"none\" : \"block\"}}>\r\n                <CardContent>\r\n                    <Box mt={5}>\r\n                        <Typography variant=\"h5\" gutterBottom >\r\n                            {selectData}\r\n                        </Typography>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({...store.indicesReducers, ...store.dsearchReducers}))(DataEditTable)","import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport flat from \"flat\"\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Divider as MuiDivider,\r\n    FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase,\r\n    MenuItem,\r\n    Select,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    CircularProgress\r\n} from \"@material-ui/core\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {\r\n    analyzerDocumentSourceAction,\r\n    setIndexDocumentSourceListAction,\r\n    setIndexMappingsAction\r\n} from \"../../../redux/actions/indicesActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({}));\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst rowSizeList = [5, 10, 20]\r\nconst idKey = \"* ID\"\r\nfunction IndexedDataTable({dispatch, index, mappings}) {\r\n    const classes = useStyles()\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [keywordInput, setKeywordInput] = useState(\"\");\r\n    const [columns, setColumns] = useState([]);\r\n    const [from, setFrom] = useState(0);\r\n    const [size, setSize] = useState(5);\r\n    const [dataList, setDataList] = useState([])\r\n    const [totalSize, setTotalSize] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    // 인덱스 변경시 호출\r\n    useEffect(() => {\r\n        setKeyword(\"\")\r\n        setColumns([])\r\n        setFrom(0)\r\n        fetchDocuments({searchKeyword: \"\", searchFrom: 0})\r\n    }, [index])\r\n\r\n    function fetchDocuments({ searchFrom, searchSize, searchKeyword }) {\r\n        setDataList([])\r\n        setLoading(true)\r\n        dispatch(setIndexMappingsAction(index)).then(response => {\r\n            const mappings = (((response||{})['payload']||{})['properties']||{})\r\n            let flatMappings = {}\r\n            Object.keys(flat(mappings))\r\n                .forEach(key => {\r\n                    flatMappings[key.replace(/.properties/gi, \"\")] = flat(mappings)[key]\r\n                })\r\n            return { mappings, flatMappings }\r\n        }).then(payload => {\r\n\r\n            let searchColumns = []\r\n            const flatMappings = flat(mappings)\r\n            if (/[^0-9]/gi.test(searchKeyword)) {\r\n                // 문자\r\n                searchColumns = columns.filter(c => ['text','keyword'].includes(flatMappings[`${c}.type`]))\r\n            } else {\r\n                searchColumns = columns\r\n            }\r\n            // 포멧 형식이 있으면 무시.\r\n            searchColumns = searchColumns.filter(c => !flatMappings[`${c}.format`])\r\n\r\n            return dispatch(setIndexDocumentSourceListAction({\r\n                index,\r\n                from: searchFrom||from,\r\n                size: searchSize||size,\r\n                keyword: searchKeyword === undefined ? keyword : searchKeyword,\r\n                columns: searchColumns\r\n            })).then(documents => ({\r\n                ...payload,\r\n                documents: documents\r\n            }))\r\n        }).then(payload => {\r\n            const hits = ((((payload||{})['documents']||{})['hits']||{})['hits']||[])\r\n\r\n            if (searchKeyword === undefined || searchKeyword === '') {\r\n                let tmpColumns = {}\r\n                // tmpColumns['ID'] = null\r\n                hits.forEach(hit => {\r\n                    const source = flat(hit['_source'])\r\n                    Object.keys(source).forEach(key => {\r\n                        tmpColumns[key] = null\r\n                    })\r\n                })\r\n                setColumns(Object.keys(tmpColumns))\r\n            }\r\n\r\n\r\n            let documentAnalyzerMap = {}\r\n            hits.forEach(hit => {\r\n                const id = hit['_id']\r\n                const flatSource = flat(hit['_source'])\r\n                documentAnalyzerMap[id] = []\r\n                Object.keys(flatSource).forEach(flatField => {\r\n                    let analyzer = \"\"\r\n                    if(((payload||{})['flatMappings']||{})[flatField + \".type\"] === \"text\") {\r\n                        analyzer = \"standard\"\r\n                    }\r\n                    if (((payload||{})['flatMappings']||{})[flatField + \".analyzer\"]) {\r\n                        analyzer = (payload||{})['flatMappings'][flatField + \".analyzer\"]\r\n                    }\r\n\r\n                    if (analyzer && analyzer !== \"\") {\r\n                        documentAnalyzerMap[id].push({\r\n                            field: flatField, text: flatSource[flatField], analyzer: analyzer\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n            return {\r\n                ...payload||{},\r\n                totalSize: ((((payload||{})['documents']||{})['hits']||{})['total']||{})['value']||0,\r\n                documentAnalyzerMap: documentAnalyzerMap\r\n            }\r\n        }).then(payload => {\r\n            dispatch(analyzerDocumentSourceAction(index, (payload||{})['documentAnalyzerMap']||{})).then(response => {\r\n                let tmpDataList = [];\r\n                ((((payload||{})['documents']||{})['hits']||{})['hits']||[]).forEach(hit => {\r\n                    const source = flat(hit['_source'])\r\n                    tmpDataList.push({key: idKey, value: hit['_id'], term: \"-\"})\r\n                    Object.keys(source).forEach(key => {\r\n                        let term = \"\"\r\n                        if (response[hit['_id']] && response[hit['_id']].length > 0) {\r\n                            let analyzer = response[hit['_id']].find(obj => obj['field'] === key)\r\n                            if (analyzer && analyzer['term'] && analyzer['term'].length > 0) {\r\n                                term = analyzer['term'].join(\", \")\r\n                            }\r\n                        }\r\n                        tmpDataList.push({key: key, value: source[key], term: term})\r\n                    })\r\n                })\r\n                setLoading(false)\r\n                setDataList(tmpDataList)\r\n                setTotalSize(payload['totalSize'])\r\n            })\r\n        }).catch(error => {\r\n            setLoading(false)\r\n            // alert(\"실패.\" + error)\r\n            console.log('error', error)\r\n        })\r\n    }\r\n\r\n    function handleSizeChange(event) {\r\n        setSize(event.target.value)\r\n        fetchDocuments({searchFrom:0, searchSize: event.target.value})\r\n    }\r\n\r\n    function handlePagination(searchFrom) {\r\n        setFrom(searchFrom)\r\n        fetchDocuments({searchFrom:searchFrom})\r\n    }\r\n\r\n    function handleChangeKeyword(searchKeyword) {\r\n        setKeyword(searchKeyword)\r\n        setFrom(0)\r\n        fetchDocuments({searchFrom:0, searchKeyword: searchKeyword})\r\n    }\r\n    // 인덱스가 없으면 무시.\r\n    if (!index) return null;\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box className={classes.form}>\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"Search\"\r\n                                    value={keywordInput}\r\n                                    onChange={event => setKeywordInput(event.target.value)}\r\n                                    onKeyUp={event => {\r\n                                        if (event.keyCode === 13) {\r\n                                            handleChangeKeyword(keywordInput)\r\n                                        }\r\n                                    }}\r\n                                />\r\n                                <IconButton  className={classes.iconButton} onClick={() => handleChangeKeyword(keywordInput)}>\r\n                                    <Search/>\r\n                                </IconButton>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(from - size)}\r\n                                        disabled={from <= 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {\r\n                                        dataList.length > 0 ?\r\n                                            isNaN((from / size) + 1) ? 0 : (from / size) + 1\r\n                                            :\r\n                                            0\r\n                                    }\r\n                                    /\r\n                                    {isNaN(Math.ceil(totalSize / size)) ? 0 : Math.ceil(totalSize / size)}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(from + size)}\r\n                                        disabled={\r\n                                            (isNaN((from / size) + 1) ? 0 : (from / size) + 1)\r\n                                            >=\r\n                                            (isNaN(Math.ceil(totalSize / size)) ? 0 : Math.ceil(totalSize / size))\r\n                                        }\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"right\"}>\r\n                                <FormControl className={classes.formControl}>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-label\"\r\n                                        id=\"demo-simple-select\"\r\n                                        value={size}\r\n                                        onChange={handleSizeChange}\r\n                                    >\r\n                                        {\r\n                                            rowSizeList.map(num => <MenuItem key={num} value={num}>{num}</MenuItem>)\r\n                                        }\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <TableContainer>\r\n                        <Table size={\"small\"}>\r\n                            <colgroup>\r\n                                <col style={{width:'20%'}}/>\r\n                                <col style={{width:'40%'}}/>\r\n                                <col style={{width:'40%'}}/>\r\n                            </colgroup>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>아이디</TableCell>\r\n                                    <TableCell>값</TableCell>\r\n                                    <TableCell>분석결과</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody style={{display: loading ? \"table-row-group\" : \"none\"}}>\r\n                                <TableRow>\r\n                                    <TableCell colSpan={3}>\r\n                                        <Box align={\"center\"}>\r\n                                            <CircularProgress />\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableBody>\r\n                            <TableBody style={{display: loading ? \"none\" : \"table-row-group\"}}>\r\n                                {\r\n                                    dataList.map((data, dataIndex) => {\r\n                                        return (\r\n                                            <TableRow key={`${data['key']}-${dataIndex}`}>\r\n                                                <TableCell>\r\n                                                    {data['key']}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data['value']}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data['term']}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(from - size)}\r\n                                        disabled={from <= 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {\r\n                                        dataList.length > 0 ?\r\n                                            isNaN((from / size) + 1) ? 0 : (from / size) + 1\r\n                                            :\r\n                                            0\r\n                                    }\r\n                                    /\r\n                                    {isNaN(Math.ceil(totalSize / size)) ? 0 : Math.ceil(totalSize / size)}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(from + size)}\r\n                                        disabled={\r\n                                            (isNaN((from / size) + 1) ? 0 : (from / size) + 1)\r\n                                            >=\r\n                                            (isNaN(Math.ceil(totalSize / size)) ? 0 : Math.ceil(totalSize / size))\r\n                                        }\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default connect(store => ({...store.indicesReducers}))(IndexedDataTable)","import React, {useState} from \"react\";\r\nimport {Box, FormControl, FormControlLabel, Radio, RadioGroup} from \"@material-ui/core\";\r\nimport DataEditTable from \"./DataEditTable\";\r\nimport IndexedDataTable from \"./IndexedDataTable\";\r\n\r\nfunction Data() {\r\n    const [chk, setChk] = useState('source'); // source, indexed\r\n\r\n    function handleRadioChange(e) {\r\n        setChk(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <FormControl component=\"fieldset\">\r\n                <RadioGroup row aria-label=\"position\" name=\"position\" defaultValue=\"top\">\r\n                    <FormControlLabel value=\"source\" checked={chk === \"source\"} onChange={handleRadioChange}\r\n                                      control={<Radio color=\"primary\"/>} label=\"기본\"/>\r\n                    <FormControlLabel value=\"indexed\" checked={chk === \"indexed\"} onChange={handleRadioChange}\r\n                                      control={<Radio color=\"primary\"/>} label=\"분석된 색인어\"/>\r\n                </RadioGroup>\r\n            </FormControl>\r\n\r\n            <Box mt={2}>\r\n                {\r\n                    chk === \"source\" ? <DataEditTable/> : <IndexedDataTable />\r\n                }\r\n            </Box>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Data"],"sourceRoot":""}
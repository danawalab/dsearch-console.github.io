{"version":3,"sources":["pages/cluster/index.js"],"names":["Card","styled","MuiCard","spacing","Divider","MuiDivider","Grid","MuiGrid","useStyles","makeStyles","title","fontWeight","addCardButton","border","ClusterCard","classes","cluster","onEditClick","onRemoveClick","to","newTo","showMenu","connection","name","seed","theme","nodes","indices","shards","store","Object","keys","length","React","useState","openMenu","setOpenMenu","open","Boolean","handleClose","event","stopPropagation","item","xs","md","lg","xl","variant","style","cursor","minHeight","onClick","className","align","position","height","right","top","size","display","currentTarget","id","anchorEl","keepMounted","onClose","PaperProps","maxHeight","ITEM_HEIGHT","width","my","container","mt","whiteSpace","backgroundColor","borderRadius","component","color","AddClusterCard","props","showButton","Fragment","justifyContent","m","aria-label","handleClick","AddGuideCard","target","href","connect","clusterReducers","dsearchReducers","dispatch","clusterList","authUser","useHistory","fullScreen","useMediaQuery","useTheme","breakpoints","down","openEditModal","setOpenEditModal","scheme","setScheme","setName","host","setHost","port","setPort","username","setUsername","password","setPassword","kibana","setKibana","setTheme","modalMessage","setModalMessage","connTest","setConnTest","nameError","setNameError","hostError","setHostError","portError","setPortError","usernameError","setUsernameError","passwordError","setPasswordError","selectedClusterId","setSelectedClusterId","openRemoveModal","setOpenRemoveModal","mode","setMode","isProcess","setProcess","toggleOpenAddModal","resetError","requireValidation","toggleOpenEditModal","console","log","useEffect","setClusterList","isManager","gutterBottom","map","key","link","document","createElement","setAttribute","body","appendChild","click","goDashboard","window","outerWidth","outerHeight","Math","ceil","goNewDashboard","fullWidth","aria-setsize","placeholder","value","error","onChange","type","setClusterStatus","then","status","nodeSize","values","node","tmp","filter","addr","catch","disabled","addCluster","message","alert","editCluster","red","removeClusterAction"],"mappings":"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","file":"static/js/71.74c9aeb7.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {makeStyles, useTheme} from '@material-ui/core/styles';\r\nimport styled from \"styled-components\";\r\n\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport LaunchIcon from '@material-ui/icons/Launch';\r\nimport Helmet from 'react-helmet';\r\nimport {title} from \"../../title.json\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Divider as MuiDivider,\r\n    Fab,\r\n    Grid as MuiGrid,\r\n    Link,\r\n    MenuList,\r\n    Select,\r\n    TextField,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport {spacing} from \"@material-ui/system\";\r\nimport {\r\n    addCluster,\r\n    editCluster,\r\n    removeClusterAction,\r\n    setClusterList,\r\n    setClusterStatus\r\n} from \"../../redux/actions/clusterActions\";\r\nimport {red} from \"@material-ui/core/colors\";\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Grid = styled(MuiGrid)(spacing);\r\n\r\nconst useStyles = makeStyles({\r\n    title: {\r\n        fontWeight: \"bold\"\r\n    },\r\n    addCardButton: {\r\n        border: \"1px solid\"\r\n    }\r\n});\r\n\r\nconst ITEM_HEIGHT = 48;\r\n\r\nfunction ClusterCard({classes, cluster, onEditClick, onRemoveClick, to, newTo, showMenu}) {\r\n    const connection = cluster['status']['connection'] || false\r\n    const name = cluster['cluster']['name']\r\n    const seed = `${cluster['cluster']['scheme']}://${cluster['cluster']['host']}:${cluster['cluster']['port']}`\r\n    const theme = cluster['cluster']['theme']\r\n    let nodes = \"N/A\"\r\n    let indices = \"N/A\"\r\n    let shards = \"N/A\"\r\n    let store = \"N/A\"\r\n    if (connection) {\r\n        nodes = Object.keys((cluster['status']||{})['nodes']||{}).length\r\n        indices = cluster['status']['state']['indices']\r\n        shards = cluster['status']['state']['shards']\r\n        store = cluster['status']['state']['store']\r\n    }\r\n\r\n    const [openMenu, setOpenMenu] = React.useState(null);\r\n    const open = Boolean(openMenu);\r\n\r\n    const handleClick = (event) => {\r\n        event.stopPropagation()\r\n        setOpenMenu(event.currentTarget);\r\n    };\r\n    const handleClose = (event) => {\r\n        event.stopPropagation()\r\n        setOpenMenu(null);\r\n    };\r\n\r\n    const handleEdit = (event) => {\r\n        event.stopPropagation()\r\n        onEditClick(cluster)\r\n        handleClose(event)\r\n    }\r\n    const handleRemove = (event) => {\r\n        event.stopPropagation()\r\n        onRemoveClick(cluster)\r\n        handleClose(event)\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} md={6} lg={4} xl={3}>\r\n            <Card variant=\"outlined\" style={{cursor: \"pointer\"}}>\r\n                    <CardContent>\r\n                        <Box style={{minHeight: \"200px\"}} onClick={to}>\r\n\r\n                            <Box className={classes.title} align={\"center\"}>\r\n                                {name}\r\n                                <Box style={{position: \"relative\", height: \"0px\", right: \"-45%\", top: \"15px\"}}>\r\n                                    <IconButton\r\n                                        onClick={newTo}\r\n                                        size={\"small\"}\r\n                                    >\r\n                                        <LaunchIcon />\r\n                                    </IconButton>\r\n                                </Box>\r\n\r\n                                <Box style={{position: \"relative\", height: \"0px\", right: \"-45%\", top: \"-25px\", display: showMenu ? \"block\" : \"none\"}}>\r\n\r\n                                    <IconButton\r\n                                        onClick={handleClick}\r\n                                        size={\"small\"}\r\n                                    >\r\n                                        <MoreVertIcon />\r\n                                    </IconButton>\r\n                                    <Menu\r\n                                        id=\"long-menu\"\r\n                                        anchorEl={openMenu}\r\n                                        keepMounted\r\n                                        open={open}\r\n                                        onClose={handleClose}\r\n                                        PaperProps={{\r\n                                            style: {\r\n                                                maxHeight: ITEM_HEIGHT * 4.5,\r\n                                                width: '20ch',\r\n                                            },\r\n                                        }}\r\n                                    >\r\n                                        <MenuItem onClick={handleEdit}> 수정 </MenuItem>\r\n                                        <MenuItem onClick={handleRemove}> 삭제 </MenuItem>\r\n                                    </Menu>\r\n\r\n                                </Box>\r\n                            </Box>\r\n\r\n\r\n                            <Divider my={2} />\r\n\r\n                            <Grid container mt={3}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        노드\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {seed}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        노드 수\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {nodes}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        인덱스\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {indices}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        샤드\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {shards}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        사용 용량\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {store}\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        색상\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{ display: theme === \"0\" ? \"block\" : \"none\", backgroundColor: \"rgb(27, 36, 48)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"1\" ? \"block\" : \"none\", backgroundColor: \"rgb(255, 255, 255)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"2\" ? \"block\" : \"none\", backgroundColor: \"rgb(25, 118, 210)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"3\" ? \"block\" : \"none\", backgroundColor: \"rgb(56, 142, 60)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"4\" ? \"block\" : \"none\", backgroundColor: \"rgb(57, 73, 171)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                    <Box style={{ display: theme === \"5\" ? \"block\" : \"none\", backgroundColor: \"rgb(0, 121, 107)\", width: \"16px\", height: \"16px\", borderRadius: \"90px\"}}> </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container mt={1}>\r\n                                <Grid item xs={4}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        연결상태\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <Box style={{whiteSpace: \"nowrap\"}}>\r\n                                        {connection ?\r\n                                            <Box component={\"span\"} style={{color: \"green\"}}>정상</Box>\r\n                                            :\r\n                                            <Box component={\"span\"} style={{color: \"red\"}}>실패</Box>\r\n                                        }\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                    </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction AddClusterCard(props) {\r\n    const classes = props.className\r\n    const display = props.showButton ? \"block\" : \"none\"\r\n    return (\r\n        <React.Fragment>\r\n            <Grid item xs={12} md={6} lg={4} xl={3} style={{display: display}}>\r\n                <Card variant=\"outlined\" style={{minHeight: \"245px\"}}>\r\n                    <CardContent>\r\n                        <Box display=\"flex\"\r\n                             justifyContent=\"center\"\r\n                             m={1}\r\n                             mt={10}\r\n                             className={classes.title}\r\n                        >\r\n                            신규 클러스터 추가\r\n                        </Box>\r\n                        <Box display=\"flex\"\r\n                             justifyContent=\"center\"\r\n                             m={2}\r\n                             mt={5}\r\n                        >\r\n                            <Fab color=\"primary\"\r\n                                 aria-label=\"add\"\r\n                                 onClick={() => props.handleClick()}\r\n                            >\r\n                                <AddIcon />\r\n                            </Fab>\r\n                        </Box>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nfunction AddGuideCard(props) {\r\n    const classes = props.className\r\n    return (\r\n        <Grid item xs={12} md={6} lg={4} xl={3}>\r\n            <Card variant=\"outlined\" style={{minHeight: \"245px\"}}>\r\n                <CardContent>\r\n                    <Box display=\"flex\"\r\n                         justifyContent=\"center\"\r\n                         m={1}\r\n                         mt={15}\r\n                         className={classes.title}\r\n                    >\r\n                        {title} 서버설치방법\r\n                    </Box>\r\n                    <Box display=\"flex\"\r\n                         justifyContent=\"center\"\r\n                         m={3}\r\n                    >\r\n                        <Link target=\"_blank\" href=\"https://github.com/danawalab/dsearch/blob/master/README.md\">\r\n                            바로가기\r\n                        </Link>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction Cluster({ dispatch, clusterList, authUser }) {\r\n    const history = useHistory()\r\n    const classes = useStyles();\r\n    const fullScreen = useMediaQuery(useTheme().breakpoints.down('sm'));\r\n    const [openEditModal, setOpenEditModal] = useState(false);\r\n\r\n    const [scheme, setScheme] = useState(\"http\")\r\n    const [name, setName] = useState(\"\")\r\n    const [host, setHost] = useState(\"\")\r\n    const [port, setPort] = useState(\"\")\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [kibana, setKibana] = useState(\"\")\r\n    const [theme, setTheme] = useState(0)\r\n    const [modalMessage, setModalMessage] = useState(\"\")\r\n    const [connTest, setConnTest] = useState(false)\r\n\r\n    const [nameError, setNameError] = useState(false)\r\n    const [hostError, setHostError] = useState(false)\r\n    const [portError, setPortError] = useState(false)\r\n    const [usernameError, setUsernameError] = useState(false)\r\n    const [passwordError, setPasswordError] = useState(false)\r\n\r\n    const [selectedClusterId, setSelectedClusterId] = useState(\"\")\r\n    const [openRemoveModal, setOpenRemoveModal] = useState(false)\r\n\r\n    const [mode, setMode] = useState(\"ADD\")\r\n\r\n    const [isProcess, setProcess] = useState(false)\r\n\r\n    useEffect(() => {\r\n        dispatch(setClusterList())\r\n    }, [])\r\n\r\n    function toggleOpenAddModal() {\r\n        setProcess(false)\r\n        setMode(\"ADD\")\r\n        setNameError(false); setHostError(false); setPortError(false)\r\n        setUsernameError(false); setPasswordError(false)\r\n        setName(\"\"); setScheme(\"http\"); setHost(\"\"); setPort(\"\");\r\n        setUsername(\"\"); setPassword(\"\"); setKibana(\"\");\r\n        setTheme(0); setModalMessage(\"\");\r\n        setConnTest(false)\r\n        setOpenEditModal(!openEditModal)\r\n    }\r\n    function handleClusterTestProcess() {\r\n        setConnTest(false)\r\n        setModalMessage(\"\")\r\n        dispatch(setClusterStatus({ name, host, port, scheme, username, password })).then(status => {\r\n            if (!status['connection']) {\r\n                setConnTest(false)\r\n                setModalMessage(\"연결 실패\")\r\n                return\r\n            }\r\n            setConnTest(true)\r\n            const nodeSize = Object.values(status['nodes']).map(node => {\r\n                const tmp = ((node['http'] || node['http']) || {})\r\n                return tmp['publish_address'] ? `${scheme}://${tmp['publish_address']}` : null\r\n            }).filter(addr => addr !== null).length\r\n            setModalMessage(\"[연결 성공] 노드 수:\" + nodeSize)\r\n        }).catch(error => {\r\n            setConnTest(false)\r\n            setModalMessage(\"\")\r\n            setModalMessage(\"연결 실패\")\r\n            console.error(error)\r\n        })\r\n    }\r\n\r\n    function resetError() {\r\n        setNameError(false); setHostError(false); setPortError(false)\r\n        setUsernameError(false); setPasswordError(false)\r\n    }\r\n    function requireValidation() {\r\n        if (name === \"\") { setNameError(true); return false }\r\n        if (host === \"\") { setHostError(true); return false }\r\n        if (port === \"\" || port === \"0\") { setPortError(true); return false }\r\n        if (scheme === \"https\") {\r\n            if (username === \"\") { setUsernameError(true); return false }\r\n            if (password === \"\") { setPasswordError(true); return false }\r\n        }\r\n        if (!connTest) { return false }\r\n        return true\r\n    }\r\n    function handleAddClusterProcess() {\r\n        setProcess(true)\r\n        resetError()\r\n        if(!requireValidation()) {\r\n            return false\r\n        }\r\n\r\n        dispatch(addCluster({\r\n            name, host, port, scheme,\r\n            username, password,\r\n            kibana, theme\r\n        })).then(cluster => {\r\n            setProcess(false)\r\n            dispatch(setClusterList())\r\n            toggleOpenAddModal()\r\n        }).catch(error => {\r\n            setProcess(false)\r\n            console.log(error)\r\n            setModalMessage(error.message||\"error\")\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n\r\n    function handleEditClusterProcess() {\r\n        resetError()\r\n        if(!requireValidation()) {\r\n            return false\r\n        }\r\n\r\n        dispatch(editCluster(selectedClusterId, {\r\n            name, host, port, scheme,\r\n            username, password,\r\n            kibana, theme\r\n        })).then(cluster => {\r\n            dispatch(setClusterList())\r\n            toggleOpenEditModal()\r\n        }).catch(error => {\r\n            console.log(error)\r\n            setModalMessage(error.message||\"error\")\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n\r\n    function toggleOpenEditModal(cluster) {\r\n        setMode(\"EDIT\")\r\n        console.log('edit', cluster)\r\n        setNameError(false); setHostError(false); setPortError(false)\r\n        setUsernameError(false); setPasswordError(false)\r\n        if (!openEditModal) {\r\n            // opening..\r\n            setSelectedClusterId(cluster['cluster']['id'])\r\n            setName(cluster['cluster']['name']);\r\n            setScheme(cluster['cluster']['scheme']);\r\n            setHost(cluster['cluster']['host']);\r\n            setPort(cluster['cluster']['port']);\r\n            setUsername(cluster['cluster']['username'] || \"\");\r\n            setPassword(cluster['cluster']['password'] || \"\");\r\n            setKibana(cluster['cluster']['kibana'] || \"\");\r\n            setTheme(cluster['cluster']['theme']);\r\n        } else {\r\n            setName(\"\"); setScheme(\"http\"); setHost(\"\"); setPort(\"\");\r\n            setUsername(\"\"); setPassword(\"\"); setKibana(\"\");\r\n            setTheme(0);\r\n        }\r\n        setOpenEditModal(!openEditModal)\r\n    }\r\n\r\n    function toggleOpenRemoveModal(id) {\r\n        setSelectedClusterId(id)\r\n        setOpenRemoveModal(true)\r\n    }\r\n\r\n    function removeClusterProcess() {\r\n        dispatch(removeClusterAction(selectedClusterId)).then(cluster => {\r\n            dispatch(setClusterList())\r\n            setSelectedClusterId(\"\")\r\n            setOpenRemoveModal(false)\r\n        }).catch(error => {\r\n            console.log(error)\r\n            alert(\"실패\")\r\n        })\r\n    }\r\n    function goDashboard(id) {\r\n        const link = document.createElement('a');\r\n        link.setAttribute(\"href\", `${id}/dashboard`)\r\n        link.setAttribute(\"target\", \"_blank\")\r\n        document.body.appendChild(link);\r\n        link.click()\r\n    }\r\n\r\n    function goNewDashboard(event, id) {\r\n        event.stopPropagation()\r\n        let width = window.outerWidth\r\n        let height = window.outerHeight\r\n\r\n        width = Math.ceil(width / 2) <= 1500 ? 1500 : Math.ceil(width / 2)\r\n        height = (Math.ceil(height / 2) <= 900 ? 900 : Math.ceil(height / 2))\r\n\r\n        window.open(`${id}/dashboard`,id,`location=no,directories=no,resizable=no,status=no,toolbar=no,menubar=no,left=${window.outerWidth / 5},top=50,scrollbars=yes,width=${width},height=${height}`)\r\n    }\r\n\r\n    const isManager = authUser['role']['manage']\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"클러스터\"/>\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                클러스터\r\n            </Typography>\r\n            <Divider my={6}/>\r\n\r\n            <Grid container spacing={6}>\r\n\r\n                {clusterList.map(cluster => <ClusterCard key={cluster['cluster']['id']}\r\n                                                         cluster={cluster}\r\n                                                         classes={classes}\r\n                                                         onEditClick={() => toggleOpenEditModal(cluster)}\r\n                                                         onRemoveClick={() => toggleOpenRemoveModal(cluster['cluster']['id'])}\r\n                                                         to={() => goDashboard(cluster['cluster']['id'])}\r\n                                                         newTo={event => goNewDashboard(event, cluster['cluster']['id'])}\r\n                                                         showMenu={isManager}\r\n                />)}\r\n\r\n                <AddClusterCard key={\"add\"}\r\n                                className={classes}\r\n                                handleClick={toggleOpenAddModal}\r\n                                showButton={isManager}\r\n                />\r\n\r\n                <AddGuideCard key={\"guide\"}\r\n                              className={classes}\r\n                />\r\n\r\n            </Grid>\r\n\r\n\r\n            {/*        추가         */}\r\n            <Dialog\r\n                fullScreen={fullScreen}\r\n                open={openEditModal}\r\n                onClose={toggleOpenAddModal}\r\n                fullWidth={true}\r\n            >\r\n                <DialogTitle>\r\n                    클러스터 {mode === \"ADD\" ? \"추가\" : \"수정\"}\r\n                </DialogTitle>\r\n                <DialogContent aria-setsize={500}>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={2}>이름</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <TextField placeholder={\"운영 클러스터\"}\r\n                                       value={name}\r\n                                       error={nameError}\r\n                                       onChange={event => setName(event.target.value)}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Divider my={3} />\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={2}>접속정보</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box>\r\n                                <Select value={scheme}\r\n                                        onChange={event => setScheme(event.target.value)}\r\n                                        fullWidth\r\n                                >\r\n                                    <MenuList variant={\"menu\"} value={\"http\"}>HTTP</MenuList>\r\n                                    <MenuList variant={\"menu\"} value={\"https\"}>HTTPS</MenuList>\r\n                                </Select>\r\n                            </Box>\r\n                            <Box mt={2}>\r\n                                <TextField placeholder=\"127.0.0.1\"\r\n                                           fullWidth\r\n                                           value={host}\r\n                                           error={hostError}\r\n                                           onChange={event => setHost(event.target.value)}\r\n                                />\r\n                            </Box>\r\n                            <Box mt={2}>\r\n                                <TextField placeholder=\"9200\"\r\n                                           fullWidth\r\n                                           type=\"number\"\r\n                                           value={port}\r\n                                           error={portError}\r\n                                           onChange={event => setPort(event.target.value)}\r\n                                />\r\n                            </Box>\r\n                            <Box display={scheme === \"http\" ? \"none\" : \"block\"}>\r\n                                <Box mt={2}>\r\n                                    <TextField placeholder=\"elastic\"\r\n                                               fullWidth\r\n                                               error={usernameError}\r\n                                               value={username}\r\n                                               onChange={event => setUsername(event.target.value)}\r\n                                    />\r\n                                </Box>\r\n                                <Box mt={2}>\r\n                                    <TextField type=\"password\"\r\n                                               placeholder=\"********\"\r\n                                               fullWidth\r\n                                               error={passwordError}\r\n                                               value={password}\r\n                                               onChange={event => setPassword(event.target.value)}\r\n\r\n                                    />\r\n                                </Box>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Divider my={3} />\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={2}>키바나</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box>\r\n                                <TextField placeholder=\"http://kibana:5601\"\r\n                                           fullWidth\r\n                                           value={kibana}\r\n                                           onChange={event => setKibana(event.target.value)}\r\n                                />\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={4}>\r\n                            <Box align={\"center\"} mt={4}>색상</Box>\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <Box mt={2}>\r\n                                <Select value={theme}\r\n                                        onChange={event => setTheme(event.target.value)}\r\n                                        style={{width: \"100%\"}}\r\n                                >\r\n                                    <MenuList value={0} style={{width: \"100%\", backgroundColor: \"rgb(27, 36, 48)\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(27, 36, 48)\", color: \"white\"}}> Dark </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={1} style={{width: \"100%\", backgroundColor: \"rgb(255, 255, 255)\", color: \"black\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(255, 255, 255)\", color: \"black\"}}> Light </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={2} style={{width: \"100%\", backgroundColor: \"rgb(25, 118, 210)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(25, 118, 210)\", color: \"white\"}}> Blue </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={3} style={{width: \"100%\", backgroundColor: \"rgb(56, 142, 60)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(56, 142, 60)\", color: \"white\"}}> Green </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={4} style={{width: \"100%\", backgroundColor: \"rgb(57, 73, 171)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(57, 73, 171)\", color: \"white\"}}> Indigo </Box>\r\n                                    </MenuList>\r\n                                    <MenuList value={5} style={{width: \"100%\", backgroundColor: \"rgb(0, 121, 107)\", color: \"white\"}}>\r\n                                        <Box style={{width: \"100%\", backgroundColor: \"rgb(0, 121, 107)\", color: \"white\"}}> Teal </Box>\r\n                                    </MenuList>\r\n                                </Select>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <br/>\r\n                    <Box display={modalMessage === \"\" ? \"none\" : \"block\"}>\r\n                        {modalMessage}\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button variant={\"outlined\"} onClick={handleClusterTestProcess}> 연결테스트 </Button>\r\n                    <Box display={mode === \"ADD\" ? \"block\" : \"none\"}>\r\n                        <Button color=\"primary\"\r\n                                variant=\"contained\"\r\n                                disabled={!connTest || isProcess}\r\n                                onClick={handleAddClusterProcess}\r\n                        >\r\n                            추가\r\n                        </Button>\r\n                    </Box>\r\n                    <Box display={mode === \"EDIT\" ? \"block\" : \"none\"}>\r\n                        <Button color=\"primary\"\r\n                                variant=\"contained\"\r\n                                disabled={!connTest}\r\n                                onClick={handleEditClusterProcess}\r\n                        >\r\n                            저장\r\n                        </Button>\r\n                    </Box>\r\n                    <Button onClick={toggleOpenAddModal}\r\n                            variant=\"contained\"\r\n                    >\r\n                        취소\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n            {/*    삭제     */}\r\n\r\n            <Dialog open={openRemoveModal} fullWidth={true}>\r\n                <DialogTitle>클러스터 삭제</DialogTitle>\r\n             <DialogContent>\r\n                 <Box style={{color: red['500']}}> 선택하신 클러스터 삭제 하시겠습니까? </Box>\r\n             </DialogContent>\r\n                <DialogActions>\r\n                    <Button style={{backgroundColor: red['200']}}\r\n                            variant=\"contained\"\r\n                            onClick={removeClusterProcess}\r\n                    >\r\n                        삭제\r\n                    </Button>\r\n                    <Button onClick={() => setOpenRemoveModal(false)}\r\n                            variant=\"contained\"\r\n                    >\r\n                        취소\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({ ...store.clusterReducers, ...store.dsearchReducers }))(Cluster);\r\n\r\n"],"sourceRoot":""}
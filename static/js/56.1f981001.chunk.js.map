{"version":3,"sources":["redux/actions/rankingTuningActions.js","pages/analysis/rankingTuning/index.js","redux/actions/indicesActions.js","components/IndicesSelect/index.js"],"names":["client","Client","setDocumentList","data","dispatch","call","uri","method","then","response","type","SET_RANKING_TUNING_DOCUMENT","payload","resetDocumentList","Total","SearchResponse","analyzerTokensMap","useStyles","React","forwardRef","props","ref","innerRef","makeStyles","theme","formControl","minWidth","Card","styled","MuiCard","spacing","Divider","MuiDivider","Table","MuiTable","ids","ScoreTreeView","details","expand","nodeToggle","description","TreeView","defaultExpanded","expanded","onNodeToggle","style","flexGrow","defaultCollapseIcon","defaultExpandIcon","TreeItem","key","nodeId","label","getTreeItemsFromData","treeItems","map","detail","children","undefined","length","value","ResultDocument","result","item","_index","dataList","Object","keys","forEach","id","text","analyzerTokens","find","obj","push","field","tokens","TableBody","index","tokenValue","join","JSON","stringify","TableRow","TableCell","colSpan","_explanation","RankingTuningResults","pageNum","errorMessage","margin","overflow","TableHead","align","number","Typography","eventCode","RankingTuningCard","classes","aceEditor","useRef","inputIndex","useState","setPageNum","progress","setProgress","setExpand","checked","setChecked","autoHeight","setAutoHeight","setErrorMessage","query","setQuery","useEffect","clearInterval","setInterval","windowHeight","Math","ceil","window","innerHeight","handlePagination","document","querySelector","scrollTo","jsonData","assign","explain","from","size","parse","isMultiple","current","catch","error","message","error1","mb","CardContent","Grid","container","xs","md","lg","Box","display","alignItems","justifyContent","mx","TextField","className","inputRef","IndicesSelect","FormControlLabel","whiteSpace","control","Switch","onChange","evnet","color","name","inputProps","border","mode","fontSize","height","width","placeholder","setOptions","useWorker","mt","CircularProgress","Button","fullWidth","variant","onClick","event","str","e","isJson","editor","getValue","replace","Hidden","lgUp","m","Link","href","changeExpand","i","disabled","component","Number","connect","store","rankingTuningReducers","indicesReducers","Fragment","title","gutterBottom","my","setIndexAction","SET_INDEX","setIndicesAction","params","format","SET_INDICES","console","setIndexInfoListAction","SET_INDEX_INFO_LIST","setIndexAliasesAction","SET_INDEX_ALIASES","setIndexSettingsAction","SET_INDEX_SETTINGS","setIndexMappingsAction","SET_INDEX_MAPPINGS","setIndexStateAction","SET_INDEX_STATE","editDynamicQueryAction","setIndexDocumentSourceListAction","columns","keyword","SET_INDEX_DOCUMENT_SOURCE_RESPONSE","editIndexDocumentSourceAction","body","addIndexDocumentSourceAction","deleteIndexDocumentSourceAction","analyzerDocumentSourceAction","analyzerDocument","setIndexManagedAction","action","deleteIndexAction","indices","enableSystem","labelId","target","filter","startsWith","sort"],"mappings":"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","file":"static/js/56.1f981001.chunk.js","sourcesContent":["import {SET_RANKING_TUNING_DOCUMENT} from \"../constants\";\r\nimport Client from '~/Client'\r\n\r\nconst client = new Client()\r\n\r\nexport const setDocumentList = (data) => dispatch => client.call({\r\n    uri: \"/rankingtuning/\",\r\n    method: 'POST',\r\n    data: data\r\n}).then(response => dispatch({type: SET_RANKING_TUNING_DOCUMENT, payload: response.data}))\r\n\r\nexport const resetDocumentList = () => dispatch => dispatch({type: SET_RANKING_TUNING_DOCUMENT, payload: {\r\n        Total : {},\r\n        SearchResponse: [],\r\n        analyzerTokensMap: {}\r\n    }})\r\n\r\n\r\n// export const setDocumentList = (index, data) => dispatch => client.call({\r\n//     uri: \"/elasticsearch/\"+ index+ \"/_search\",\r\n//     method: 'POST',\r\n//     data: data\r\n// }).then(response => dispatch({type: SET_RANKING_TUNING_DOCUMENT, payload: response.data}))","import React, { useEffect, useState, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink as RouterNavLink, useLocation} from \"react-router-dom\";\r\nimport Helmet from 'react-helmet';\r\nimport { spacing } from \"@material-ui/system\";\r\nimport AceEditor from \"react-ace\";\r\nimport { connect } from \"react-redux\";\r\nimport \"ace-builds/src-noconflict/mode-json\";\r\nimport \"ace-builds/src-noconflict/theme-kuroir\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport { setDocumentList } from '@actions/rankingTuningActions'\r\n\r\nimport {\r\n    Box, Snackbar, Link, CircularProgress,\r\n    Table as MuiTable, TableRow, TableCell, TableHead, TableBody,\r\n    TextField, Switch,\r\n    TextareaAutosize as MuiTextareaAutosize,\r\n    Card as MuiCard,\r\n    CardContent,\r\n    Divider as MuiDivider,\r\n    Grid,\r\n    Button,\r\n    Typography,\r\n    Zoom, FormControlLabel, Hidden\r\n} from \"@material-ui/core\";\r\n\r\nimport { TreeView, TreeItem, ToggleButton } from '@material-ui/lab';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport IndicesSelect from \"../../../components/IndicesSelect\";\r\nimport {resetDocumentList} from \"../../../redux/actions/rankingTuningActions\";\r\n\r\nconst NavLink = React.forwardRef((props, ref) => (\r\n    <RouterNavLink innerRef={ref} {...props} />\r\n));\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 250\r\n    }\r\n}));\r\n\r\nconst Card = styled(MuiCard)(spacing);\r\nconst Divider = styled(MuiDivider)(spacing);\r\nconst Table = styled(MuiTable)(spacing);\r\n\r\nlet ids = 1;\r\n\r\nconst getTreeItemsFromData = treeItems => {\r\n    return treeItems.map(detail => {\r\n      let children = undefined;\r\n      if (detail.details && detail.details.length > 0) {\r\n        children = getTreeItemsFromData(detail.details);\r\n      }\r\n    \r\n      return (\r\n        <TreeItem\r\n          key={ids}\r\n          nodeId={ids++}\r\n          label={detail.value + \" : \" + detail.description}\r\n          children={children}\r\n        />\r\n      );\r\n    });\r\n  };\r\n  \r\n\r\n  \r\n\r\nfunction ScoreTreeView({details, expand, nodeToggle, description}) {\r\n    return (\r\n        <TreeView\r\n            defaultExpanded={expand}\r\n            expanded={expand}\r\n            onNodeToggle={nodeToggle}\r\n            style={{ flexGrow: 1 }}\r\n            defaultCollapseIcon={<ExpandMoreIcon />}\r\n            defaultExpandIcon={<ChevronRightIcon />}\r\n        >\r\n            <TreeItem key={ids} nodeId={\"node\" + (ids++)} label={description}>\r\n                {getTreeItemsFromData(details)}\r\n            </TreeItem>\r\n        </TreeView>\r\n    );\r\n}\r\n\r\nfunction ResultDocument({result, item, expand, nodeToggle}) {\r\n    if(result.SearchResponse.length === 0) return <></>;\r\n\r\n    const analyzerTokensMap = result.analyzerTokensMap[item._index]\r\n    let dataList = []\r\n\r\n    Object.keys(item).forEach(key => {\r\n        const id = item['_id']\r\n        let text = item[key]\r\n        if (\"_explanation\" === key || \"_id\"  === key || \"_index\" === key) {\r\n            return true;\r\n        }\r\n        \r\n        if (analyzerTokensMap[id] !== undefined) {\r\n            const analyzerFieldList = analyzerTokensMap[id]\r\n            const analyzerTokens = analyzerFieldList.find(obj => obj['field'] === key)\r\n            if (analyzerTokens !== undefined && analyzerTokens['tokens'] !== undefined && analyzerTokens['tokens'] !== null && analyzerTokens['tokens'].length > 0) {\r\n                dataList.push({\r\n                    field: key,\r\n                    text: text,\r\n                    tokens: analyzerTokens['tokens']\r\n                  })\r\n            } else {\r\n                dataList.push({\r\n                    field: key,\r\n                    text: text,\r\n                    tokens: []\r\n                })\r\n            }\r\n        } else {\r\n            dataList.push({\r\n                field: key,\r\n                text: text,\r\n                tokens: []\r\n            })\r\n        }\r\n    })\r\n\r\n    return (\r\n        <Table>\r\n            <TableBody>\r\n                {\r\n                    dataList.map((data, index) => {\r\n                        let tokenValue = data['tokens'].join(\", \");\r\n                        let text = JSON.stringify(data['text']);\r\n                        let field = data['field'];\r\n                        return (\r\n                            <TableRow key={\"data-\" + index}>\r\n                                <TableCell>{field}</TableCell>\r\n                                <TableCell>{text}</TableCell>\r\n                                <TableCell>{tokenValue.length > 0 ? tokenValue : text}</TableCell>\r\n                            </TableRow>\r\n                        )\r\n                    })\r\n                }\r\n                <TableRow>\r\n                    <TableCell>점수</TableCell>\r\n                    <TableCell colSpan={2}>\r\n                         <ScoreTreeView description={item._explanation.description}\r\n                                        details={item._explanation.details}\r\n                                        expand={expand}\r\n                                        nodeToggle={nodeToggle}\r\n                         />\r\n                     </TableCell>\r\n                 </TableRow>\r\n            </TableBody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nfunction RankingTuningResults({pageNum, result, expand, nodeToggle, errorMessage}) {\r\n    ids = 1;\r\n\r\n    if (errorMessage.length > 0) {\r\n        return (\r\n            <Table style={{ margin: \"9px\", overflow: \"scroll\" }}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\"> 오류. </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            <pre>\r\n                                {errorMessage}\r\n                            </pre>\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        )\r\n    } else {\r\n        return (\r\n            <Table style={{ margin: \"9px\", overflow: \"scroll\" }}>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"right\"> # </TableCell>\r\n                        <TableCell align=\"center\"> 결과 문서 </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {result.SearchResponse.length !== 0 ?\r\n                        result.SearchResponse.map((item, index) => {\r\n                            let number = index + ((pageNum-1)*10) + 1;\r\n                            // return <></>;\r\n                            return (<TableRow key={\"a\" + number}>\r\n                                <TableCell align=\"right\">{number}</TableCell>\r\n                                <TableCell >\r\n                                    <ResultDocument result={result} item={item} expand={expand} nodeToggle={nodeToggle}/>\r\n                                </TableCell>\r\n                            </TableRow>);\r\n                        })\r\n                        : <TableRow>\r\n                            <TableCell align=\"right\"></TableCell>\r\n                            <TableCell align=\"center\">\r\n                                <Typography>현재 검색된 결과가 없습니다.</Typography>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        );\r\n    }\r\n}\r\nlet eventCode = null\r\nfunction RankingTuningCard({dispatch, result, index}) {\r\n    const classes = useStyles()\r\n    let aceEditor = useRef(\"\");\r\n    let inputIndex = useRef('');\r\n\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [progress, setProgress] = useState(false);\r\n    const [expand, setExpand] = useState([]);\r\n    const [checked, setChecked] = useState(false);\r\n    const [autoHeight, setAutoHeight] = useState('600px')\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [query, setQuery] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        dispatch(resetDocumentList())\r\n        setQuery('')\r\n        setPageNum(0)\r\n        setErrorMessage('')\r\n\r\n        if (eventCode !== null) {\r\n            clearInterval(eventCode)\r\n        }\r\n        eventCode = setInterval(() => {\r\n            let windowHeight = Math.ceil(window.innerHeight * 0.6)\r\n            if (windowHeight < 500) {\r\n                windowHeight = 500\r\n            } else if (windowHeight > 900) {\r\n                windowHeight = Math.ceil(window.innerHeight * 0.8)\r\n            }\r\n            setAutoHeight(windowHeight + \"px\")\r\n        }, 500)\r\n        return () => {\r\n            if (eventCode !== null) {\r\n                clearInterval(eventCode)\r\n            }\r\n        }\r\n    }, [])\r\n\r\n\r\n    const handleChecked = (evnet) =>{\r\n        setChecked(!checked);\r\n    }\r\n\r\n    const handleExpandAll = (event) =>{\r\n        let changeExpand = [];    \r\n        for (let i = 1; i <= ids; i++)\r\n            changeExpand.push(i);\r\n        setExpand(changeExpand)\r\n    }\r\n\r\n    const handleFoldAll = (event) =>{\r\n        setExpand([])\r\n    }\r\n\r\n    function isJson(str) {\r\n        try {\r\n            let json = JSON.parse(str);\r\n            return (typeof json === 'object');\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n    const handleSearchQuery = (event) =>{\r\n        // dispatch(resetDocumentList())\r\n        setPageNum(0)\r\n        setQuery('')\r\n        setErrorMessage('')\r\n\r\n        ids = 1;\r\n        if(!isJson(aceEditor.current.editor.getValue())){\r\n            setErrorMessage(\"올바른 JSON 형식이 아닙니다.\")\r\n            return;\r\n        }\r\n\r\n        /* 스크롤 top으로 위치 시키기 */\r\n        document.querySelector(\"#move\").scrollTo(0, 0);\r\n\r\n        setProgress(true);\r\n        let jsonData = JSON.parse(aceEditor.current.editor.getValue());\r\n        jsonData.explain = true;\r\n        jsonData.from = 0;\r\n        jsonData.size = 10;\r\n        let data = {};\r\n\r\n        if(checked){\r\n            data.isMultiple = true;\r\n            data.index = inputIndex.current.value.replace(/ /gi, \"\");\r\n            data.text = JSON.stringify(jsonData);\r\n        } else {\r\n            data.isMultiple = true;\r\n            data.index = index;\r\n            data.text = JSON.stringify(jsonData);\r\n        }\r\n\r\n        dispatch(setDocumentList(data)).then((result) => {\r\n            if( result.payload.Total.value > 0 ) setPageNum(1);\r\n            else setPageNum(0);\r\n            setProgress(false);\r\n            setQuery(aceEditor.current.editor.getValue())\r\n        }).catch((error)=>{\r\n            setQuery('')\r\n            dispatch(resetDocumentList())\r\n            setPageNum(0);\r\n            setProgress(false);\r\n            try {\r\n                setErrorMessage(error.response.data.message)\r\n            } catch (error1) {\r\n                setErrorMessage(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    function nodeToggle(event, expanded) {\r\n        setExpand(expanded)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        // dispatch(resetDocumentList())\r\n        setErrorMessage('')\r\n        ids = 1;\r\n        // if(!isJson(aceEditor.current.editor.getValue())){\r\n        //     setErrorMessage(\"올바른 JSON 형식이 아닙니다.\")\r\n        //     return;\r\n        // }\r\n        document.querySelector(\"#move\").scrollTo(0, 0);\r\n        setProgress(true);\r\n        // let jsonData = JSON.parse(aceEditor.current.editor.getValue());\r\n        let jsonData = Object.assign({\r\n            explain: true,\r\n            from: ((pageNum - 1) * 10),\r\n            size: 10\r\n        }, JSON.parse(query))\r\n        // jsonData.explain = true;\r\n        // jsonData.from = (pageNum - 1) * 10;\r\n        // jsonData.size = 10;\r\n\r\n        let data = {};\r\n        if(checked){\r\n            data.isMultiple = true;\r\n            data.index = inputIndex.current.value;\r\n        }else{\r\n            data.isMultiple = true;\r\n            data.index = index;\r\n        }\r\n        \r\n        data.text = JSON.stringify(jsonData);\r\n        dispatch(setDocumentList(data)).then(() => {\r\n            setProgress(false);\r\n        }).catch((error) => {\r\n            dispatch(resetDocumentList())\r\n            try {\r\n                setErrorMessage(error.response.data.message)\r\n            } catch (error1) {\r\n                setErrorMessage(error)\r\n            }\r\n        })\r\n        setPageNum(pageNum)\r\n    }\r\n\r\n    return (\r\n        <Card mb={6}>\r\n            <CardContent>\r\n\r\n                <Grid container>\r\n                    <Grid item xs={12} md={12} lg={5}>\r\n\r\n                        <Box display=\"flex\"  alignItems=\"center\"  justifyContent=\"space-between\" mx={3} mb={2}>\r\n                            {checked ? <TextField className={classes.formControl} inputRef={inputIndex} label=\"인덱스를 입력해주세요\"/> : <IndicesSelect />}\r\n                            <FormControlLabel\r\n                                style={{whiteSpace: \"nowrap\"}}\r\n                                control={\r\n                                    <Switch\r\n                                        checked={checked}\r\n                                        onChange={handleChecked}\r\n                                        color=\"primary\"\r\n                                        name=\"IndexModeSelector\"\r\n                                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                                    />\r\n                                }\r\n                                label=\"직접 입력\"\r\n                            />\r\n                        </Box>\r\n\r\n                        <Box mx={3} style={{border: \"1px solid silver\"}}>\r\n                            <AceEditor\r\n                                ref={aceEditor}\r\n                                id=\"aceEditor\"\r\n                                mode=\"json\"\r\n                                theme=\"kuroir\"\r\n                                fontSize=\"15px\"\r\n                                height={autoHeight}\r\n                                width=\"100%\"\r\n                                placeholder=\"검색쿼리를 입력해주세요.\"\r\n                                setOptions={{ useWorker: false }}\r\n                            />\r\n                        </Box>\r\n\r\n                        <Box align=\"right\" mx={3} mt={3} align={\"center\"}>\r\n                            {progress? <CircularProgress /> : <Button fullWidth variant=\"outlined\" color=\"primary\" onClick={handleSearchQuery}>검색</Button>}\r\n                        </Box>\r\n\r\n                        {/*<Snackbar open={alert} autoHideDuration={5000} onClose={handleSnackBarClose}>*/}\r\n                        {/*    <MuiAlert elevation={6} variant=\"filled\" severity=\"error\">*/}\r\n                        {/*        올바른 형식의 JSON이 아닙니다.*/}\r\n                        {/*    </MuiAlert>*/}\r\n                        {/*</Snackbar>*/}\r\n                    </Grid>\r\n                    <Grid item xs={12} md={12} lg={7}>\r\n\r\n                        <Hidden lgUp>\r\n                            <Box mt={10}> </Box>\r\n                        </Hidden>\r\n\r\n                        <Box display=\"flex\" alignItems=\"center\"  justifyContent=\"space-between\" mx={3} style={{height: \"52px\"}}>\r\n                            <Typography variant=\"h6\">총 {result.Total.value ? result.Total.value : \"0\"}건의 검색결과</Typography>\r\n                            <Box display=\"flex\">\r\n                                <Box m={2}><Link href=\"#\" onClick={handleExpandAll} > + 점수 펼치기 </Link></Box>\r\n                                <Box m={2}><Link href=\"#\" onClick={handleFoldAll}> - 점수 접기 </Link></Box>\r\n                            </Box>\r\n                        </Box>\r\n                        <Box style={{overflow: \"scroll\", height: autoHeight, border: \"1px solid silver\"}} mx={3} id=\"move\">\r\n                                <RankingTuningResults pageNum={pageNum} result={result} expand={expand} nodeToggle={nodeToggle} errorMessage={errorMessage}/>\r\n                        </Box>\r\n                        <Box align=\"center\" mx={3} mt={3}>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                onClick={() => handlePagination(pageNum - 1)}\r\n                                disabled={pageNum === 0 || pageNum === 1 }\r\n                                > 이전 </Button>\r\n                            <Box component={\"span\"} m={3}>\r\n                                {pageNum} / {result.Total.value ? ( Math.ceil(Number(result.Total.value) / 10)) : \"0\" }\r\n                            </Box>\r\n                            <Button\r\n                                variant=\"outlined\"\r\n                                color=\"primary\"\r\n                                onClick={() => handlePagination(pageNum + 1)}\r\n                                disabled={pageNum === 0 ? true : Math.ceil(Number(result.Total.value) / 10) === pageNum ? true : false}\r\n                                > 다음 </Button>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                {/*<Grid container>*/}\r\n                {/*    <Grid item xs={12}>*/}\r\n                {/*        <Grid container>*/}\r\n                {/*            <Grid item xs={12} md={12} lg={4}>*/}\r\n                {/*                <Box display=\"flex\"  alignItems=\"center\"  justifyContent=\"space-between\" mx={3} mb={2}>*/}\r\n                {/*                    {checked ? <TextField className={classes.formControl} inputRef={inputIndex} label=\"인덱스를 입력해주세요\"/> : <IndicesSelect />}*/}\r\n                {/*                    <FormControlLabel*/}\r\n                {/*                        style={{whiteSpace: \"nowrap\"}}*/}\r\n                {/*                        control={*/}\r\n                {/*                            <Switch*/}\r\n                {/*                                checked={checked}*/}\r\n                {/*                                onChange={handleChecked}*/}\r\n                {/*                                color=\"primary\"*/}\r\n                {/*                                name=\"IndexModeSelector\"*/}\r\n                {/*                                inputProps={{ 'aria-label': 'primary checkbox' }}*/}\r\n                {/*                            />*/}\r\n                {/*                        }*/}\r\n                {/*                        label=\"직접 입력\"*/}\r\n                {/*                    />*/}\r\n                {/*                </Box>*/}\r\n                {/*            </Grid>*/}\r\n                {/*            <Grid item xs={12} md={12} lg={8}>*/}\r\n                {/*            /!* justifyContent=\"space-between\" *!/*/}\r\n                {/*                <Box display=\"flex\" alignItems=\"center\"  justifyContent=\"space-between\" mx={3}>*/}\r\n                {/*                <Typography variant=\"h6\">총 {result.Total.value ? result.Total.value : \"0\"}건의 검색결과</Typography>*/}\r\n                {/*                <Box display=\"flex\">*/}\r\n                {/*                    <Box m={2}><Link href=\"#\" onClick={handleExpandAll} > + 점수 펼치기 </Link></Box>*/}\r\n                {/*                    <Box m={2}><Link href=\"#\" onClick={handleFoldAll}> - 점수 접기 </Link></Box>*/}\r\n                {/*                </Box>*/}\r\n                {/*                /!* <FormControlLabel */}\r\n                {/*                    control={<Checkbox checked={checked} onChange={handleExpandChange} name=\"selected\" />}*/}\r\n                {/*                    label=\"펼치기\"*/}\r\n                {/*                /> *!/*/}\r\n                {/*                </Box>*/}\r\n                {/*            </Grid>*/}\r\n                {/*        </Grid>*/}\r\n                {/*    </Grid>*/}\r\n\r\n                {/*    <Grid item xs={12}>*/}\r\n                {/*        <Grid container style={{height: autoHeight}}>*/}\r\n                {/*            <Grid item xs={12} md={12} lg={4}>*/}\r\n                {/*                <Box mx={3} style={{border: \"1px solid silver\"}}>*/}\r\n                {/*                    <AceEditor*/}\r\n                {/*                        ref={aceEditor}*/}\r\n                {/*                        id=\"aceEditor\"*/}\r\n                {/*                        mode=\"json\"*/}\r\n                {/*                        theme=\"kuroir\"*/}\r\n                {/*                        fontSize=\"15px\"*/}\r\n                {/*                        height={autoHeight}*/}\r\n                {/*                        width=\"100%\"*/}\r\n                {/*                        placeholder=\"검색쿼리를 입력해주세요.\"*/}\r\n                {/*                        setOptions={{ useWorker: false }}*/}\r\n                {/*                    />*/}\r\n                {/*                </Box>*/}\r\n                {/*            </Grid>*/}\r\n                {/*            <Grid item xs={12} md={12} lg={8}>*/}\r\n                {/*                <Box style={{overflow: \"scroll\", height: autoHeight, border: \"1px solid silver\"}} mx={3} id=\"move\">*/}\r\n                {/*                        <RankingTuningResults pageNum={pageNum} result={result} expand={expand} nodeToggle={nodeToggle}/>*/}\r\n                {/*                </Box>*/}\r\n                {/*            </Grid>*/}\r\n                {/*        </Grid>*/}\r\n                {/*    </Grid>*/}\r\n\r\n                {/*    <Grid item xs={12}>*/}\r\n                {/*        <Grid container>*/}\r\n                {/*            <Grid item xs={12} md={4}>*/}\r\n                {/*                <Box align=\"right\" mx={3} mt={3}>*/}\r\n                {/*                    {progress? <CircularProgress /> : <Button variant=\"outlined\" color=\"primary\" onClick={handleSearchQuery}>검색</Button>}*/}\r\n                {/*                </Box>*/}\r\n                {/*                <Snackbar open={alert} autoHideDuration={5000} onClose={handleSnackBarClose}>*/}\r\n                {/*                    <MuiAlert elevation={6} variant=\"filled\" severity=\"error\">*/}\r\n                {/*                        올바른 형식의 JSON이 아닙니다.*/}\r\n                {/*                    </MuiAlert>*/}\r\n                {/*                </Snackbar>*/}\r\n                {/*            </Grid>*/}\r\n\r\n                {/*            <Grid item xs={12} md={8}>*/}\r\n                {/*                <Box align=\"center\" mx={3} mt={3}>*/}\r\n                {/*                    <Button */}\r\n                {/*                        variant=\"outlined\" */}\r\n                {/*                        color=\"primary\"*/}\r\n                {/*                        onClick={() => handlePagination(pageNum - 1)}*/}\r\n                {/*                        disabled={pageNum === 0 || pageNum === 1 }*/}\r\n                {/*                        > 이전 </Button>*/}\r\n                {/*                    <Box component={\"span\"} m={3}>*/}\r\n                {/*                        {pageNum} / {result.Total.value ? ( Math.ceil(Number(result.Total.value) / 10)) : \"0\" }*/}\r\n                {/*                    </Box>*/}\r\n                {/*                    <Button */}\r\n                {/*                        variant=\"outlined\" */}\r\n                {/*                        color=\"primary\"*/}\r\n                {/*                        onClick={() => handlePagination(pageNum + 1)}*/}\r\n                {/*                        disabled={pageNum === 0 ? true : Math.ceil(Number(result.Total.value) / 10) === pageNum ? true : false}*/}\r\n                {/*                        > 다음 </Button>*/}\r\n                {/*                </Box>*/}\r\n                {/*            </Grid>*/}\r\n                {/*        </Grid>*/}\r\n                {/*    </Grid>*/}\r\n                {/*</Grid>*/}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction RankingTuning({ dispatch, result, index}) {\r\n\r\n    useEffect(() => {\r\n        return () => dispatch(resetDocumentList())\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Helmet title=\"Blank\" />\r\n            <Typography variant=\"h3\" gutterBottom display=\"inline\">\r\n                랭킹튜닝\r\n            </Typography>\r\n\r\n            <Divider my={6} />\r\n\r\n            <Grid container spacing={6}>\r\n                <Grid item xs={12}  >\r\n                    <RankingTuningCard dispatch={dispatch} result={result} index={index} />\r\n                </Grid>\r\n            </Grid>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    result: store.rankingTuningReducers.result,\r\n    index: store.indicesReducers.index\r\n}))(RankingTuning);\r\n","import Client from '~/Client'\r\nimport {\r\n    SET_INDEX,\r\n    SET_INDEX_ALIASES, SET_INDEX_DOCUMENT_SOURCE_RESPONSE,\r\n    SET_INDEX_DOCUMENTS,\r\n    SET_INDEX_INFO_LIST,\r\n    SET_INDEX_MAPPINGS,\r\n    SET_INDEX_SETTINGS,\r\n    SET_INDEX_STATE,\r\n    SET_INDICES\r\n} from \"../constants\";\r\n\r\n\r\nconst client = new Client()\r\n\r\n\r\nexport const setIndexAction = (index) => dispatch => dispatch({type: SET_INDEX, payload: index})\r\n\r\nexport const setIndicesAction = () => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/_cat/indices`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDICES, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const setIndexInfoListAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/_cat/indices/${index}`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_INFO_LIST, payload: response.data}))\r\n        .catch(error => console.error(error))\r\n\r\n\r\nexport const setIndexAliasesAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_alias`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_ALIASES, payload: (response.data[index] || {})['aliases']}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const setIndexSettingsAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_settings?include_defaults`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_SETTINGS, payload: response.data[index]||{}}))\r\n        .catch(error => console.error(error))\r\n\r\nexport const setIndexMappingsAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_mappings`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_MAPPINGS, payload: ((response.data[index] || {})['mappings']||{}) }))\r\n        .catch(error => console.error(error))\r\n    // dispatch({type: SET_INDEX_MAPPINGS, payload: ((response.data[index] || {})['mappings']||{})['properties'] })\r\n\r\nexport const setIndexStateAction = (index) => dispatch =>\r\n    client.call({\r\n        uri: `/elasticsearch/${index}/_stats`,\r\n        params: {\r\n            format: \"json\",\r\n        }\r\n    })\r\n        .then(response => dispatch({type: SET_INDEX_STATE, payload: response.data }))\r\n        .catch(error => console.error(error))\r\n\r\nexport const editDynamicQueryAction = (index, query) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_settings`,\r\n    method: \"PUT\",\r\n    data: query\r\n})\r\n\r\n\r\nexport const setIndexDocumentsAction = ({index, pageNum, rowSize, id, analysis}) => dispatch => client.call({\r\n    uri: `/indices/${index}/_docs`,\r\n    params: {\r\n        index,\r\n        pageNum,\r\n        rowSize,\r\n        id,\r\n        analysis\r\n    }\r\n}).then(response => dispatch({\r\n    type: SET_INDEX_DOCUMENTS,\r\n    payload: response.data,\r\n})).catch(err => console.error(err))\r\n\r\n\r\nexport const setIndexDocumentSourceListAction = ({index, from, size, id, columns=[], keyword = null}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_search`,\r\n    method: 'post',\r\n    data: id !== undefined && id !== null && id !== \"\" ?\r\n        { \"query\": { \"match\": { \"_id\": id } }, from, size, \"sort\": [{ \"_id\": { \"order\": \"desc\" } }] }\r\n        :\r\n        keyword !== undefined && keyword !== null && keyword !== \"\"?\r\n            { \"query\": {\r\n                // \"bool\": {\r\n                //     \"minimum_should_match\": 1,\r\n                //     \"should\": (columns.map(c =>  ({ \"match\": { [c]: keyword } }))  ) }\r\n                    \"multi_match\" : {\r\n                        \"query\":    keyword,\r\n                        \"fields\": columns,\r\n                        \"operator\": \"or\"\r\n                    }},\r\n                from,\r\n                size,\r\n                \"sort\": [{ \"_score\": { \"order\": \"desc\" } }, { \"_id\": { \"order\": \"desc\" } }] }\r\n            :\r\n            { from, size, \"sort\": [ { \"_score\": { \"order\": \"desc\" } }, { \"_id\": { \"order\": \"desc\" } }] }\r\n}).then(response => {\r\n    dispatch({ type: SET_INDEX_DOCUMENT_SOURCE_RESPONSE, payload: response.data })\r\n    return response.data;\r\n})\r\n\r\nexport const editIndexDocumentSourceAction = ({index, id, body}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc/${id}`,\r\n    method: 'put',\r\n    data: body\r\n}).then(response => response.data)\r\n\r\nexport const addIndexDocumentSourceAction = ({index, body}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc`,\r\n    method: 'post',\r\n    data: body\r\n}).then(response => response.data)\r\n\r\nexport const deleteIndexDocumentSourceAction = ({index, id}) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/_doc/${id}`,\r\n    method: 'DELETE',\r\n}).then(response => response.data)\r\n\r\nexport const analyzerDocumentSourceAction = (index, analyzerDocument) => dispatch => client.call({\r\n    uri: `/indices/${index}/analyzer`,\r\n    method: \"post\",\r\n    data: analyzerDocument\r\n}).then(response => response.data)\r\n\r\n\r\nexport const setIndexManagedAction = (action, index) => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}/${action}`,\r\n    method: \"post\"\r\n}).then(response => response.data)\r\n\r\nexport const deleteIndexAction = index => dispatch => client.call({\r\n    uri: `/elasticsearch/${index}`,\r\n    method: \"delete\"\r\n}).then(response => response.data)","import React, { useEffect } from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Box, FormControl, InputLabel, MenuItem, Select, Checkbox} from \"@material-ui/core\";\r\nimport {setIndexAction, setIndicesAction} from \"../../redux/actions/indicesActions\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 100\r\n    }\r\n}));\r\n\r\nfunction IndicesSelect({dispatch, indices, index, enableSystem=true}) {\r\n    const classes = useStyles()\r\n    const handleChange = (event) => {\r\n        dispatch(setIndexAction(event.target.value))\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(setIndicesAction())\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box>\r\n                <FormControl className={classes.formControl}>\r\n                    <InputLabel id=\"demo-simple-select-label\">인덱스</InputLabel>\r\n                    <Select\r\n                        labelId=\"demo-simple-select-label\"\r\n                        id=\"demo-simple-select\"\r\n                        value={index}\r\n                        onChange={handleChange}\r\n                    >\r\n                        {\r\n                            indices.filter(index => !enableSystem ? !index['index'].startsWith(\".\") : true ).map(index => index['index']).sort()\r\n                                .map((index, i) => (<MenuItem key={i} value={index}>{index}</MenuItem>))\r\n                            // indices.filter(index => !enableSystem ? !index['index'].startsWith(\".\") : true )\r\n                            //     .map((index, i) => (<MenuItem key={i} value={index['index']}>{index['index']}</MenuItem>))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                {/*<Checkbox*/}\r\n                {/*    defaultChecked*/}\r\n                {/*    color=\"default\"*/}\r\n                {/*    inputProps={{ 'aria-label': 'checkbox with default color' }}*/}\r\n                {/*/>*/}\r\n            </Box>\r\n            <br/>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default connect(store => ({\r\n    ...store.indicesReducers,\r\n}))(IndicesSelect);\r\n"],"sourceRoot":""}
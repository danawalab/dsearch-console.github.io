{"version":3,"sources":["../node_modules/@material-ui/icons/esm/OfflinePin.js","../node_modules/@material-ui/icons/esm/Delete.js","components/DynamicTable/index.js","pages/analysis/dictionary/Set.js","pages/analysis/dictionary/Synonym.js","pages/analysis/dictionary/Space.js","pages/analysis/dictionary/Synonym2Way.js","pages/analysis/dictionary/Custom.js","pages/analysis/dictionary/WrapperTabPanel.js","../node_modules/@material-ui/core/esm/Card/Card.js","../node_modules/@material-ui/core/esm/TableHead/TableHead.js","../node_modules/@material-ui/core/esm/styles/makeStyles.js","../node_modules/@material-ui/core/esm/InputLabel/InputLabel.js","../node_modules/@material-ui/core/esm/FormLabel/FormLabel.js","utils.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js","../node_modules/@material-ui/core/esm/TableContainer/TableContainer.js","../node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js"],"names":["createSvgIcon","React","createElement","d","useStyles","makeStyles","theme","input","border","DynamicTable","dataList","from","limit","showCheckBox","onSelectClick","isEdit","onUpdate","onDelete","classes","useState","selected","setSelected","array","setArray","useEffect","map","data","fields","field","rowCount","forEach","length","rows","i","cols","j","push","id","text","splice","TableContainer","component","Paper","Table","size","TableHead","TableRow","index","Fragment","key","TableCell","padding","Checkbox","defaultChecked","onChange","event","checked","ids","row","handleSelectAllClick","target","Box","align","TableBody","rowIdx","col","colIdx","includes","concat","filter","select","InputBase","className","value","cloneArray","slice","handleChange","fullWidth","b","IconButton","iconButton","onClick","updateFields","console","log","handleEdit","OfflinePin","Delete","prototype","PropTypes","isRequired","Button","styled","MuiButton","spacing","sizing","palette","MuiBox","formControl","minWidth","form","display","alignItems","width","marginLeft","flex","borderBottom","divider","height","margin","right","textAlign","checkedList","searchedKeyword","connect","store","authUser","dsearchReducers","dictionary","setting","result","dataSet","dispatch","useDispatch","searchColumns","setSearchColumns","keyword","setKeyword","isMatch","setMatch","mode","setMode","pageNum","setPageNum","rowSize","createId","setCreateId","createKeyword","setCreateKeyword","createValue","setCreateValue","deleteDialogOpen","setDeleteDialogOpen","createDialogOpen","setCreateDialogOpen","toggleCheckbox","handlePagination","num","setDictionary","handleSearchClick","a","deleteDictionary","utils","sleep","createDictionary","column","hits","hit","createLabels","colId","find","colKeyword","colValue","Card","CardContent","Grid","container","item","xs","FormControl","Select","MenuItem","placeholder","onKeyUp","keyCode","type","aria-label","Search","color","md","variant","mx","downloadDictionary","mr","role","analysis","disabled","m","Dialog","open","onClose","DialogTitle","style","cursor","DialogContent","mt","TextField","autoFocus","DialogActions","DialogContentText","createSearchColumn","createSearchKeyword","confirm","checkedListId","columns","reduce","o","k","Object","assign","updateDictionary","dictionaryReducers","activeIndex","settings","Viewer","Set","Synonym","Space","Synonym2Way","Custom","props","ref","_props$raised","raised","other","_objectWithoutProperties","_extends","clsx","root","elevation","withStyles","overflow","name","tablelvl2","_props$component","Component","Tablelvl2Context","Provider","stylesOrCreator","options","arguments","undefined","makeStylesWithoutDefault","defaultTheme","InputLabel","_props$disableAnimati","disableAnimation","shrinkProp","shrink","muiFormControl","useFormControl","filled","focused","adornedStart","fcs","formControlState","states","FormLabel","animated","marginDense","outlined","error","required","asterisk","transformOrigin","position","left","top","transform","transition","transitions","create","duration","shorter","easing","easeOut","zIndex","pointerEvents","children","capitalize","secondary","typography","body1","lineHeight","primary","main","colorSecondary","ms","Promise","resolve","setTimeout","defaultCheckedIcon","CheckBoxIcon","defaultIcon","CheckBoxOutlineBlankIcon","defaultIndeterminateIcon","IndeterminateCheckBoxIcon","_props$checkedIcon","checkedIcon","_props$color","_props$icon","icon","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","inputProps","_props$size","SwitchBase","fontSize","colorPrimary","backgroundColor","fade","action","hoverOpacity","overflowX","Typography","marginBottom"],"mappings":"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","file":"static/js/30.d5d02916.chunk.js","sourcesContent":["import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm5 16H7v-2h10v2zm-6.7-4L7 10.7l1.4-1.4 1.9 1.9 5.3-5.3L17 7.3 10.3 14z\"\n}), 'OfflinePin');","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');","import React, {useState, useRef, useEffect, createRef} from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {\r\n    Box,\r\n    Checkbox,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    IconButton, InputBase\r\n} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {\r\n    Delete as DeleteIcon,\r\n    SaveAlt as SaveAltIcon,\r\n    OfflinePin as OfflinePinIcon\r\n} from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    input: { border: \"0px\" },\r\n}));\r\n\r\nfunction DynamicTable({dataList, from = 0, limit = 100000, showCheckBox = false, onSelectClick, isEdit = false, onUpdate = () => {}, onDelete = () => {}}) {\r\n    const classes = useStyles();\r\n    const [selected, setSelected] = useState([])\r\n    const [array, setArray] = useState([])\r\n\r\n    useEffect(() => {\r\n        setArray([...dataList.map(data => data.data)])\r\n    }, [dataList])\r\n\r\n    useEffect(() => {\r\n        setSelected([])\r\n    }, [showCheckBox])\r\n\r\n\r\n    const fields = dataList.map(data => data.field);\r\n\r\n    let rowCount = 0;\r\n    dataList.forEach(data => rowCount < data.data.length ? rowCount = data.data.length : rowCount);\r\n\r\n    let rows = [];\r\n    for (let i = 0; i < rowCount; i++) {\r\n        let cols = [];\r\n        for (let j = 0; j < fields.length; j++) {\r\n            if (array[j]) {\r\n                if (typeof array[j][i] !== 'object') {\r\n                    cols.push({id: array[j][i], text: array[j][i]})\r\n                } else {\r\n                    cols.push({id: array[j][i]['id'], text: array[j][i]['text']})\r\n                }\r\n            }\r\n        }\r\n        rows.push(cols)\r\n    }\r\n    rows = rows.splice(from, limit)\r\n\r\n    function handleSelectAllClick(checked) {\r\n        let ids = []\r\n        rows.forEach(row => {\r\n            onSelectClick(row[0].id, checked)\r\n            ids.push(row[0].id)\r\n        })\r\n        checked ? setSelected(ids) : setSelected([])\r\n    }\r\n    function handleSelectClick(id, checked) {\r\n        onSelectClick(id, checked)\r\n        checked ? setSelected(selected.concat(id)) : setSelected(selected.filter(select => select !== id))\r\n    }\r\n    function handleChange(event, id, colIdx, rowIdx) {\r\n        let cloneArray = array.slice()\r\n        cloneArray[colIdx][rowIdx]['text'] = event.target.value\r\n        setArray(cloneArray)\r\n    }\r\n    function handleEdit(id, rowIdx) {\r\n        let cols = []\r\n        let updateFields = []\r\n        for (let i = 0; i < array.length; i++) {\r\n            cols.push(array[i][rowIdx]['text'] || '')\r\n            console.log(fields[i])\r\n            updateFields.push(fields[i] || '')\r\n        }\r\n        onUpdate(id, cols, updateFields)\r\n    }\r\n    function handleDelete(id) {\r\n        onDelete(id)\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table size=\"small\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        {\r\n                            fields.map((field, index) => (\r\n                                <React.Fragment key={field}>\r\n                                    {\r\n                                        showCheckBox && index === 0  ?\r\n                                            <TableCell padding=\"checkbox\">\r\n                                                <Checkbox defaultChecked={false} onChange={(event) => handleSelectAllClick(event.target.checked)}/>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                    <TableCell>{field}</TableCell>\r\n                                </React.Fragment>\r\n                            ))\r\n                        }\r\n                        {\r\n                            showCheckBox && isEdit ?\r\n                                <TableCell>\r\n                                    <Box align={\"center\"}>\r\n                                        액션\r\n                                    </Box>\r\n                                </TableCell>\r\n                                :\r\n                                null\r\n                        }\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {\r\n                        rows.map((cols, rowIdx) => {\r\n                            return (\r\n                                <TableRow key={rowIdx}>\r\n                                    {\r\n                                        cols.map((col, colIdx) => {\r\n                                            return (\r\n                                                <React.Fragment key={colIdx}>\r\n                                                    {\r\n                                                        showCheckBox && colIdx === 0 ?\r\n                                                            <TableCell padding=\"checkbox\">\r\n                                                                <Checkbox checked={selected.includes(col.id)}\r\n                                                                          onChange={(event) => handleSelectClick(col.id, event.target.checked)}\r\n                                                                />\r\n                                                            </TableCell>\r\n                                                            :\r\n                                                            null\r\n                                                    }\r\n                                                    <TableCell>\r\n                                                        {\r\n                                                            showCheckBox && isEdit ?\r\n                                                                // 수정 모드\r\n                                                                <InputBase className={classes.input}\r\n                                                                           value={col.text|| ''}\r\n                                                                           /*순서 주의 (colIdx, rowIdx)*/\r\n                                                                           onChange={(event) => handleChange(event, col.id, colIdx, rowIdx)}\r\n                                                                           fullWidth\r\n                                                                           b={0}\r\n                                                                />\r\n                                                                :\r\n                                                                // 조회 모드\r\n                                                                col.text\r\n                                                        }\r\n                                                    </TableCell>\r\n                                                </React.Fragment>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    {\r\n                                        showCheckBox && isEdit ?\r\n                                            <TableCell>\r\n                                                <Box align={\"center\"}>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleEdit(cols[0]['id'], rowIdx)}\r\n                                                    >\r\n                                                        <OfflinePinIcon/>\r\n                                                    </IconButton>\r\n                                                    <IconButton size={\"small\"}\r\n                                                                className={classes.iconButton}\r\n                                                                onClick={() => handleDelete(cols[0]['id'])}\r\n                                                    >\r\n                                                        <DeleteIcon/>\r\n                                                    </IconButton>\r\n\r\n                                                </Box>\r\n                                            </TableCell>\r\n                                            :\r\n                                            null\r\n                                    }\r\n                                </TableRow>\r\n                            )\r\n                        })\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nDynamicTable.prototype = {\r\n    dataList: PropTypes.array.isRequired\r\n};\r\n\r\nexport default DynamicTable","import React, {useEffect, useState} from \"react\";\r\nimport {connect, useDispatch, useSelector} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle, FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase, Select,\r\n    TextField,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Set({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize, setRowSize] = useState(40);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Set\", authUser)\r\n    // authUser.role.analysis = false;\r\n    \r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(num) {\r\n        setPageNum(num)\r\n        dispatch(setDictionary(dictionary, num, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        setKeyword(createKeyword)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, createKeyword, searchColumns))\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {\r\n                                                    setCreateId('');\r\n                                                    setCreateKeyword('');\r\n                                                    setCreateValue('');\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onChange={event => setCreateId(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onChange={event => setCreateKeyword(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onChange={event => setCreateValue(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Set)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Grid, IconButton, InputBase,\r\n    Button as MuiButton,\r\n    Card, CardContent,\r\n    Box as MuiBox,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    TextField,\r\n    Select,\r\n    FormControl,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary, updateDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize, setRowSize] = useState(20);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Synonym\", authUser);\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        const createSearchColumn = createId !== '' ? 'id' : createKeyword !== '' ? 'keyword' : 'value'\r\n        const createSearchKeyword = createId !== '' ? createId : createKeyword !== '' ? createKeyword : createValue\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        setMatch(true)\r\n        setSearchColumns(createSearchColumn)\r\n        setKeyword(createSearchKeyword)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, true, createSearchKeyword, createSearchColumn))\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                          checked={isMatch}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {setCreateKeyword('');setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                             {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onChange={event => setCreateId(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onChange={event => setCreateKeyword(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onChange={event => setCreateValue(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React, {useEffect, useState} from \"react\";\r\nimport {connect,useDispatch, useSelector} from 'react-redux';\r\nimport styled from \"styled-components\";\r\nimport {\r\n    Box as MuiBox,\r\n    Button as MuiButton,\r\n    Card,\r\n    CardContent,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle, FormControl,\r\n    Grid,\r\n    IconButton,\r\n    InputBase, Select,\r\n    TextField,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport {Search} from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\n\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction Space({ dictionary, authUser, setting, dataSet }) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize, setRowSize] = useState(40);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Space\", authUser);\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(num) {\r\n        setPageNum(num)\r\n        dispatch(setDictionary(dictionary, num, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        setKeyword(createKeyword)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, createKeyword, searchColumns))\r\n    }\r\n\r\n    let dataList = setting['columns'].map((column, index) => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search/>\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {\r\n                                                    setCreateId('');\r\n                                                    setCreateKeyword('');\r\n                                                    setCreateValue('');\r\n                                                    setCreateDialogOpen(true);\r\n                                                }}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={0}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={10}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={20}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={3}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          from={30}\r\n                                          limit={10}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onChange={event => setCreateId(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onChange={event => setCreateKeyword(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onChange={event => setCreateValue(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{cursor: 'move'}}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(Space)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Grid, IconButton, InputBase,\r\n    Button as MuiButton,\r\n    Card, CardContent,\r\n    Box as MuiBox,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    TextField,\r\n    Select,\r\n    FormControl,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary, updateDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize, setRowSize] = useState(20);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Synonym2Way\", authUser);\r\n    // authUser.role.analysis = false;\r\n\r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        setKeyword(createKeyword)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, createKeyword, searchColumns))\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        if (!confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        if (!confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {setCreateKeyword('');setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button>\r\n                            : <></> }\r\n                            \r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onChange={event => setCreateId(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onChange={event => setCreateKeyword(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onChange={event => setCreateValue(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React, {useEffect, useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\nimport {\r\n    Grid, IconButton, InputBase,\r\n    Button as MuiButton,\r\n    Card, CardContent,\r\n    Box as MuiBox,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    TextField,\r\n    Select,\r\n    FormControl,\r\n    MenuItem,\r\n} from \"@material-ui/core\";\r\n\r\nimport DynamicTable from \"~/components/DynamicTable\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {palette, sizing, spacing} from \"@material-ui/system\";\r\nimport {\r\n    createDictionary,\r\n    deleteDictionary,\r\n    downloadDictionary,\r\n    setDictionary, updateDictionary\r\n} from \"../../../redux/actions/dictionaryActions\";\r\nimport utils from \"../../../utils\";\r\n\r\nconst Button = styled(MuiButton)(spacing, sizing, palette)\r\nconst Box = styled(MuiBox)(spacing, sizing)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: { minWidth: 150 },\r\n    select: { minWidth: 80 },\r\n    form: { padding: '2px 4px', display: 'flex', alignItems: 'center', width: 500 },\r\n    input: { marginLeft: theme.spacing(1), flex: 1, borderBottom: \"1px solid gray\", '&:hover': { borderBottom: \"2px solid black\" } },\r\n    iconButton: {padding: 5,},\r\n    divider: { height: 28, margin: 4,},\r\n    right: { textAlign: \"right\"}\r\n}));\r\n\r\nlet checkedList = []\r\nlet searchedKeyword = \"\"\r\nfunction SynonymDictionary({dictionary, authUser, setting, dataSet}) {\r\n    const result = dataSet[dictionary] || {}\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles()\r\n    const [searchColumns, setSearchColumns] = useState(\"id,keyword,value\");\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [isMatch, setMatch] = useState(false);\r\n    const [mode, setMode] = useState(\"view\")  //view, edit\r\n    const [pageNum, setPageNum] = useState(0);\r\n    const [rowSize, setRowSize] = useState(20);\r\n\r\n    const [createId, setCreateId] = useState(\"\");\r\n    const [createKeyword, setCreateKeyword] = useState(\"\");\r\n    const [createValue, setCreateValue] = useState(\"\");\r\n\r\n    const [deleteDialogOpen, setDeleteDialogOpen] = React.useState(false);\r\n    const [createDialogOpen, setCreateDialogOpen] = React.useState(false);\r\n\r\n    // console.log(\"Custom\", authUser)\r\n    // authUser.role.analysis = false;\r\n    useEffect(() => {\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, keyword, searchColumns))\r\n    }, [])\r\n\r\n    function handleColumnChange(event) {\r\n        checkedList = []\r\n        setSearchColumns(event.target.value)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, event.target.value, searchColumns))\r\n    }\r\n\r\n    function toggleCheckbox(id, checked) {\r\n        checkedList = checked ? checkedList.concat(id) : checkedList.filter(select => select !== id)\r\n    }\r\n\r\n    function handlePagination(pageNum) {\r\n        setPageNum(pageNum)\r\n        dispatch(setDictionary(dictionary, pageNum, rowSize, isMatch, searchedKeyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchClick() {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    function handleCheckboxChange(event) {\r\n        checkedList = []\r\n        searchedKeyword = keyword\r\n        setPageNum(0)\r\n        setMatch(event.target.checked)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, event.target.checked, keyword, searchColumns))\r\n    }\r\n\r\n    function handleSearchShortcut(event) {\r\n        if (event.keyCode === 13) {\r\n            handleSearchClick()\r\n        }\r\n    }\r\n\r\n    async function handleDeleteData() {\r\n        for (let i = 0; i < checkedList.length; i++) {\r\n            await deleteDictionary(dictionary, checkedList[i])\r\n        }\r\n        checkedList = []\r\n        setDeleteDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, keyword, searchColumns))\r\n    }\r\n\r\n    async function handleCreateData() {\r\n        await createDictionary(dictionary, {id: createId, keyword: createKeyword, value: createValue})\r\n        setCreateId(\"\")\r\n        setCreateValue(\"\")\r\n        setCreateKeyword(\"\")\r\n        setCreateDialogOpen(false);\r\n        await utils.sleep(1000);\r\n        setKeyword(createKeyword)\r\n        dispatch(setDictionary(dictionary, 0, rowSize, isMatch, createKeyword, searchColumns))\r\n    }\r\n\r\n    async function handleDeleteButton(id) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 삭제 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n        checkedList = checkedList.filter(checkedListId => checkedListId !== id)\r\n        await deleteDictionary(dictionary, id)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    async function handleUpdateButton(id, row, columns) {\r\n        // eslint-disable-next-line no-restricted-globals\r\n        if (!confirm(\"해당 라인을 수정 하시겠습니까?\")) {\r\n            return false;\r\n        }\r\n\r\n        let data = columns.reduce((o, k, i) => {\r\n            return Object.assign( {[setting['columns'][i]['type']]: row[i]}, o)\r\n        }, {})\r\n\r\n        await updateDictionary(dictionary, id, data)\r\n        await utils.sleep(1000);\r\n        handlePagination(pageNum)\r\n    }\r\n\r\n    let dataList = setting['columns'].map(column => {\r\n        const hits = (result['hits'] || [])\r\n        return {\r\n            field: column['label'],\r\n            data: hits.map(hit => ({id: hit['id'], text: (hit['sourceAsMap'][column['type']] || '')}))\r\n        }\r\n    })\r\n\r\n    let createLabels = {}\r\n    const colId = setting['columns'].find(column => column['type'] === 'id')\r\n    const colKeyword = setting['columns'].find(column => column['type'] === 'keyword')\r\n    const colValue = setting['columns'].find(column => column['type'] === 'value')\r\n    if (colId) {\r\n        createLabels.id = colId['label']\r\n    }\r\n    if (colKeyword) {\r\n        createLabels.keyword = colKeyword['label']\r\n    }\r\n    if (colValue) {\r\n        createLabels.value = colValue['label']\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <br/>\r\n            <Card>\r\n                <CardContent>\r\n                    <Grid container>\r\n                        <Grid item xs={6}>\r\n                            <Box className={classes.form} display={\"inline\"}>\r\n                                {\r\n                                    setting['columns'] && setting['columns'].length > 1 ?\r\n                                        <FormControl className={classes.select}>\r\n                                            <Select value={searchColumns}\r\n                                                    onChange={handleColumnChange}\r\n                                            >\r\n                                                <MenuItem value={\"id,keyword,value\"}>전체</MenuItem>\r\n                                                {\r\n                                                    (setting['columns'] || [])\r\n                                                        .map(column => <MenuItem key={column['type']} value={column['type']}>{column['label']}</MenuItem>)\r\n                                                }\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        :\r\n                                        null\r\n                                }\r\n                                <InputBase\r\n                                    className={classes.input}\r\n                                    placeholder=\"검색\"\r\n                                    value={keyword}\r\n                                    onChange={event => setKeyword(event.target.value)}\r\n                                    onKeyUp={handleSearchShortcut}\r\n                                />\r\n\r\n                                <IconButton type=\"submit\"\r\n                                            className={classes.iconButton}\r\n                                            aria-label=\"search\"\r\n                                            onClick={handleSearchClick}\r\n                                >\r\n                                    <Search />\r\n                                </IconButton>\r\n\r\n                                <Checkbox color=\"primary\"\r\n                                          value={isMatch}\r\n                                          onChange={handleCheckboxChange}\r\n                                /> 단어매칭\r\n\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12} md={6} className={classes.right}>\r\n                            {mode === \"view\" ?\r\n                                (\r\n                                    <Button variant=\"outlined\"\r\n                                            color=\"primary\"\r\n                                            mx={1}\r\n                                            onClick={() => downloadDictionary(dictionary)}\r\n                                    >다운로드</Button>\r\n                                )\r\n                                :\r\n                                (\r\n                                    <React.Fragment>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => {setCreateKeyword('');setCreateDialogOpen(true);}}\r\n                                        >추가</Button>\r\n                                        <Button variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                mr={1}\r\n                                                onClick={() => setDeleteDialogOpen(true)}\r\n                                        >삭제</Button>\r\n                                    </React.Fragment>\r\n                                )\r\n                            }\r\n\r\n                            <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    mx={1}\r\n                                    onClick={() => handlePagination(pageNum)}\r\n                            >새로고침</Button>\r\n                            \r\n                            {authUser.role.analysis ? <Button variant=\"outlined\"\r\n                                    color=\"primary\"\r\n                                    onClick={() => setMode(mode === \"view\" ? \"edit\" : \"view\")}\r\n                                    mx={1}\r\n                            >{mode === \"view\" ? \"수정\" : \"보기\"}</Button> \r\n                            : <></> }\r\n                            \r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container spacing={6}>\r\n                        <Grid item xs={12}>\r\n                            <DynamicTable dataList={dataList}\r\n                                          showCheckBox={mode === \"edit\"}\r\n                                          isEdit={true}\r\n                                          onSelectClick={toggleCheckbox}\r\n                                          onUpdate={handleUpdateButton}\r\n                                          onDelete={handleDeleteButton}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <br/>\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Box align={\"center\"}>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum - 1)}\r\n                                        disabled={pageNum === 0}\r\n                                >\r\n                                    이전\r\n                                </Button>\r\n                                <Box component={\"span\"} m={3}>\r\n                                    {(result['lastPageNum'] || 0) === 0 ? 0 : pageNum + 1} / {result['lastPageNum'] || 0}\r\n                                </Box>\r\n                                <Button variant={\"outlined\"}\r\n                                        onClick={() => handlePagination(pageNum + 1)}\r\n                                        disabled={(pageNum + 1) === (result['lastPageNum'] || 0) || (result['lastPageNum'] || 0) === 0}\r\n                                >\r\n                                    다음\r\n                                </Button>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={createDialogOpen}\r\n                onClose={() => setCreateDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    등록\r\n                </DialogTitle>\r\n                <DialogContent>\r\n\r\n                    {\r\n                        createLabels.id ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.id} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createId} onChange={event => setCreateId(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.keyword ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.keyword} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createKeyword} onChange={event => setCreateKeyword(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n                    {\r\n                        createLabels.value ?\r\n                            <Grid container>\r\n                                <Grid item xs={4}>\r\n                                    <Box mt={2}> {createLabels.value} </Box>\r\n                                </Grid>\r\n                                <Grid item xs={8}>\r\n                                    <TextField autoFocus={true} value={createValue} onChange={event => setCreateValue(event.target.value)}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleCreateData} color=\"secondary\">\r\n                        추가\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setCreateDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Dialog\r\n                fullWidth={true}\r\n                open={deleteDialogOpen}\r\n                onClose={() => setDeleteDialogOpen(false)}\r\n            >\r\n                <DialogTitle style={{ cursor: 'move' }}>\r\n                    경고!\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {checkedList.length} 선택하신 단어를 삭제하시겠습니까?\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleDeleteData} color=\"secondary\">\r\n                        삭제\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => setDeleteDialogOpen(false)} color=\"primary\">\r\n                        취소\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default connect(store => ({ \r\n    authUser: store.dsearchReducers.authUser\r\n}))(SynonymDictionary)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\nimport Set from './Set'\r\nimport Synonym from './Synonym'\r\nimport Space from './Space'\r\nimport Synonym2Way from './Synonym2Way'\r\nimport Custom from './Custom'\r\n\r\nfunction WrapperTabPanel({ activeIndex, settings, dataSet }) {\r\n    const setting = settings[activeIndex]\r\n    const dictionary = setting['id']\r\n    const type = setting['type']\r\n\r\n    let Viewer = null\r\n    switch (type) {\r\n        case \"SET\": Viewer = Set; break;\r\n        case \"SYNONYM\": Viewer = Synonym; break;\r\n        case \"SPACE\": Viewer = Space; break; // Set 과 동일함...\r\n        case \"COMPOUND\": Viewer = Synonym; break; // Synonym 과 동일함...\r\n        case \"SYNONYM_2WAY\": Viewer = Synonym2Way; break; // Synonym 과 동일함...\r\n        case \"CUSTOM\": Viewer = Custom; break; // Synonym 과 동일함...\r\n        default: Viewer = () => <React.Fragment>지원하지 않는 타입 입니다.</React.Fragment>\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Viewer dictionary={dictionary}\r\n                    setting={setting}\r\n                    dataSet={dataSet}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default connect(store => ({...store.dictionaryReducers}))(WrapperTabPanel)","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Paper from '../Paper';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    overflow: 'hidden'\n  }\n};\nvar Card = React.forwardRef(function Card(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$raised = props.raised,\n      raised = _props$raised === void 0 ? false : _props$raised,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"raised\"]);\n\n  return React.createElement(Paper, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : 1,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   */\n  raised: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCard'\n})(Card);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Tablelvl2Context from '../Table/Tablelvl2Context';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'table-header-group'\n  }\n};\nvar tablelvl2 = {\n  variant: 'head'\n};\nvar TableHead = React.forwardRef(function TableHead(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'thead' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Tablelvl2Context.Provider, {\n    value: tablelvl2\n  }, React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other)));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableHead.propTypes = {\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableHead'\n})(TableHead);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { makeStyles as makeStylesWithoutDefault } from '@material-ui/styles';\nimport defaultTheme from './defaultTheme';\n\nfunction makeStyles(stylesOrCreator) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return makeStylesWithoutDefault(stylesOrCreator, _extends({\n    defaultTheme: defaultTheme\n  }, options));\n}\n\nexport default makeStyles;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport withStyles from '../styles/withStyles';\nimport FormLabel from '../FormLabel';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      transformOrigin: 'top left'\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {},\n\n    /* Pseudo-class applied to the asterisk element. */\n    asterisk: {},\n\n    /* Styles applied to the root element if the component is a descendant of `FormControl`. */\n    formControl: {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      // slight alteration to spec spacing to match visual spec result\n      transform: 'translate(0, 24px) scale(1)'\n    },\n\n    /* Styles applied to the root element if `margin=\"dense\"`. */\n    marginDense: {\n      // Compensation for the `Input.inputDense` style.\n      transform: 'translate(0, 21px) scale(1)'\n    },\n\n    /* Styles applied to the `input` element if `shrink={true}`. */\n    shrink: {\n      transform: 'translate(0, 1.5px) scale(0.75)',\n      transformOrigin: 'top left'\n    },\n\n    /* Styles applied to the `input` element if `disableAnimation={false}`. */\n    animated: {\n      transition: theme.transitions.create(['color', 'transform'], {\n        duration: theme.transitions.duration.shorter,\n        easing: theme.transitions.easing.easeOut\n      })\n    },\n\n    /* Styles applied to the root element if `variant=\"filled\"`. */\n    filled: {\n      // Chrome's autofill feature gives the input field a yellow background.\n      // Since the input field is behind the label in the HTML tree,\n      // the input field is drawn last and hides the label with an opaque background color.\n      // zIndex: 1 will raise the label above opaque background-colors of input.\n      zIndex: 1,\n      pointerEvents: 'none',\n      transform: 'translate(12px, 20px) scale(1)',\n      '&$marginDense': {\n        transform: 'translate(12px, 17px) scale(1)'\n      },\n      '&$shrink': {\n        transform: 'translate(12px, 10px) scale(0.75)',\n        '&$marginDense': {\n          transform: 'translate(12px, 7px) scale(0.75)'\n        }\n      }\n    },\n\n    /* Styles applied to the root element if `variant=\"outlined\"`. */\n    outlined: {\n      // see comment above on filled.zIndex\n      zIndex: 1,\n      pointerEvents: 'none',\n      transform: 'translate(14px, 20px) scale(1)',\n      '&$marginDense': {\n        transform: 'translate(14px, 12px) scale(1)'\n      },\n      '&$shrink': {\n        transform: 'translate(14px, -6px) scale(0.75)'\n      }\n    }\n  };\n};\nvar InputLabel = React.forwardRef(function InputLabel(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$disableAnimati = props.disableAnimation,\n      disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati,\n      margin = props.margin,\n      shrinkProp = props.shrink,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"disableAnimation\", \"margin\", \"shrink\", \"variant\"]);\n\n  var muiFormControl = useFormControl();\n  var shrink = shrinkProp;\n\n  if (typeof shrink === 'undefined' && muiFormControl) {\n    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;\n  }\n\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['margin', 'variant']\n  });\n  return React.createElement(FormLabel, _extends({\n    \"data-shrink\": shrink,\n    className: clsx(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, {\n      'filled': classes.filled,\n      'outlined': classes.outlined\n    }[fcs.variant]),\n    classes: {\n      focused: classes.focused,\n      disabled: classes.disabled,\n      error: classes.error,\n      required: classes.required,\n      asterisk: classes.asterisk\n    },\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputLabel.propTypes = {\n  /**\n   * The contents of the `InputLabel`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * If `true`, the transition animation is disabled.\n   */\n  disableAnimation: PropTypes.bool,\n\n  /**\n   * If `true`, apply disabled class.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label will be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused.\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `dense`, will adjust vertical spacing. This is normally obtained via context from\n   * FormControl.\n   */\n  margin: PropTypes.oneOf(['dense']),\n\n  /**\n   * if `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * If `true`, the label is shrunk.\n   */\n  shrink: PropTypes.bool,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputLabel'\n})(InputLabel);","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({\n      color: theme.palette.text.secondary\n    }, theme.typography.body1, {\n      lineHeight: 1,\n      padding: 0,\n      '&$focused': {\n        color: theme.palette.primary.main\n      },\n      '&$disabled': {\n        color: theme.palette.text.disabled\n      },\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }),\n\n    /* Styles applied to the root element if the color is secondary. */\n    colorSecondary: {\n      '&$focused': {\n        color: theme.palette.secondary.main\n      }\n    },\n\n    /* Pseudo-class applied to the root element if `focused={true}`. */\n    focused: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `error={true}`. */\n    error: {},\n\n    /* Pseudo-class applied to the root element if `filled={true}`. */\n    filled: {},\n\n    /* Pseudo-class applied to the root element if `required={true}`. */\n    required: {},\n\n    /* Styles applied to the asterisk element. */\n    asterisk: {\n      '&$error': {\n        color: theme.palette.error.main\n      }\n    }\n  };\n};\nvar FormLabel = React.forwardRef(function FormLabel(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      color = props.color,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'label' : _props$component,\n      disabled = props.disabled,\n      error = props.error,\n      filled = props.filled,\n      focused = props.focused,\n      required = props.required,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"required\"]);\n\n  var muiFormControl = useFormControl();\n  var fcs = formControlState({\n    props: props,\n    muiFormControl: muiFormControl,\n    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']\n  });\n  return React.createElement(Component, _extends({\n    className: clsx(classes.root, classes[\"color\".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),\n    ref: ref\n  }, other), children, fcs.required && React.createElement(\"span\", {\n    className: clsx(classes.asterisk, fcs.error && classes.error)\n  }, \"\\u2009\", '*'));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormLabel.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the label should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the label should be displayed in an error state.\n   */\n  error: PropTypes.bool,\n\n  /**\n   * If `true`, the label should use filled classes key.\n   */\n  filled: PropTypes.bool,\n\n  /**\n   * If `true`, the input of this label is focused (used by `FormGroup` components).\n   */\n  focused: PropTypes.bool,\n\n  /**\n   * If `true`, the label will indicate that the input is required.\n   */\n  required: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiFormLabel'\n})(FormLabel);","const utils ={\r\n    sleep:(ms) => new Promise(resolve => setTimeout(resolve, ms)),\r\n\r\n\r\n\r\n}\r\n\r\nexport default utils","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import * as React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = React.createElement(CheckBoxIcon, null);\nvar defaultIcon = React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIcon = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\", \"size\"]);\n\n  return React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: React.cloneElement(indeterminate ? indeterminateIcon : icon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    checkedIcon: React.cloneElement(indeterminate ? indeterminateIcon : checkedIcon, {\n      fontSize: size === 'small' ? 'small' : 'default'\n    }),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the checkbox will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The size of the checkbox.\n   * `small` is equivalent to the dense checkbox styling.\n   */\n  size: PropTypes.oneOf(['small', 'medium']),\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    width: '100%',\n    overflowX: 'auto'\n  }\n};\nvar TableContainer = React.forwardRef(function TableContainer(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes = {\n  /**\n   * The table itself, normally `<Table />`\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiTableContainer'\n})(TableContainer);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = React.forwardRef(function DialogContentText(props, ref) {\n  return React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes = {\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);"],"sourceRoot":""}